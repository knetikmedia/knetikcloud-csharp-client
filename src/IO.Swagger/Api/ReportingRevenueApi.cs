/* 
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportingRevenueApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get revenue info by country
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageRevenueCountryReportResource</returns>
        PageRevenueCountryReportResource ExecutiveRevenueCountrySalesUsingGET (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null);

        /// <summary>
        /// Get revenue info by country
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageRevenueCountryReportResource</returns>
        ApiResponse<PageRevenueCountryReportResource> ExecutiveRevenueCountrySalesUsingGETWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null);
        /// <summary>
        /// Get item revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>RevenueReportResource</returns>
        RevenueReportResource ExecutiveRevenueItemSalesUsingGET (string currencyCode, long? startDate = null, long? endDate = null);

        /// <summary>
        /// Get item revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>ApiResponse of RevenueReportResource</returns>
        ApiResponse<RevenueReportResource> ExecutiveRevenueItemSalesUsingGETWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null);
        /// <summary>
        /// Get revenue info by item
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageRevenueProductReportResource</returns>
        PageRevenueProductReportResource ExecutiveRevenueProductSalesUsingGET (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null);

        /// <summary>
        /// Get revenue info by item
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageRevenueProductReportResource</returns>
        ApiResponse<PageRevenueProductReportResource> ExecutiveRevenueProductSalesUsingGETWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null);
        /// <summary>
        /// Get refund revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get refund data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>RevenueReportResource</returns>
        RevenueReportResource ExecutiveRevenueRefundsUsingGET (string currencyCode, long? startDate = null, long? endDate = null);

        /// <summary>
        /// Get refund revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get refund data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>ApiResponse of RevenueReportResource</returns>
        ApiResponse<RevenueReportResource> ExecutiveRevenueRefundsUsingGETWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null);
        /// <summary>
        /// Get subscription revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>RevenueReportResource</returns>
        RevenueReportResource ExecutiveRevenueSubscriptionSalesUsingGET (string currencyCode, long? startDate = null, long? endDate = null);

        /// <summary>
        /// Get subscription revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>ApiResponse of RevenueReportResource</returns>
        ApiResponse<RevenueReportResource> ExecutiveRevenueSubscriptionSalesUsingGETWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get revenue info by country
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageRevenueCountryReportResource</returns>
        System.Threading.Tasks.Task<PageRevenueCountryReportResource> ExecutiveRevenueCountrySalesUsingGETAsync (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null);

        /// <summary>
        /// Get revenue info by country
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageRevenueCountryReportResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageRevenueCountryReportResource>> ExecutiveRevenueCountrySalesUsingGETAsyncWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null);
        /// <summary>
        /// Get item revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of RevenueReportResource</returns>
        System.Threading.Tasks.Task<RevenueReportResource> ExecutiveRevenueItemSalesUsingGETAsync (string currencyCode, long? startDate = null, long? endDate = null);

        /// <summary>
        /// Get item revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of ApiResponse (RevenueReportResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RevenueReportResource>> ExecutiveRevenueItemSalesUsingGETAsyncWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null);
        /// <summary>
        /// Get revenue info by item
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageRevenueProductReportResource</returns>
        System.Threading.Tasks.Task<PageRevenueProductReportResource> ExecutiveRevenueProductSalesUsingGETAsync (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null);

        /// <summary>
        /// Get revenue info by item
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageRevenueProductReportResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageRevenueProductReportResource>> ExecutiveRevenueProductSalesUsingGETAsyncWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null);
        /// <summary>
        /// Get refund revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get refund data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of RevenueReportResource</returns>
        System.Threading.Tasks.Task<RevenueReportResource> ExecutiveRevenueRefundsUsingGETAsync (string currencyCode, long? startDate = null, long? endDate = null);

        /// <summary>
        /// Get refund revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get refund data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of ApiResponse (RevenueReportResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RevenueReportResource>> ExecutiveRevenueRefundsUsingGETAsyncWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null);
        /// <summary>
        /// Get subscription revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of RevenueReportResource</returns>
        System.Threading.Tasks.Task<RevenueReportResource> ExecutiveRevenueSubscriptionSalesUsingGETAsync (string currencyCode, long? startDate = null, long? endDate = null);

        /// <summary>
        /// Get subscription revenue info
        /// </summary>
        /// <remarks>
        /// Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of ApiResponse (RevenueReportResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RevenueReportResource>> ExecutiveRevenueSubscriptionSalesUsingGETAsyncWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportingRevenueApi : IReportingRevenueApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingRevenueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportingRevenueApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingRevenueApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportingRevenueApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get revenue info by country Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageRevenueCountryReportResource</returns>
        public PageRevenueCountryReportResource ExecutiveRevenueCountrySalesUsingGET (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null)
        {
             ApiResponse<PageRevenueCountryReportResource> localVarResponse = ExecutiveRevenueCountrySalesUsingGETWithHttpInfo(currencyCode, startDate, endDate, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get revenue info by country Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageRevenueCountryReportResource</returns>
        public ApiResponse< PageRevenueCountryReportResource > ExecutiveRevenueCountrySalesUsingGETWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingRevenueApi->ExecutiveRevenueCountrySalesUsingGET");

            var localVarPath = "/reporting/revenue/countries/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutiveRevenueCountrySalesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageRevenueCountryReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageRevenueCountryReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageRevenueCountryReportResource)));
            
        }

        /// <summary>
        /// Get revenue info by country Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageRevenueCountryReportResource</returns>
        public async System.Threading.Tasks.Task<PageRevenueCountryReportResource> ExecutiveRevenueCountrySalesUsingGETAsync (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null)
        {
             ApiResponse<PageRevenueCountryReportResource> localVarResponse = await ExecutiveRevenueCountrySalesUsingGETAsyncWithHttpInfo(currencyCode, startDate, endDate, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get revenue info by country Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageRevenueCountryReportResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageRevenueCountryReportResource>> ExecutiveRevenueCountrySalesUsingGETAsyncWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingRevenueApi->ExecutiveRevenueCountrySalesUsingGET");

            var localVarPath = "/reporting/revenue/countries/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutiveRevenueCountrySalesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageRevenueCountryReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageRevenueCountryReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageRevenueCountryReportResource)));
            
        }

        /// <summary>
        /// Get item revenue info Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>RevenueReportResource</returns>
        public RevenueReportResource ExecutiveRevenueItemSalesUsingGET (string currencyCode, long? startDate = null, long? endDate = null)
        {
             ApiResponse<RevenueReportResource> localVarResponse = ExecutiveRevenueItemSalesUsingGETWithHttpInfo(currencyCode, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get item revenue info Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>ApiResponse of RevenueReportResource</returns>
        public ApiResponse< RevenueReportResource > ExecutiveRevenueItemSalesUsingGETWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingRevenueApi->ExecutiveRevenueItemSalesUsingGET");

            var localVarPath = "/reporting/revenue/item-sales/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutiveRevenueItemSalesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevenueReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RevenueReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevenueReportResource)));
            
        }

        /// <summary>
        /// Get item revenue info Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of RevenueReportResource</returns>
        public async System.Threading.Tasks.Task<RevenueReportResource> ExecutiveRevenueItemSalesUsingGETAsync (string currencyCode, long? startDate = null, long? endDate = null)
        {
             ApiResponse<RevenueReportResource> localVarResponse = await ExecutiveRevenueItemSalesUsingGETAsyncWithHttpInfo(currencyCode, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get item revenue info Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of ApiResponse (RevenueReportResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RevenueReportResource>> ExecutiveRevenueItemSalesUsingGETAsyncWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingRevenueApi->ExecutiveRevenueItemSalesUsingGET");

            var localVarPath = "/reporting/revenue/item-sales/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutiveRevenueItemSalesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevenueReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RevenueReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevenueReportResource)));
            
        }

        /// <summary>
        /// Get revenue info by item Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageRevenueProductReportResource</returns>
        public PageRevenueProductReportResource ExecutiveRevenueProductSalesUsingGET (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null)
        {
             ApiResponse<PageRevenueProductReportResource> localVarResponse = ExecutiveRevenueProductSalesUsingGETWithHttpInfo(currencyCode, startDate, endDate, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get revenue info by item Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageRevenueProductReportResource</returns>
        public ApiResponse< PageRevenueProductReportResource > ExecutiveRevenueProductSalesUsingGETWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingRevenueApi->ExecutiveRevenueProductSalesUsingGET");

            var localVarPath = "/reporting/revenue/products/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutiveRevenueProductSalesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageRevenueProductReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageRevenueProductReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageRevenueProductReportResource)));
            
        }

        /// <summary>
        /// Get revenue info by item Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageRevenueProductReportResource</returns>
        public async System.Threading.Tasks.Task<PageRevenueProductReportResource> ExecutiveRevenueProductSalesUsingGETAsync (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null)
        {
             ApiResponse<PageRevenueProductReportResource> localVarResponse = await ExecutiveRevenueProductSalesUsingGETAsyncWithHttpInfo(currencyCode, startDate, endDate, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get revenue info by item Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageRevenueProductReportResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageRevenueProductReportResource>> ExecutiveRevenueProductSalesUsingGETAsyncWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingRevenueApi->ExecutiveRevenueProductSalesUsingGET");

            var localVarPath = "/reporting/revenue/products/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutiveRevenueProductSalesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageRevenueProductReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageRevenueProductReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageRevenueProductReportResource)));
            
        }

        /// <summary>
        /// Get refund revenue info Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get refund data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>RevenueReportResource</returns>
        public RevenueReportResource ExecutiveRevenueRefundsUsingGET (string currencyCode, long? startDate = null, long? endDate = null)
        {
             ApiResponse<RevenueReportResource> localVarResponse = ExecutiveRevenueRefundsUsingGETWithHttpInfo(currencyCode, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get refund revenue info Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get refund data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>ApiResponse of RevenueReportResource</returns>
        public ApiResponse< RevenueReportResource > ExecutiveRevenueRefundsUsingGETWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingRevenueApi->ExecutiveRevenueRefundsUsingGET");

            var localVarPath = "/reporting/revenue/refunds/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutiveRevenueRefundsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevenueReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RevenueReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevenueReportResource)));
            
        }

        /// <summary>
        /// Get refund revenue info Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get refund data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of RevenueReportResource</returns>
        public async System.Threading.Tasks.Task<RevenueReportResource> ExecutiveRevenueRefundsUsingGETAsync (string currencyCode, long? startDate = null, long? endDate = null)
        {
             ApiResponse<RevenueReportResource> localVarResponse = await ExecutiveRevenueRefundsUsingGETAsyncWithHttpInfo(currencyCode, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get refund revenue info Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get refund data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of ApiResponse (RevenueReportResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RevenueReportResource>> ExecutiveRevenueRefundsUsingGETAsyncWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingRevenueApi->ExecutiveRevenueRefundsUsingGET");

            var localVarPath = "/reporting/revenue/refunds/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutiveRevenueRefundsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevenueReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RevenueReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevenueReportResource)));
            
        }

        /// <summary>
        /// Get subscription revenue info Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>RevenueReportResource</returns>
        public RevenueReportResource ExecutiveRevenueSubscriptionSalesUsingGET (string currencyCode, long? startDate = null, long? endDate = null)
        {
             ApiResponse<RevenueReportResource> localVarResponse = ExecutiveRevenueSubscriptionSalesUsingGETWithHttpInfo(currencyCode, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscription revenue info Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>ApiResponse of RevenueReportResource</returns>
        public ApiResponse< RevenueReportResource > ExecutiveRevenueSubscriptionSalesUsingGETWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingRevenueApi->ExecutiveRevenueSubscriptionSalesUsingGET");

            var localVarPath = "/reporting/revenue/subscription-sales/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutiveRevenueSubscriptionSalesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevenueReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RevenueReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevenueReportResource)));
            
        }

        /// <summary>
        /// Get subscription revenue info Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of RevenueReportResource</returns>
        public async System.Threading.Tasks.Task<RevenueReportResource> ExecutiveRevenueSubscriptionSalesUsingGETAsync (string currencyCode, long? startDate = null, long? endDate = null)
        {
             ApiResponse<RevenueReportResource> localVarResponse = await ExecutiveRevenueSubscriptionSalesUsingGETAsyncWithHttpInfo(currencyCode, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get subscription revenue info Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyCode">The code for a currency to get sales data for</param>
        /// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>
        /// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
        /// <returns>Task of ApiResponse (RevenueReportResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RevenueReportResource>> ExecutiveRevenueSubscriptionSalesUsingGETAsyncWithHttpInfo (string currencyCode, long? startDate = null, long? endDate = null)
        {
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling ReportingRevenueApi->ExecutiveRevenueSubscriptionSalesUsingGET");

            var localVarPath = "/reporting/revenue/subscription-sales/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (startDate != null) localVarQueryParams.Add("start_date", Configuration.ApiClient.ParameterToString(startDate)); // query parameter
            if (endDate != null) localVarQueryParams.Add("end_date", Configuration.ApiClient.ParameterToString(endDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecutiveRevenueSubscriptionSalesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RevenueReportResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RevenueReportResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RevenueReportResource)));
            
        }

    }
}
