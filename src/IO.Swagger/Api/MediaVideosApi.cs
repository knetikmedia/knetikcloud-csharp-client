/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaVideosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id </param>
        /// <param name="commentResource">The comment object (optional)</param>
        /// <returns>CommentResource</returns>
        CommentResource AddCommentUsingPOST1 (int? videoId, CommentResource commentResource = null);

        /// <summary>
        /// Add a new video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id </param>
        /// <param name="commentResource">The comment object (optional)</param>
        /// <returns>ApiResponse of CommentResource</returns>
        ApiResponse<CommentResource> AddCommentUsingPOST1WithHttpInfo (int? videoId, CommentResource commentResource = null);
        /// <summary>
        /// Adds a contributor to a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="contributionResource">The contribution object (optional)</param>
        /// <returns></returns>
        void AddContributorUsingPOST (long? videoId, ContributionResource contributionResource = null);

        /// <summary>
        /// Adds a contributor to a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="contributionResource">The contribution object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddContributorUsingPOSTWithHttpInfo (long? videoId, ContributionResource contributionResource = null);
        /// <summary>
        /// Add a new Video disposition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="dispositionResource">The disposition object (optional)</param>
        /// <returns>DispositionResource</returns>
        DispositionResource AddDispositionUsingPOST1 (int? videoId, DispositionResource dispositionResource = null);

        /// <summary>
        /// Add a new Video disposition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="dispositionResource">The disposition object (optional)</param>
        /// <returns>ApiResponse of DispositionResource</returns>
        ApiResponse<DispositionResource> AddDispositionUsingPOST1WithHttpInfo (int? videoId, DispositionResource dispositionResource = null);
        /// <summary>
        /// Add a new flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="reason">The flag reason (optional)</param>
        /// <returns></returns>
        void AddFlagUsingPOST (long? videoId, string reason = null);

        /// <summary>
        /// Add a new flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="reason">The flag reason (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddFlagUsingPOSTWithHttpInfo (long? videoId, string reason = null);
        /// <summary>
        /// Adds one or more existing videos as related to this one
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="videoRelationshipResource">The video relationship object  (optional)</param>
        /// <returns>VideoRelationshipResource</returns>
        VideoRelationshipResource AddRelatedUsingPOST (long? videoId, VideoRelationshipResource videoRelationshipResource = null);

        /// <summary>
        /// Adds one or more existing videos as related to this one
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="videoRelationshipResource">The video relationship object  (optional)</param>
        /// <returns>ApiResponse of VideoRelationshipResource</returns>
        ApiResponse<VideoRelationshipResource> AddRelatedUsingPOSTWithHttpInfo (long? videoId, VideoRelationshipResource videoRelationshipResource = null);
        /// <summary>
        /// Adds a new video in the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>VideoResource</returns>
        VideoResource AddVideoUsingPOST (VideoResource videoResource = null);

        /// <summary>
        /// Adds a new video in the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>ApiResponse of VideoResource</returns>
        ApiResponse<VideoResource> AddVideoUsingPOSTWithHttpInfo (VideoResource videoResource = null);
        /// <summary>
        /// Adds a user to a video&#39;s whitelist
        /// </summary>
        /// <remarks>
        /// Whitelisted users can view video regardless of privacy setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="userId">The user id (optional)</param>
        /// <returns></returns>
        void AddWhitelistUsingPOST (long? id, int? userId = null);

        /// <summary>
        /// Adds a user to a video&#39;s whitelist
        /// </summary>
        /// <remarks>
        /// Whitelisted users can view video regardless of privacy setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="userId">The user id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddWhitelistUsingPOSTWithHttpInfo (long? id, int? userId = null);
        /// <summary>
        /// Delete a video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <returns></returns>
        void DeleteCommentUsingDELETE1 (long? videoId, long? id);

        /// <summary>
        /// Delete a video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCommentUsingDELETE1WithHttpInfo (long? videoId, long? id);
        /// <summary>
        /// Delete a video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispositionId">The disposition id</param>
        /// <returns></returns>
        void DeleteDispositionUsingDELETE1 (long? dispositionId);

        /// <summary>
        /// Delete a video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispositionId">The disposition id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDispositionUsingDELETE1WithHttpInfo (long? dispositionId);
        /// <summary>
        /// Delete a flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <returns></returns>
        void DeleteFlagUsingDELETE (long? videoId);

        /// <summary>
        /// Delete a flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFlagUsingDELETEWithHttpInfo (long? videoId);
        /// <summary>
        /// Delete a video&#39;s relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The relationship id</param>
        /// <returns></returns>
        void DeleteRelationshipUsingDELETE1 (long? videoId, long? id);

        /// <summary>
        /// Delete a video&#39;s relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The relationship id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRelationshipUsingDELETE1WithHttpInfo (long? videoId, long? id);
        /// <summary>
        /// Removes a video from the system if no resources are attached to it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns></returns>
        void DeleteVideoUsingDELETE (long? id);

        /// <summary>
        /// Removes a video from the system if no resources are attached to it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVideoUsingDELETEWithHttpInfo (long? id);
        /// <summary>
        /// Returns a page of comments for a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceCommentResource</returns>
        PageResourceCommentResource GetCommentsUsingGET1 (int? videoId, int? size = null, int? page = null);

        /// <summary>
        /// Returns a page of comments for a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceCommentResource</returns>
        ApiResponse<PageResourceCommentResource> GetCommentsUsingGET1WithHttpInfo (int? videoId, int? size = null, int? page = null);
        /// <summary>
        /// Returns a page of dispositions for a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceDispositionResource</returns>
        PageResourceDispositionResource GetDispositionsUsingGET1 (int? videoId, int? size = null, int? page = null);

        /// <summary>
        /// Returns a page of dispositions for a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceDispositionResource</returns>
        ApiResponse<PageResourceDispositionResource> GetDispositionsUsingGET1WithHttpInfo (int? videoId, int? size = null, int? page = null);
        /// <summary>
        /// Returns a page of video relationships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceVideoRelationshipResource</returns>
        PageResourceVideoRelationshipResource GetRelatedUsingGET (long? videoId, int? size = null, int? page = null);

        /// <summary>
        /// Returns a page of video relationships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceVideoRelationshipResource</returns>
        ApiResponse<PageResourceVideoRelationshipResource> GetRelatedUsingGETWithHttpInfo (long? videoId, int? size = null, int? page = null);
        /// <summary>
        /// Get user videos
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceVideoResource</returns>
        PageResourceVideoResource GetUserVideosUsingGET (int? userId, bool? excludeFlagged = null, int? size = null, int? page = null);

        /// <summary>
        /// Get user videos
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceVideoResource</returns>
        ApiResponse<PageResourceVideoResource> GetUserVideosUsingGETWithHttpInfo (int? userId, bool? excludeFlagged = null, int? size = null, int? page = null);
        /// <summary>
        /// Loads a specific video details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>VideoResource</returns>
        VideoResource GetVideoUsingGET (long? id);

        /// <summary>
        /// Loads a specific video details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>ApiResponse of VideoResource</returns>
        ApiResponse<VideoResource> GetVideoUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// Removes a contributor from a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The contributor id</param>
        /// <returns></returns>
        void RemoveContributorUsingDELETE (long? videoId, int? id);

        /// <summary>
        /// Removes a contributor from a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The contributor id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveContributorUsingDELETEWithHttpInfo (long? videoId, int? id);
        /// <summary>
        /// Removes a user from a video&#39;s whitelist
        /// </summary>
        /// <remarks>
        /// Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The user id</param>
        /// <returns></returns>
        void RemoveWhitelistUsingDELETE (long? videoId, int? id);

        /// <summary>
        /// Removes a user from a video&#39;s whitelist
        /// </summary>
        /// <remarks>
        /// Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The user id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWhitelistUsingDELETEWithHttpInfo (long? videoId, int? id);
        /// <summary>
        /// Search videos using the documented filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="filterVideosByUploader">Filter for videos by uploader id (optional)</param>
        /// <param name="filterCategory">Filter for videos from a specific category by id (optional)</param>
        /// <param name="filterTagset">Filter for videos with specified tags (separated by comma) (optional)</param>
        /// <param name="filterVideosByName">Filter for videos which name *STARTS* with the given string (optional)</param>
        /// <param name="filterVideosByContributor">Filter for videos with contribution from the artist specified by ID (optional)</param>
        /// <param name="filterVideosByAuthor">Filter for videos with an artist as author specified by ID (optional)</param>
        /// <param name="filterHasAuthor">Filter for videos that have an author set if true, or that have no author if false (optional)</param>
        /// <param name="filterHasUploader">Filter for videos that have an uploader set if true, or that have no uploader if false (optional)</param>
        /// <param name="filterRelatedTo">Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)</param>
        /// <param name="filterFriends">Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)</param>
        /// <param name="filterDisposition">Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)</param>
        /// <returns>PageResourceVideoResource</returns>
        PageResourceVideoResource SearchVideosUsingGET (bool? excludeFlagged = null, string filterVideosByUploader = null, string filterCategory = null, string filterTagset = null, string filterVideosByName = null, string filterVideosByContributor = null, string filterVideosByAuthor = null, bool? filterHasAuthor = null, bool? filterHasUploader = null, string filterRelatedTo = null, bool? filterFriends = null, string filterDisposition = null, int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Search videos using the documented filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="filterVideosByUploader">Filter for videos by uploader id (optional)</param>
        /// <param name="filterCategory">Filter for videos from a specific category by id (optional)</param>
        /// <param name="filterTagset">Filter for videos with specified tags (separated by comma) (optional)</param>
        /// <param name="filterVideosByName">Filter for videos which name *STARTS* with the given string (optional)</param>
        /// <param name="filterVideosByContributor">Filter for videos with contribution from the artist specified by ID (optional)</param>
        /// <param name="filterVideosByAuthor">Filter for videos with an artist as author specified by ID (optional)</param>
        /// <param name="filterHasAuthor">Filter for videos that have an author set if true, or that have no author if false (optional)</param>
        /// <param name="filterHasUploader">Filter for videos that have an uploader set if true, or that have no uploader if false (optional)</param>
        /// <param name="filterRelatedTo">Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)</param>
        /// <param name="filterFriends">Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)</param>
        /// <param name="filterDisposition">Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)</param>
        /// <returns>ApiResponse of PageResourceVideoResource</returns>
        ApiResponse<PageResourceVideoResource> SearchVideosUsingGETWithHttpInfo (bool? excludeFlagged = null, string filterVideosByUploader = null, string filterCategory = null, string filterTagset = null, string filterVideosByName = null, string filterVideosByContributor = null, string filterVideosByAuthor = null, bool? filterHasAuthor = null, bool? filterHasUploader = null, string filterRelatedTo = null, bool? filterFriends = null, string filterDisposition = null, int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Update video comment content 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <param name="content">The comment content (optional)</param>
        /// <returns></returns>
        void UpdateCommentUsingPUT1 (long? videoId, long? id, string content = null);

        /// <summary>
        /// Update video comment content 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <param name="content">The comment content (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCommentUsingPUT1WithHttpInfo (long? videoId, long? id, string content = null);
        /// <summary>
        /// Update a video&#39;s relationship details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="relationshipId">The relationship id</param>
        /// <param name="details">The video relationship details (optional)</param>
        /// <returns></returns>
        void UpdateRelationshipUsingPUT1 (long? videoId, long? relationshipId, string details = null);

        /// <summary>
        /// Update a video&#39;s relationship details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="relationshipId">The relationship id</param>
        /// <param name="details">The video relationship details (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRelationshipUsingPUT1WithHttpInfo (long? videoId, long? relationshipId, string details = null);
        /// <summary>
        /// Modifies a video&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns></returns>
        void UpdateVideoUsingPUT (long? id, VideoResource videoResource = null);

        /// <summary>
        /// Modifies a video&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateVideoUsingPUTWithHttpInfo (long? id, VideoResource videoResource = null);
        /// <summary>
        /// Increment a video&#39;s view count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns></returns>
        void ViewVideoUsingPOST (long? id);

        /// <summary>
        /// Increment a video&#39;s view count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ViewVideoUsingPOSTWithHttpInfo (long? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a new video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id </param>
        /// <param name="commentResource">The comment object (optional)</param>
        /// <returns>Task of CommentResource</returns>
        System.Threading.Tasks.Task<CommentResource> AddCommentUsingPOST1Async (int? videoId, CommentResource commentResource = null);

        /// <summary>
        /// Add a new video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id </param>
        /// <param name="commentResource">The comment object (optional)</param>
        /// <returns>Task of ApiResponse (CommentResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResource>> AddCommentUsingPOST1AsyncWithHttpInfo (int? videoId, CommentResource commentResource = null);
        /// <summary>
        /// Adds a contributor to a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="contributionResource">The contribution object (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddContributorUsingPOSTAsync (long? videoId, ContributionResource contributionResource = null);

        /// <summary>
        /// Adds a contributor to a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="contributionResource">The contribution object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddContributorUsingPOSTAsyncWithHttpInfo (long? videoId, ContributionResource contributionResource = null);
        /// <summary>
        /// Add a new Video disposition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="dispositionResource">The disposition object (optional)</param>
        /// <returns>Task of DispositionResource</returns>
        System.Threading.Tasks.Task<DispositionResource> AddDispositionUsingPOST1Async (int? videoId, DispositionResource dispositionResource = null);

        /// <summary>
        /// Add a new Video disposition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="dispositionResource">The disposition object (optional)</param>
        /// <returns>Task of ApiResponse (DispositionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<DispositionResource>> AddDispositionUsingPOST1AsyncWithHttpInfo (int? videoId, DispositionResource dispositionResource = null);
        /// <summary>
        /// Add a new flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="reason">The flag reason (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddFlagUsingPOSTAsync (long? videoId, string reason = null);

        /// <summary>
        /// Add a new flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="reason">The flag reason (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddFlagUsingPOSTAsyncWithHttpInfo (long? videoId, string reason = null);
        /// <summary>
        /// Adds one or more existing videos as related to this one
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="videoRelationshipResource">The video relationship object  (optional)</param>
        /// <returns>Task of VideoRelationshipResource</returns>
        System.Threading.Tasks.Task<VideoRelationshipResource> AddRelatedUsingPOSTAsync (long? videoId, VideoRelationshipResource videoRelationshipResource = null);

        /// <summary>
        /// Adds one or more existing videos as related to this one
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="videoRelationshipResource">The video relationship object  (optional)</param>
        /// <returns>Task of ApiResponse (VideoRelationshipResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoRelationshipResource>> AddRelatedUsingPOSTAsyncWithHttpInfo (long? videoId, VideoRelationshipResource videoRelationshipResource = null);
        /// <summary>
        /// Adds a new video in the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>Task of VideoResource</returns>
        System.Threading.Tasks.Task<VideoResource> AddVideoUsingPOSTAsync (VideoResource videoResource = null);

        /// <summary>
        /// Adds a new video in the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>Task of ApiResponse (VideoResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoResource>> AddVideoUsingPOSTAsyncWithHttpInfo (VideoResource videoResource = null);
        /// <summary>
        /// Adds a user to a video&#39;s whitelist
        /// </summary>
        /// <remarks>
        /// Whitelisted users can view video regardless of privacy setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="userId">The user id (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddWhitelistUsingPOSTAsync (long? id, int? userId = null);

        /// <summary>
        /// Adds a user to a video&#39;s whitelist
        /// </summary>
        /// <remarks>
        /// Whitelisted users can view video regardless of privacy setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="userId">The user id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddWhitelistUsingPOSTAsyncWithHttpInfo (long? id, int? userId = null);
        /// <summary>
        /// Delete a video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCommentUsingDELETE1Async (long? videoId, long? id);

        /// <summary>
        /// Delete a video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommentUsingDELETE1AsyncWithHttpInfo (long? videoId, long? id);
        /// <summary>
        /// Delete a video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispositionId">The disposition id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDispositionUsingDELETE1Async (long? dispositionId);

        /// <summary>
        /// Delete a video comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispositionId">The disposition id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDispositionUsingDELETE1AsyncWithHttpInfo (long? dispositionId);
        /// <summary>
        /// Delete a flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFlagUsingDELETEAsync (long? videoId);

        /// <summary>
        /// Delete a flag
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFlagUsingDELETEAsyncWithHttpInfo (long? videoId);
        /// <summary>
        /// Delete a video&#39;s relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The relationship id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRelationshipUsingDELETE1Async (long? videoId, long? id);

        /// <summary>
        /// Delete a video&#39;s relationship
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The relationship id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRelationshipUsingDELETE1AsyncWithHttpInfo (long? videoId, long? id);
        /// <summary>
        /// Removes a video from the system if no resources are attached to it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVideoUsingDELETEAsync (long? id);

        /// <summary>
        /// Removes a video from the system if no resources are attached to it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVideoUsingDELETEAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Returns a page of comments for a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceCommentResource</returns>
        System.Threading.Tasks.Task<PageResourceCommentResource> GetCommentsUsingGET1Async (int? videoId, int? size = null, int? page = null);

        /// <summary>
        /// Returns a page of comments for a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceCommentResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceCommentResource>> GetCommentsUsingGET1AsyncWithHttpInfo (int? videoId, int? size = null, int? page = null);
        /// <summary>
        /// Returns a page of dispositions for a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceDispositionResource</returns>
        System.Threading.Tasks.Task<PageResourceDispositionResource> GetDispositionsUsingGET1Async (int? videoId, int? size = null, int? page = null);

        /// <summary>
        /// Returns a page of dispositions for a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceDispositionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceDispositionResource>> GetDispositionsUsingGET1AsyncWithHttpInfo (int? videoId, int? size = null, int? page = null);
        /// <summary>
        /// Returns a page of video relationships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceVideoRelationshipResource</returns>
        System.Threading.Tasks.Task<PageResourceVideoRelationshipResource> GetRelatedUsingGETAsync (long? videoId, int? size = null, int? page = null);

        /// <summary>
        /// Returns a page of video relationships
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceVideoRelationshipResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceVideoRelationshipResource>> GetRelatedUsingGETAsyncWithHttpInfo (long? videoId, int? size = null, int? page = null);
        /// <summary>
        /// Get user videos
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceVideoResource</returns>
        System.Threading.Tasks.Task<PageResourceVideoResource> GetUserVideosUsingGETAsync (int? userId, bool? excludeFlagged = null, int? size = null, int? page = null);

        /// <summary>
        /// Get user videos
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceVideoResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceVideoResource>> GetUserVideosUsingGETAsyncWithHttpInfo (int? userId, bool? excludeFlagged = null, int? size = null, int? page = null);
        /// <summary>
        /// Loads a specific video details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of VideoResource</returns>
        System.Threading.Tasks.Task<VideoResource> GetVideoUsingGETAsync (long? id);

        /// <summary>
        /// Loads a specific video details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of ApiResponse (VideoResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<VideoResource>> GetVideoUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Removes a contributor from a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The contributor id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveContributorUsingDELETEAsync (long? videoId, int? id);

        /// <summary>
        /// Removes a contributor from a video
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The contributor id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveContributorUsingDELETEAsyncWithHttpInfo (long? videoId, int? id);
        /// <summary>
        /// Removes a user from a video&#39;s whitelist
        /// </summary>
        /// <remarks>
        /// Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The user id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveWhitelistUsingDELETEAsync (long? videoId, int? id);

        /// <summary>
        /// Removes a user from a video&#39;s whitelist
        /// </summary>
        /// <remarks>
        /// Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The user id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveWhitelistUsingDELETEAsyncWithHttpInfo (long? videoId, int? id);
        /// <summary>
        /// Search videos using the documented filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="filterVideosByUploader">Filter for videos by uploader id (optional)</param>
        /// <param name="filterCategory">Filter for videos from a specific category by id (optional)</param>
        /// <param name="filterTagset">Filter for videos with specified tags (separated by comma) (optional)</param>
        /// <param name="filterVideosByName">Filter for videos which name *STARTS* with the given string (optional)</param>
        /// <param name="filterVideosByContributor">Filter for videos with contribution from the artist specified by ID (optional)</param>
        /// <param name="filterVideosByAuthor">Filter for videos with an artist as author specified by ID (optional)</param>
        /// <param name="filterHasAuthor">Filter for videos that have an author set if true, or that have no author if false (optional)</param>
        /// <param name="filterHasUploader">Filter for videos that have an uploader set if true, or that have no uploader if false (optional)</param>
        /// <param name="filterRelatedTo">Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)</param>
        /// <param name="filterFriends">Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)</param>
        /// <param name="filterDisposition">Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)</param>
        /// <returns>Task of PageResourceVideoResource</returns>
        System.Threading.Tasks.Task<PageResourceVideoResource> SearchVideosUsingGETAsync (bool? excludeFlagged = null, string filterVideosByUploader = null, string filterCategory = null, string filterTagset = null, string filterVideosByName = null, string filterVideosByContributor = null, string filterVideosByAuthor = null, bool? filterHasAuthor = null, bool? filterHasUploader = null, string filterRelatedTo = null, bool? filterFriends = null, string filterDisposition = null, int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Search videos using the documented filters
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="filterVideosByUploader">Filter for videos by uploader id (optional)</param>
        /// <param name="filterCategory">Filter for videos from a specific category by id (optional)</param>
        /// <param name="filterTagset">Filter for videos with specified tags (separated by comma) (optional)</param>
        /// <param name="filterVideosByName">Filter for videos which name *STARTS* with the given string (optional)</param>
        /// <param name="filterVideosByContributor">Filter for videos with contribution from the artist specified by ID (optional)</param>
        /// <param name="filterVideosByAuthor">Filter for videos with an artist as author specified by ID (optional)</param>
        /// <param name="filterHasAuthor">Filter for videos that have an author set if true, or that have no author if false (optional)</param>
        /// <param name="filterHasUploader">Filter for videos that have an uploader set if true, or that have no uploader if false (optional)</param>
        /// <param name="filterRelatedTo">Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)</param>
        /// <param name="filterFriends">Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)</param>
        /// <param name="filterDisposition">Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceVideoResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceVideoResource>> SearchVideosUsingGETAsyncWithHttpInfo (bool? excludeFlagged = null, string filterVideosByUploader = null, string filterCategory = null, string filterTagset = null, string filterVideosByName = null, string filterVideosByContributor = null, string filterVideosByAuthor = null, bool? filterHasAuthor = null, bool? filterHasUploader = null, string filterRelatedTo = null, bool? filterFriends = null, string filterDisposition = null, int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Update video comment content 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <param name="content">The comment content (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCommentUsingPUT1Async (long? videoId, long? id, string content = null);

        /// <summary>
        /// Update video comment content 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <param name="content">The comment content (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCommentUsingPUT1AsyncWithHttpInfo (long? videoId, long? id, string content = null);
        /// <summary>
        /// Update a video&#39;s relationship details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="relationshipId">The relationship id</param>
        /// <param name="details">The video relationship details (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRelationshipUsingPUT1Async (long? videoId, long? relationshipId, string details = null);

        /// <summary>
        /// Update a video&#39;s relationship details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="relationshipId">The relationship id</param>
        /// <param name="details">The video relationship details (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRelationshipUsingPUT1AsyncWithHttpInfo (long? videoId, long? relationshipId, string details = null);
        /// <summary>
        /// Modifies a video&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateVideoUsingPUTAsync (long? id, VideoResource videoResource = null);

        /// <summary>
        /// Modifies a video&#39;s details
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateVideoUsingPUTAsyncWithHttpInfo (long? id, VideoResource videoResource = null);
        /// <summary>
        /// Increment a video&#39;s view count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ViewVideoUsingPOSTAsync (long? id);

        /// <summary>
        /// Increment a video&#39;s view count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ViewVideoUsingPOSTAsyncWithHttpInfo (long? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaVideosApi : IMediaVideosApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaVideosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaVideosApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaVideosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MediaVideosApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a new video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id </param>
        /// <param name="commentResource">The comment object (optional)</param>
        /// <returns>CommentResource</returns>
        public CommentResource AddCommentUsingPOST1 (int? videoId, CommentResource commentResource = null)
        {
             ApiResponse<CommentResource> localVarResponse = AddCommentUsingPOST1WithHttpInfo(videoId, commentResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id </param>
        /// <param name="commentResource">The comment object (optional)</param>
        /// <returns>ApiResponse of CommentResource</returns>
        public ApiResponse< CommentResource > AddCommentUsingPOST1WithHttpInfo (int? videoId, CommentResource commentResource = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->AddCommentUsingPOST1");

            var localVarPath = "/media/videos/{video_id}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (commentResource != null && commentResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(commentResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commentResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommentUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResource)));
            
        }

        /// <summary>
        /// Add a new video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id </param>
        /// <param name="commentResource">The comment object (optional)</param>
        /// <returns>Task of CommentResource</returns>
        public async System.Threading.Tasks.Task<CommentResource> AddCommentUsingPOST1Async (int? videoId, CommentResource commentResource = null)
        {
             ApiResponse<CommentResource> localVarResponse = await AddCommentUsingPOST1AsyncWithHttpInfo(videoId, commentResource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id </param>
        /// <param name="commentResource">The comment object (optional)</param>
        /// <returns>Task of ApiResponse (CommentResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResource>> AddCommentUsingPOST1AsyncWithHttpInfo (int? videoId, CommentResource commentResource = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->AddCommentUsingPOST1");

            var localVarPath = "/media/videos/{video_id}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (commentResource != null && commentResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(commentResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commentResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCommentUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResource)));
            
        }

        /// <summary>
        /// Adds a contributor to a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="contributionResource">The contribution object (optional)</param>
        /// <returns></returns>
        public void AddContributorUsingPOST (long? videoId, ContributionResource contributionResource = null)
        {
             AddContributorUsingPOSTWithHttpInfo(videoId, contributionResource);
        }

        /// <summary>
        /// Adds a contributor to a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="contributionResource">The contribution object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddContributorUsingPOSTWithHttpInfo (long? videoId, ContributionResource contributionResource = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->AddContributorUsingPOST");

            var localVarPath = "/media/videos/{video_id}/contributors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (contributionResource != null && contributionResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contributionResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contributionResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContributorUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a contributor to a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="contributionResource">The contribution object (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddContributorUsingPOSTAsync (long? videoId, ContributionResource contributionResource = null)
        {
             await AddContributorUsingPOSTAsyncWithHttpInfo(videoId, contributionResource);

        }

        /// <summary>
        /// Adds a contributor to a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="contributionResource">The contribution object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddContributorUsingPOSTAsyncWithHttpInfo (long? videoId, ContributionResource contributionResource = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->AddContributorUsingPOST");

            var localVarPath = "/media/videos/{video_id}/contributors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (contributionResource != null && contributionResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(contributionResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contributionResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContributorUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a new Video disposition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="dispositionResource">The disposition object (optional)</param>
        /// <returns>DispositionResource</returns>
        public DispositionResource AddDispositionUsingPOST1 (int? videoId, DispositionResource dispositionResource = null)
        {
             ApiResponse<DispositionResource> localVarResponse = AddDispositionUsingPOST1WithHttpInfo(videoId, dispositionResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new Video disposition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="dispositionResource">The disposition object (optional)</param>
        /// <returns>ApiResponse of DispositionResource</returns>
        public ApiResponse< DispositionResource > AddDispositionUsingPOST1WithHttpInfo (int? videoId, DispositionResource dispositionResource = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->AddDispositionUsingPOST1");

            var localVarPath = "/media/videos/{video_id}/dispositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (dispositionResource != null && dispositionResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dispositionResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dispositionResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDispositionUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispositionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispositionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispositionResource)));
            
        }

        /// <summary>
        /// Add a new Video disposition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="dispositionResource">The disposition object (optional)</param>
        /// <returns>Task of DispositionResource</returns>
        public async System.Threading.Tasks.Task<DispositionResource> AddDispositionUsingPOST1Async (int? videoId, DispositionResource dispositionResource = null)
        {
             ApiResponse<DispositionResource> localVarResponse = await AddDispositionUsingPOST1AsyncWithHttpInfo(videoId, dispositionResource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new Video disposition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="dispositionResource">The disposition object (optional)</param>
        /// <returns>Task of ApiResponse (DispositionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DispositionResource>> AddDispositionUsingPOST1AsyncWithHttpInfo (int? videoId, DispositionResource dispositionResource = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->AddDispositionUsingPOST1");

            var localVarPath = "/media/videos/{video_id}/dispositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (dispositionResource != null && dispositionResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dispositionResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dispositionResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDispositionUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DispositionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DispositionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DispositionResource)));
            
        }

        /// <summary>
        /// Add a new flag 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="reason">The flag reason (optional)</param>
        /// <returns></returns>
        public void AddFlagUsingPOST (long? videoId, string reason = null)
        {
             AddFlagUsingPOSTWithHttpInfo(videoId, reason);
        }

        /// <summary>
        /// Add a new flag 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="reason">The flag reason (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddFlagUsingPOSTWithHttpInfo (long? videoId, string reason = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->AddFlagUsingPOST");

            var localVarPath = "/media/videos/{video_id}/moderation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (reason != null && reason.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reason); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reason; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFlagUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a new flag 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="reason">The flag reason (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddFlagUsingPOSTAsync (long? videoId, string reason = null)
        {
             await AddFlagUsingPOSTAsyncWithHttpInfo(videoId, reason);

        }

        /// <summary>
        /// Add a new flag 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="reason">The flag reason (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddFlagUsingPOSTAsyncWithHttpInfo (long? videoId, string reason = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->AddFlagUsingPOST");

            var localVarPath = "/media/videos/{video_id}/moderation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (reason != null && reason.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reason); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reason; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFlagUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds one or more existing videos as related to this one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="videoRelationshipResource">The video relationship object  (optional)</param>
        /// <returns>VideoRelationshipResource</returns>
        public VideoRelationshipResource AddRelatedUsingPOST (long? videoId, VideoRelationshipResource videoRelationshipResource = null)
        {
             ApiResponse<VideoRelationshipResource> localVarResponse = AddRelatedUsingPOSTWithHttpInfo(videoId, videoRelationshipResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds one or more existing videos as related to this one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="videoRelationshipResource">The video relationship object  (optional)</param>
        /// <returns>ApiResponse of VideoRelationshipResource</returns>
        public ApiResponse< VideoRelationshipResource > AddRelatedUsingPOSTWithHttpInfo (long? videoId, VideoRelationshipResource videoRelationshipResource = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->AddRelatedUsingPOST");

            var localVarPath = "/media/videos/{video_id}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (videoRelationshipResource != null && videoRelationshipResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoRelationshipResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoRelationshipResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRelatedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoRelationshipResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoRelationshipResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoRelationshipResource)));
            
        }

        /// <summary>
        /// Adds one or more existing videos as related to this one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="videoRelationshipResource">The video relationship object  (optional)</param>
        /// <returns>Task of VideoRelationshipResource</returns>
        public async System.Threading.Tasks.Task<VideoRelationshipResource> AddRelatedUsingPOSTAsync (long? videoId, VideoRelationshipResource videoRelationshipResource = null)
        {
             ApiResponse<VideoRelationshipResource> localVarResponse = await AddRelatedUsingPOSTAsyncWithHttpInfo(videoId, videoRelationshipResource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds one or more existing videos as related to this one 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="videoRelationshipResource">The video relationship object  (optional)</param>
        /// <returns>Task of ApiResponse (VideoRelationshipResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VideoRelationshipResource>> AddRelatedUsingPOSTAsyncWithHttpInfo (long? videoId, VideoRelationshipResource videoRelationshipResource = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->AddRelatedUsingPOST");

            var localVarPath = "/media/videos/{video_id}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (videoRelationshipResource != null && videoRelationshipResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoRelationshipResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoRelationshipResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddRelatedUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoRelationshipResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoRelationshipResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoRelationshipResource)));
            
        }

        /// <summary>
        /// Adds a new video in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>VideoResource</returns>
        public VideoResource AddVideoUsingPOST (VideoResource videoResource = null)
        {
             ApiResponse<VideoResource> localVarResponse = AddVideoUsingPOSTWithHttpInfo(videoResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new video in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>ApiResponse of VideoResource</returns>
        public ApiResponse< VideoResource > AddVideoUsingPOSTWithHttpInfo (VideoResource videoResource = null)
        {

            var localVarPath = "/media/videos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoResource != null && videoResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoResource)));
            
        }

        /// <summary>
        /// Adds a new video in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>Task of VideoResource</returns>
        public async System.Threading.Tasks.Task<VideoResource> AddVideoUsingPOSTAsync (VideoResource videoResource = null)
        {
             ApiResponse<VideoResource> localVarResponse = await AddVideoUsingPOSTAsyncWithHttpInfo(videoResource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new video in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>Task of ApiResponse (VideoResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VideoResource>> AddVideoUsingPOSTAsyncWithHttpInfo (VideoResource videoResource = null)
        {

            var localVarPath = "/media/videos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoResource != null && videoResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddVideoUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoResource)));
            
        }

        /// <summary>
        /// Adds a user to a video&#39;s whitelist Whitelisted users can view video regardless of privacy setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="userId">The user id (optional)</param>
        /// <returns></returns>
        public void AddWhitelistUsingPOST (long? id, int? userId = null)
        {
             AddWhitelistUsingPOSTWithHttpInfo(id, userId);
        }

        /// <summary>
        /// Adds a user to a video&#39;s whitelist Whitelisted users can view video regardless of privacy setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="userId">The user id (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddWhitelistUsingPOSTWithHttpInfo (long? id, int? userId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->AddWhitelistUsingPOST");

            var localVarPath = "/media/videos/{id}/whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null && userId.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userId; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWhitelistUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a user to a video&#39;s whitelist Whitelisted users can view video regardless of privacy setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="userId">The user id (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddWhitelistUsingPOSTAsync (long? id, int? userId = null)
        {
             await AddWhitelistUsingPOSTAsyncWithHttpInfo(id, userId);

        }

        /// <summary>
        /// Adds a user to a video&#39;s whitelist Whitelisted users can view video regardless of privacy setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="userId">The user id (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddWhitelistUsingPOSTAsyncWithHttpInfo (long? id, int? userId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->AddWhitelistUsingPOST");

            var localVarPath = "/media/videos/{id}/whitelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userId != null && userId.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userId); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userId; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddWhitelistUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <returns></returns>
        public void DeleteCommentUsingDELETE1 (long? videoId, long? id)
        {
             DeleteCommentUsingDELETE1WithHttpInfo(videoId, id);
        }

        /// <summary>
        /// Delete a video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCommentUsingDELETE1WithHttpInfo (long? videoId, long? id)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->DeleteCommentUsingDELETE1");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->DeleteCommentUsingDELETE1");

            var localVarPath = "/media/videos/{video_id}/comments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCommentUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCommentUsingDELETE1Async (long? videoId, long? id)
        {
             await DeleteCommentUsingDELETE1AsyncWithHttpInfo(videoId, id);

        }

        /// <summary>
        /// Delete a video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCommentUsingDELETE1AsyncWithHttpInfo (long? videoId, long? id)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->DeleteCommentUsingDELETE1");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->DeleteCommentUsingDELETE1");

            var localVarPath = "/media/videos/{video_id}/comments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCommentUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispositionId">The disposition id</param>
        /// <returns></returns>
        public void DeleteDispositionUsingDELETE1 (long? dispositionId)
        {
             DeleteDispositionUsingDELETE1WithHttpInfo(dispositionId);
        }

        /// <summary>
        /// Delete a video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispositionId">The disposition id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDispositionUsingDELETE1WithHttpInfo (long? dispositionId)
        {
            // verify the required parameter 'dispositionId' is set
            if (dispositionId == null)
                throw new ApiException(400, "Missing required parameter 'dispositionId' when calling MediaVideosApi->DeleteDispositionUsingDELETE1");

            var localVarPath = "/media/videos/{video_id}/dispositions/{disposition_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dispositionId != null) localVarPathParams.Add("disposition_id", Configuration.ApiClient.ParameterToString(dispositionId)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDispositionUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispositionId">The disposition id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDispositionUsingDELETE1Async (long? dispositionId)
        {
             await DeleteDispositionUsingDELETE1AsyncWithHttpInfo(dispositionId);

        }

        /// <summary>
        /// Delete a video comment 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dispositionId">The disposition id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDispositionUsingDELETE1AsyncWithHttpInfo (long? dispositionId)
        {
            // verify the required parameter 'dispositionId' is set
            if (dispositionId == null)
                throw new ApiException(400, "Missing required parameter 'dispositionId' when calling MediaVideosApi->DeleteDispositionUsingDELETE1");

            var localVarPath = "/media/videos/{video_id}/dispositions/{disposition_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dispositionId != null) localVarPathParams.Add("disposition_id", Configuration.ApiClient.ParameterToString(dispositionId)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDispositionUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a flag 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <returns></returns>
        public void DeleteFlagUsingDELETE (long? videoId)
        {
             DeleteFlagUsingDELETEWithHttpInfo(videoId);
        }

        /// <summary>
        /// Delete a flag 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFlagUsingDELETEWithHttpInfo (long? videoId)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->DeleteFlagUsingDELETE");

            var localVarPath = "/media/videos/{video_id}/moderation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFlagUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a flag 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFlagUsingDELETEAsync (long? videoId)
        {
             await DeleteFlagUsingDELETEAsyncWithHttpInfo(videoId);

        }

        /// <summary>
        /// Delete a flag 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFlagUsingDELETEAsyncWithHttpInfo (long? videoId)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->DeleteFlagUsingDELETE");

            var localVarPath = "/media/videos/{video_id}/moderation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFlagUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a video&#39;s relationship 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The relationship id</param>
        /// <returns></returns>
        public void DeleteRelationshipUsingDELETE1 (long? videoId, long? id)
        {
             DeleteRelationshipUsingDELETE1WithHttpInfo(videoId, id);
        }

        /// <summary>
        /// Delete a video&#39;s relationship 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The relationship id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRelationshipUsingDELETE1WithHttpInfo (long? videoId, long? id)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->DeleteRelationshipUsingDELETE1");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->DeleteRelationshipUsingDELETE1");

            var localVarPath = "/media/videos/{video_id}/related/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRelationshipUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a video&#39;s relationship 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The relationship id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRelationshipUsingDELETE1Async (long? videoId, long? id)
        {
             await DeleteRelationshipUsingDELETE1AsyncWithHttpInfo(videoId, id);

        }

        /// <summary>
        /// Delete a video&#39;s relationship 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The relationship id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRelationshipUsingDELETE1AsyncWithHttpInfo (long? videoId, long? id)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->DeleteRelationshipUsingDELETE1");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->DeleteRelationshipUsingDELETE1");

            var localVarPath = "/media/videos/{video_id}/related/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRelationshipUsingDELETE1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a video from the system if no resources are attached to it 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns></returns>
        public void DeleteVideoUsingDELETE (long? id)
        {
             DeleteVideoUsingDELETEWithHttpInfo(id);
        }

        /// <summary>
        /// Removes a video from the system if no resources are attached to it 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteVideoUsingDELETEWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->DeleteVideoUsingDELETE");

            var localVarPath = "/media/videos/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVideoUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a video from the system if no resources are attached to it 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVideoUsingDELETEAsync (long? id)
        {
             await DeleteVideoUsingDELETEAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Removes a video from the system if no resources are attached to it 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVideoUsingDELETEAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->DeleteVideoUsingDELETE");

            var localVarPath = "/media/videos/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVideoUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns a page of comments for a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceCommentResource</returns>
        public PageResourceCommentResource GetCommentsUsingGET1 (int? videoId, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceCommentResource> localVarResponse = GetCommentsUsingGET1WithHttpInfo(videoId, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a page of comments for a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceCommentResource</returns>
        public ApiResponse< PageResourceCommentResource > GetCommentsUsingGET1WithHttpInfo (int? videoId, int? size = null, int? page = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->GetCommentsUsingGET1");

            var localVarPath = "/media/videos/{video_id}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommentsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceCommentResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceCommentResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceCommentResource)));
            
        }

        /// <summary>
        /// Returns a page of comments for a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceCommentResource</returns>
        public async System.Threading.Tasks.Task<PageResourceCommentResource> GetCommentsUsingGET1Async (int? videoId, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceCommentResource> localVarResponse = await GetCommentsUsingGET1AsyncWithHttpInfo(videoId, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a page of comments for a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceCommentResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceCommentResource>> GetCommentsUsingGET1AsyncWithHttpInfo (int? videoId, int? size = null, int? page = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->GetCommentsUsingGET1");

            var localVarPath = "/media/videos/{video_id}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCommentsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceCommentResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceCommentResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceCommentResource)));
            
        }

        /// <summary>
        /// Returns a page of dispositions for a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceDispositionResource</returns>
        public PageResourceDispositionResource GetDispositionsUsingGET1 (int? videoId, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceDispositionResource> localVarResponse = GetDispositionsUsingGET1WithHttpInfo(videoId, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a page of dispositions for a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceDispositionResource</returns>
        public ApiResponse< PageResourceDispositionResource > GetDispositionsUsingGET1WithHttpInfo (int? videoId, int? size = null, int? page = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->GetDispositionsUsingGET1");

            var localVarPath = "/media/videos/{video_id}/dispositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispositionsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceDispositionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceDispositionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceDispositionResource)));
            
        }

        /// <summary>
        /// Returns a page of dispositions for a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceDispositionResource</returns>
        public async System.Threading.Tasks.Task<PageResourceDispositionResource> GetDispositionsUsingGET1Async (int? videoId, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceDispositionResource> localVarResponse = await GetDispositionsUsingGET1AsyncWithHttpInfo(videoId, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a page of dispositions for a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceDispositionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceDispositionResource>> GetDispositionsUsingGET1AsyncWithHttpInfo (int? videoId, int? size = null, int? page = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->GetDispositionsUsingGET1");

            var localVarPath = "/media/videos/{video_id}/dispositions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDispositionsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceDispositionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceDispositionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceDispositionResource)));
            
        }

        /// <summary>
        /// Returns a page of video relationships 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceVideoRelationshipResource</returns>
        public PageResourceVideoRelationshipResource GetRelatedUsingGET (long? videoId, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceVideoRelationshipResource> localVarResponse = GetRelatedUsingGETWithHttpInfo(videoId, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a page of video relationships 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceVideoRelationshipResource</returns>
        public ApiResponse< PageResourceVideoRelationshipResource > GetRelatedUsingGETWithHttpInfo (long? videoId, int? size = null, int? page = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->GetRelatedUsingGET");

            var localVarPath = "/media/videos/{video_id}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRelatedUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceVideoRelationshipResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceVideoRelationshipResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceVideoRelationshipResource)));
            
        }

        /// <summary>
        /// Returns a page of video relationships 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceVideoRelationshipResource</returns>
        public async System.Threading.Tasks.Task<PageResourceVideoRelationshipResource> GetRelatedUsingGETAsync (long? videoId, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceVideoRelationshipResource> localVarResponse = await GetRelatedUsingGETAsyncWithHttpInfo(videoId, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a page of video relationships 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceVideoRelationshipResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceVideoRelationshipResource>> GetRelatedUsingGETAsyncWithHttpInfo (long? videoId, int? size = null, int? page = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->GetRelatedUsingGET");

            var localVarPath = "/media/videos/{video_id}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRelatedUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceVideoRelationshipResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceVideoRelationshipResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceVideoRelationshipResource)));
            
        }

        /// <summary>
        /// Get user videos 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceVideoResource</returns>
        public PageResourceVideoResource GetUserVideosUsingGET (int? userId, bool? excludeFlagged = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceVideoResource> localVarResponse = GetUserVideosUsingGETWithHttpInfo(userId, excludeFlagged, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user videos 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceVideoResource</returns>
        public ApiResponse< PageResourceVideoResource > GetUserVideosUsingGETWithHttpInfo (int? userId, bool? excludeFlagged = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MediaVideosApi->GetUserVideosUsingGET");

            var localVarPath = "/users/{user_id}/videos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (excludeFlagged != null) localVarQueryParams.Add("exclude_flagged", Configuration.ApiClient.ParameterToString(excludeFlagged)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserVideosUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceVideoResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceVideoResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceVideoResource)));
            
        }

        /// <summary>
        /// Get user videos 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceVideoResource</returns>
        public async System.Threading.Tasks.Task<PageResourceVideoResource> GetUserVideosUsingGETAsync (int? userId, bool? excludeFlagged = null, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceVideoResource> localVarResponse = await GetUserVideosUsingGETAsyncWithHttpInfo(userId, excludeFlagged, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user videos 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user id</param>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceVideoResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceVideoResource>> GetUserVideosUsingGETAsyncWithHttpInfo (int? userId, bool? excludeFlagged = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling MediaVideosApi->GetUserVideosUsingGET");

            var localVarPath = "/users/{user_id}/videos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (excludeFlagged != null) localVarQueryParams.Add("exclude_flagged", Configuration.ApiClient.ParameterToString(excludeFlagged)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserVideosUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceVideoResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceVideoResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceVideoResource)));
            
        }

        /// <summary>
        /// Loads a specific video details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>VideoResource</returns>
        public VideoResource GetVideoUsingGET (long? id)
        {
             ApiResponse<VideoResource> localVarResponse = GetVideoUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Loads a specific video details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>ApiResponse of VideoResource</returns>
        public ApiResponse< VideoResource > GetVideoUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->GetVideoUsingGET");

            var localVarPath = "/media/videos/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVideoUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoResource)));
            
        }

        /// <summary>
        /// Loads a specific video details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of VideoResource</returns>
        public async System.Threading.Tasks.Task<VideoResource> GetVideoUsingGETAsync (long? id)
        {
             ApiResponse<VideoResource> localVarResponse = await GetVideoUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Loads a specific video details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of ApiResponse (VideoResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VideoResource>> GetVideoUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->GetVideoUsingGET");

            var localVarPath = "/media/videos/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVideoUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VideoResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VideoResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VideoResource)));
            
        }

        /// <summary>
        /// Removes a contributor from a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The contributor id</param>
        /// <returns></returns>
        public void RemoveContributorUsingDELETE (long? videoId, int? id)
        {
             RemoveContributorUsingDELETEWithHttpInfo(videoId, id);
        }

        /// <summary>
        /// Removes a contributor from a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The contributor id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveContributorUsingDELETEWithHttpInfo (long? videoId, int? id)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->RemoveContributorUsingDELETE");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->RemoveContributorUsingDELETE");

            var localVarPath = "/media/videos/{video_id}/contributors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveContributorUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a contributor from a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The contributor id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveContributorUsingDELETEAsync (long? videoId, int? id)
        {
             await RemoveContributorUsingDELETEAsyncWithHttpInfo(videoId, id);

        }

        /// <summary>
        /// Removes a contributor from a video 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The contributor id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveContributorUsingDELETEAsyncWithHttpInfo (long? videoId, int? id)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->RemoveContributorUsingDELETE");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->RemoveContributorUsingDELETE");

            var localVarPath = "/media/videos/{video_id}/contributors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveContributorUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a user from a video&#39;s whitelist Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The user id</param>
        /// <returns></returns>
        public void RemoveWhitelistUsingDELETE (long? videoId, int? id)
        {
             RemoveWhitelistUsingDELETEWithHttpInfo(videoId, id);
        }

        /// <summary>
        /// Removes a user from a video&#39;s whitelist Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The user id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveWhitelistUsingDELETEWithHttpInfo (long? videoId, int? id)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->RemoveWhitelistUsingDELETE");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->RemoveWhitelistUsingDELETE");

            var localVarPath = "/media/videos/{video_id}/whitelist/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWhitelistUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Removes a user from a video&#39;s whitelist Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The user id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveWhitelistUsingDELETEAsync (long? videoId, int? id)
        {
             await RemoveWhitelistUsingDELETEAsyncWithHttpInfo(videoId, id);

        }

        /// <summary>
        /// Removes a user from a video&#39;s whitelist Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The user id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveWhitelistUsingDELETEAsyncWithHttpInfo (long? videoId, int? id)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->RemoveWhitelistUsingDELETE");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->RemoveWhitelistUsingDELETE");

            var localVarPath = "/media/videos/{video_id}/whitelist/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveWhitelistUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search videos using the documented filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="filterVideosByUploader">Filter for videos by uploader id (optional)</param>
        /// <param name="filterCategory">Filter for videos from a specific category by id (optional)</param>
        /// <param name="filterTagset">Filter for videos with specified tags (separated by comma) (optional)</param>
        /// <param name="filterVideosByName">Filter for videos which name *STARTS* with the given string (optional)</param>
        /// <param name="filterVideosByContributor">Filter for videos with contribution from the artist specified by ID (optional)</param>
        /// <param name="filterVideosByAuthor">Filter for videos with an artist as author specified by ID (optional)</param>
        /// <param name="filterHasAuthor">Filter for videos that have an author set if true, or that have no author if false (optional)</param>
        /// <param name="filterHasUploader">Filter for videos that have an uploader set if true, or that have no uploader if false (optional)</param>
        /// <param name="filterRelatedTo">Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)</param>
        /// <param name="filterFriends">Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)</param>
        /// <param name="filterDisposition">Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)</param>
        /// <returns>PageResourceVideoResource</returns>
        public PageResourceVideoResource SearchVideosUsingGET (bool? excludeFlagged = null, string filterVideosByUploader = null, string filterCategory = null, string filterTagset = null, string filterVideosByName = null, string filterVideosByContributor = null, string filterVideosByAuthor = null, bool? filterHasAuthor = null, bool? filterHasUploader = null, string filterRelatedTo = null, bool? filterFriends = null, string filterDisposition = null, int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceVideoResource> localVarResponse = SearchVideosUsingGETWithHttpInfo(excludeFlagged, filterVideosByUploader, filterCategory, filterTagset, filterVideosByName, filterVideosByContributor, filterVideosByAuthor, filterHasAuthor, filterHasUploader, filterRelatedTo, filterFriends, filterDisposition, size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search videos using the documented filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="filterVideosByUploader">Filter for videos by uploader id (optional)</param>
        /// <param name="filterCategory">Filter for videos from a specific category by id (optional)</param>
        /// <param name="filterTagset">Filter for videos with specified tags (separated by comma) (optional)</param>
        /// <param name="filterVideosByName">Filter for videos which name *STARTS* with the given string (optional)</param>
        /// <param name="filterVideosByContributor">Filter for videos with contribution from the artist specified by ID (optional)</param>
        /// <param name="filterVideosByAuthor">Filter for videos with an artist as author specified by ID (optional)</param>
        /// <param name="filterHasAuthor">Filter for videos that have an author set if true, or that have no author if false (optional)</param>
        /// <param name="filterHasUploader">Filter for videos that have an uploader set if true, or that have no uploader if false (optional)</param>
        /// <param name="filterRelatedTo">Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)</param>
        /// <param name="filterFriends">Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)</param>
        /// <param name="filterDisposition">Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)</param>
        /// <returns>ApiResponse of PageResourceVideoResource</returns>
        public ApiResponse< PageResourceVideoResource > SearchVideosUsingGETWithHttpInfo (bool? excludeFlagged = null, string filterVideosByUploader = null, string filterCategory = null, string filterTagset = null, string filterVideosByName = null, string filterVideosByContributor = null, string filterVideosByAuthor = null, bool? filterHasAuthor = null, bool? filterHasUploader = null, string filterRelatedTo = null, bool? filterFriends = null, string filterDisposition = null, int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/media/videos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (excludeFlagged != null) localVarQueryParams.Add("exclude_flagged", Configuration.ApiClient.ParameterToString(excludeFlagged)); // query parameter
            if (filterVideosByUploader != null) localVarQueryParams.Add("filter_videos_by_uploader", Configuration.ApiClient.ParameterToString(filterVideosByUploader)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterVideosByName != null) localVarQueryParams.Add("filter_videos_by_name", Configuration.ApiClient.ParameterToString(filterVideosByName)); // query parameter
            if (filterVideosByContributor != null) localVarQueryParams.Add("filter_videos_by_contributor", Configuration.ApiClient.ParameterToString(filterVideosByContributor)); // query parameter
            if (filterVideosByAuthor != null) localVarQueryParams.Add("filter_videos_by_author", Configuration.ApiClient.ParameterToString(filterVideosByAuthor)); // query parameter
            if (filterHasAuthor != null) localVarQueryParams.Add("filter_has_author", Configuration.ApiClient.ParameterToString(filterHasAuthor)); // query parameter
            if (filterHasUploader != null) localVarQueryParams.Add("filter_has_uploader", Configuration.ApiClient.ParameterToString(filterHasUploader)); // query parameter
            if (filterRelatedTo != null) localVarQueryParams.Add("filter_related_to", Configuration.ApiClient.ParameterToString(filterRelatedTo)); // query parameter
            if (filterFriends != null) localVarQueryParams.Add("filter_friends", Configuration.ApiClient.ParameterToString(filterFriends)); // query parameter
            if (filterDisposition != null) localVarQueryParams.Add("filter_disposition", Configuration.ApiClient.ParameterToString(filterDisposition)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchVideosUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceVideoResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceVideoResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceVideoResource)));
            
        }

        /// <summary>
        /// Search videos using the documented filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="filterVideosByUploader">Filter for videos by uploader id (optional)</param>
        /// <param name="filterCategory">Filter for videos from a specific category by id (optional)</param>
        /// <param name="filterTagset">Filter for videos with specified tags (separated by comma) (optional)</param>
        /// <param name="filterVideosByName">Filter for videos which name *STARTS* with the given string (optional)</param>
        /// <param name="filterVideosByContributor">Filter for videos with contribution from the artist specified by ID (optional)</param>
        /// <param name="filterVideosByAuthor">Filter for videos with an artist as author specified by ID (optional)</param>
        /// <param name="filterHasAuthor">Filter for videos that have an author set if true, or that have no author if false (optional)</param>
        /// <param name="filterHasUploader">Filter for videos that have an uploader set if true, or that have no uploader if false (optional)</param>
        /// <param name="filterRelatedTo">Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)</param>
        /// <param name="filterFriends">Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)</param>
        /// <param name="filterDisposition">Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)</param>
        /// <returns>Task of PageResourceVideoResource</returns>
        public async System.Threading.Tasks.Task<PageResourceVideoResource> SearchVideosUsingGETAsync (bool? excludeFlagged = null, string filterVideosByUploader = null, string filterCategory = null, string filterTagset = null, string filterVideosByName = null, string filterVideosByContributor = null, string filterVideosByAuthor = null, bool? filterHasAuthor = null, bool? filterHasUploader = null, string filterRelatedTo = null, bool? filterFriends = null, string filterDisposition = null, int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceVideoResource> localVarResponse = await SearchVideosUsingGETAsyncWithHttpInfo(excludeFlagged, filterVideosByUploader, filterCategory, filterTagset, filterVideosByName, filterVideosByContributor, filterVideosByAuthor, filterHasAuthor, filterHasUploader, filterRelatedTo, filterFriends, filterDisposition, size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search videos using the documented filters 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="excludeFlagged">Skip videos that have been flagged by the current user (optional, default to true)</param>
        /// <param name="filterVideosByUploader">Filter for videos by uploader id (optional)</param>
        /// <param name="filterCategory">Filter for videos from a specific category by id (optional)</param>
        /// <param name="filterTagset">Filter for videos with specified tags (separated by comma) (optional)</param>
        /// <param name="filterVideosByName">Filter for videos which name *STARTS* with the given string (optional)</param>
        /// <param name="filterVideosByContributor">Filter for videos with contribution from the artist specified by ID (optional)</param>
        /// <param name="filterVideosByAuthor">Filter for videos with an artist as author specified by ID (optional)</param>
        /// <param name="filterHasAuthor">Filter for videos that have an author set if true, or that have no author if false (optional)</param>
        /// <param name="filterHasUploader">Filter for videos that have an uploader set if true, or that have no uploader if false (optional)</param>
        /// <param name="filterRelatedTo">Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)</param>
        /// <param name="filterFriends">Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)</param>
        /// <param name="filterDisposition">Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceVideoResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceVideoResource>> SearchVideosUsingGETAsyncWithHttpInfo (bool? excludeFlagged = null, string filterVideosByUploader = null, string filterCategory = null, string filterTagset = null, string filterVideosByName = null, string filterVideosByContributor = null, string filterVideosByAuthor = null, bool? filterHasAuthor = null, bool? filterHasUploader = null, string filterRelatedTo = null, bool? filterFriends = null, string filterDisposition = null, int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/media/videos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (excludeFlagged != null) localVarQueryParams.Add("exclude_flagged", Configuration.ApiClient.ParameterToString(excludeFlagged)); // query parameter
            if (filterVideosByUploader != null) localVarQueryParams.Add("filter_videos_by_uploader", Configuration.ApiClient.ParameterToString(filterVideosByUploader)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterVideosByName != null) localVarQueryParams.Add("filter_videos_by_name", Configuration.ApiClient.ParameterToString(filterVideosByName)); // query parameter
            if (filterVideosByContributor != null) localVarQueryParams.Add("filter_videos_by_contributor", Configuration.ApiClient.ParameterToString(filterVideosByContributor)); // query parameter
            if (filterVideosByAuthor != null) localVarQueryParams.Add("filter_videos_by_author", Configuration.ApiClient.ParameterToString(filterVideosByAuthor)); // query parameter
            if (filterHasAuthor != null) localVarQueryParams.Add("filter_has_author", Configuration.ApiClient.ParameterToString(filterHasAuthor)); // query parameter
            if (filterHasUploader != null) localVarQueryParams.Add("filter_has_uploader", Configuration.ApiClient.ParameterToString(filterHasUploader)); // query parameter
            if (filterRelatedTo != null) localVarQueryParams.Add("filter_related_to", Configuration.ApiClient.ParameterToString(filterRelatedTo)); // query parameter
            if (filterFriends != null) localVarQueryParams.Add("filter_friends", Configuration.ApiClient.ParameterToString(filterFriends)); // query parameter
            if (filterDisposition != null) localVarQueryParams.Add("filter_disposition", Configuration.ApiClient.ParameterToString(filterDisposition)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchVideosUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceVideoResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceVideoResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceVideoResource)));
            
        }

        /// <summary>
        /// Update video comment content  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <param name="content">The comment content (optional)</param>
        /// <returns></returns>
        public void UpdateCommentUsingPUT1 (long? videoId, long? id, string content = null)
        {
             UpdateCommentUsingPUT1WithHttpInfo(videoId, id, content);
        }

        /// <summary>
        /// Update video comment content  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <param name="content">The comment content (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCommentUsingPUT1WithHttpInfo (long? videoId, long? id, string content = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->UpdateCommentUsingPUT1");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->UpdateCommentUsingPUT1");

            var localVarPath = "/media/videos/{video_id}/comments/{id}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCommentUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update video comment content  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <param name="content">The comment content (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCommentUsingPUT1Async (long? videoId, long? id, string content = null)
        {
             await UpdateCommentUsingPUT1AsyncWithHttpInfo(videoId, id, content);

        }

        /// <summary>
        /// Update video comment content  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="id">The comment id</param>
        /// <param name="content">The comment content (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCommentUsingPUT1AsyncWithHttpInfo (long? videoId, long? id, string content = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->UpdateCommentUsingPUT1");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->UpdateCommentUsingPUT1");

            var localVarPath = "/media/videos/{video_id}/comments/{id}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (content != null && content.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(content); // http body (model) parameter
            }
            else
            {
                localVarPostBody = content; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCommentUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a video&#39;s relationship details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="relationshipId">The relationship id</param>
        /// <param name="details">The video relationship details (optional)</param>
        /// <returns></returns>
        public void UpdateRelationshipUsingPUT1 (long? videoId, long? relationshipId, string details = null)
        {
             UpdateRelationshipUsingPUT1WithHttpInfo(videoId, relationshipId, details);
        }

        /// <summary>
        /// Update a video&#39;s relationship details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="relationshipId">The relationship id</param>
        /// <param name="details">The video relationship details (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRelationshipUsingPUT1WithHttpInfo (long? videoId, long? relationshipId, string details = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->UpdateRelationshipUsingPUT1");
            // verify the required parameter 'relationshipId' is set
            if (relationshipId == null)
                throw new ApiException(400, "Missing required parameter 'relationshipId' when calling MediaVideosApi->UpdateRelationshipUsingPUT1");

            var localVarPath = "/media/videos/{video_id}/related/{id}/relationship_details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (relationshipId != null) localVarPathParams.Add("relationship_id", Configuration.ApiClient.ParameterToString(relationshipId)); // path parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRelationshipUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a video&#39;s relationship details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="relationshipId">The relationship id</param>
        /// <param name="details">The video relationship details (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRelationshipUsingPUT1Async (long? videoId, long? relationshipId, string details = null)
        {
             await UpdateRelationshipUsingPUT1AsyncWithHttpInfo(videoId, relationshipId, details);

        }

        /// <summary>
        /// Update a video&#39;s relationship details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="videoId">The video id</param>
        /// <param name="relationshipId">The relationship id</param>
        /// <param name="details">The video relationship details (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRelationshipUsingPUT1AsyncWithHttpInfo (long? videoId, long? relationshipId, string details = null)
        {
            // verify the required parameter 'videoId' is set
            if (videoId == null)
                throw new ApiException(400, "Missing required parameter 'videoId' when calling MediaVideosApi->UpdateRelationshipUsingPUT1");
            // verify the required parameter 'relationshipId' is set
            if (relationshipId == null)
                throw new ApiException(400, "Missing required parameter 'relationshipId' when calling MediaVideosApi->UpdateRelationshipUsingPUT1");

            var localVarPath = "/media/videos/{video_id}/related/{id}/relationship_details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (videoId != null) localVarPathParams.Add("video_id", Configuration.ApiClient.ParameterToString(videoId)); // path parameter
            if (relationshipId != null) localVarPathParams.Add("relationship_id", Configuration.ApiClient.ParameterToString(relationshipId)); // path parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRelationshipUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Modifies a video&#39;s details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns></returns>
        public void UpdateVideoUsingPUT (long? id, VideoResource videoResource = null)
        {
             UpdateVideoUsingPUTWithHttpInfo(id, videoResource);
        }

        /// <summary>
        /// Modifies a video&#39;s details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateVideoUsingPUTWithHttpInfo (long? id, VideoResource videoResource = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->UpdateVideoUsingPUT");

            var localVarPath = "/media/videos/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (videoResource != null && videoResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVideoUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Modifies a video&#39;s details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateVideoUsingPUTAsync (long? id, VideoResource videoResource = null)
        {
             await UpdateVideoUsingPUTAsyncWithHttpInfo(id, videoResource);

        }

        /// <summary>
        /// Modifies a video&#39;s details 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <param name="videoResource">The video object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateVideoUsingPUTAsyncWithHttpInfo (long? id, VideoResource videoResource = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->UpdateVideoUsingPUT");

            var localVarPath = "/media/videos/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (videoResource != null && videoResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(videoResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = videoResource; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVideoUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Increment a video&#39;s view count 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns></returns>
        public void ViewVideoUsingPOST (long? id)
        {
             ViewVideoUsingPOSTWithHttpInfo(id);
        }

        /// <summary>
        /// Increment a video&#39;s view count 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ViewVideoUsingPOSTWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->ViewVideoUsingPOST");

            var localVarPath = "/media/videos/{id}/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewVideoUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Increment a video&#39;s view count 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ViewVideoUsingPOSTAsync (long? id)
        {
             await ViewVideoUsingPOSTAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Increment a video&#39;s view count 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The video id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ViewVideoUsingPOSTAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaVideosApi->ViewVideoUsingPOST");

            var localVarPath = "/media/videos/{id}/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ViewVideoUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
