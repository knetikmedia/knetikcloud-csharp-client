/* 
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersInventoryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds an item to the user inventory
        /// </summary>
        /// <remarks>
        /// The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="userInventoryAddRequest">The user inventory add request object (optional)</param>
        /// <returns>InvoiceResource</returns>
        InvoiceResource AddItemUsingPOST1 (int? id, UserInventoryAddRequest userInventoryAddRequest = null);

        /// <summary>
        /// Adds an item to the user inventory
        /// </summary>
        /// <remarks>
        /// The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="userInventoryAddRequest">The user inventory add request object (optional)</param>
        /// <returns>ApiResponse of InvoiceResource</returns>
        ApiResponse<InvoiceResource> AddItemUsingPOST1WithHttpInfo (int? id, UserInventoryAddRequest userInventoryAddRequest = null);
        /// <summary>
        /// Create an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>EntitlementItem</returns>
        EntitlementItem CreateItemUsingPOST (EntitlementItem entitlementItem = null);

        /// <summary>
        /// Create an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>ApiResponse of EntitlementItem</returns>
        ApiResponse<EntitlementItem> CreateItemUsingPOSTWithHttpInfo (EntitlementItem entitlementItem = null);
        /// <summary>
        /// Create an entitlement template
        /// </summary>
        /// <remarks>
        /// Entitlement templates define a type of entitlement and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The entitlement template to be created (optional)</param>
        /// <returns>ItemTemplateResource</returns>
        ItemTemplateResource CreateTemplateUsingPOST3 (ItemTemplateResource template = null);

        /// <summary>
        /// Create an entitlement template
        /// </summary>
        /// <remarks>
        /// Entitlement templates define a type of entitlement and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The entitlement template to be created (optional)</param>
        /// <returns>ApiResponse of ItemTemplateResource</returns>
        ApiResponse<ItemTemplateResource> CreateTemplateUsingPOST3WithHttpInfo (ItemTemplateResource template = null);
        /// <summary>
        /// Delete an entitlement template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns></returns>
        void DeleteEntitlementTemplateUsingDELETE (string id, string cascade = null);

        /// <summary>
        /// Delete an entitlement template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEntitlementTemplateUsingDELETEWithHttpInfo (string id, string cascade = null);
        /// <summary>
        /// Delete an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns></returns>
        void DeleteItemUsingDELETE (int? entitlementId);

        /// <summary>
        /// Delete an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteItemUsingDELETEWithHttpInfo (int? entitlementId);
        /// <summary>
        /// Check for access to an item without consuming
        /// </summary>
        /// <remarks>
        /// Useful for pre-check and accounts for all various buisness rules
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <returns></returns>
        void EntitlementCheckUsingGET (string userId, int? itemId, string sku = null);

        /// <summary>
        /// Check for access to an item without consuming
        /// </summary>
        /// <remarks>
        /// Useful for pre-check and accounts for all various buisness rules
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EntitlementCheckUsingGETWithHttpInfo (string userId, int? itemId, string sku = null);
        /// <summary>
        /// Use an item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <param name="info">Any additional info to add to the log about this use (optional)</param>
        /// <returns></returns>
        void EntitlementUseUsingPOST (string userId, int? itemId, string sku = null, string info = null);

        /// <summary>
        /// Use an item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <param name="info">Any additional info to add to the log about this use (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EntitlementUseUsingPOSTWithHttpInfo (string userId, int? itemId, string sku = null, string info = null);
        /// <summary>
        /// List and search entitlement items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceEntitlementItem</returns>
        PageResourceEntitlementItem GetCurrenciesUsingGET1 (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search entitlement items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceEntitlementItem</returns>
        ApiResponse<PageResourceEntitlementItem> GetCurrenciesUsingGET1WithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get a single entitlement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>ItemTemplateResource</returns>
        ItemTemplateResource GetEntitlementTemplateUsingGET (string id);

        /// <summary>
        /// Get a single entitlement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>ApiResponse of ItemTemplateResource</returns>
        ApiResponse<ItemTemplateResource> GetEntitlementTemplateUsingGETWithHttpInfo (string id);
        /// <summary>
        /// List and search entitlement templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceItemTemplateResource</returns>
        PageResourceItemTemplateResource GetEntitlementTemplatesUsingGET (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search entitlement templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceItemTemplateResource</returns>
        ApiResponse<PageResourceItemTemplateResource> GetEntitlementTemplatesUsingGETWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// List the user inventory entries for all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterUsername">Filter by entries owned by the user with the specified username (optional)</param>
        /// <param name="filterGroup">Filter by entries owned by the users in a given group, by unique name (optional)</param>
        /// <param name="filterDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)</param>
        /// <returns>PageResourceUserInventoryResource</returns>
        PageResourceUserInventoryResource GetInventoryListUsingGET (bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, string filterUsername = null, string filterGroup = null, string filterDate = null);

        /// <summary>
        /// List the user inventory entries for all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterUsername">Filter by entries owned by the user with the specified username (optional)</param>
        /// <param name="filterGroup">Filter by entries owned by the users in a given group, by unique name (optional)</param>
        /// <param name="filterDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)</param>
        /// <returns>ApiResponse of PageResourceUserInventoryResource</returns>
        ApiResponse<PageResourceUserInventoryResource> GetInventoryListUsingGETWithHttpInfo (bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, string filterUsername = null, string filterGroup = null, string filterDate = null);
        /// <summary>
        /// Get an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <returns>UserInventoryResource</returns>
        UserInventoryResource GetInventoryUsingGET (int? userId, int? id);

        /// <summary>
        /// Get an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <returns>ApiResponse of UserInventoryResource</returns>
        ApiResponse<UserInventoryResource> GetInventoryUsingGETWithHttpInfo (int? userId, int? id);
        /// <summary>
        /// Get a single entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>EntitlementItem</returns>
        EntitlementItem GetItemUsingGET (int? entitlementId);

        /// <summary>
        /// Get a single entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>ApiResponse of EntitlementItem</returns>
        ApiResponse<EntitlementItem> GetItemUsingGETWithHttpInfo (int? entitlementId);
        /// <summary>
        /// List the user inventory entries for a given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterMinDate">Filter for inventory added after the specified date, unix timestamp in seconds (optional)</param>
        /// <param name="filterMaxDate">Filter for inventory added before the specified date, unix timestamp in seconds (optional)</param>
        /// <returns>PageResourceUserInventoryResource</returns>
        PageResourceUserInventoryResource GetUserInventoryListUsingGET (int? id, bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, long? filterMinDate = null, long? filterMaxDate = null);

        /// <summary>
        /// List the user inventory entries for a given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterMinDate">Filter for inventory added after the specified date, unix timestamp in seconds (optional)</param>
        /// <param name="filterMaxDate">Filter for inventory added before the specified date, unix timestamp in seconds (optional)</param>
        /// <returns>ApiResponse of PageResourceUserInventoryResource</returns>
        ApiResponse<PageResourceUserInventoryResource> GetUserInventoryListUsingGETWithHttpInfo (int? id, bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, long? filterMinDate = null, long? filterMaxDate = null);
        /// <summary>
        /// List the log entries for this inventory entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUserItemLogResource</returns>
        PageResourceUserItemLogResource GetUserInventoryLogUsingGET (string userId, int? id, int? size = null, int? page = null);

        /// <summary>
        /// List the log entries for this inventory entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUserItemLogResource</returns>
        ApiResponse<PageResourceUserItemLogResource> GetUserInventoryLogUsingGETWithHttpInfo (string userId, int? id, int? size = null, int? page = null);
        /// <summary>
        /// Update an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns></returns>
        void UpdateItemUsingPUT1 (int? entitlementId, EntitlementItem entitlementItem = null);

        /// <summary>
        /// Update an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateItemUsingPUT1WithHttpInfo (int? entitlementId, EntitlementItem entitlementItem = null);
        /// <summary>
        /// Update an entitlement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns></returns>
        void UpdateTemplateUsingPUT3 (string id, ItemTemplateResource template = null);

        /// <summary>
        /// Update an entitlement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTemplateUsingPUT3WithHttpInfo (string id, ItemTemplateResource template = null);
        /// <summary>
        /// Set the behavior data for an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="data">The data map (optional)</param>
        /// <returns></returns>
        void UpdateUserInventoryBehaviorDataUsingPUT (int? userId, int? id, Object data = null);

        /// <summary>
        /// Set the behavior data for an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="data">The data map (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserInventoryBehaviorDataUsingPUTWithHttpInfo (int? userId, int? id, Object data = null);
        /// <summary>
        /// Set the expiration date
        /// </summary>
        /// <remarks>
        /// Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="timestamp">The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)</param>
        /// <returns></returns>
        void UpdateUserInventoryExpiresUsingPUT (int? userId, int? id, long? timestamp = null);

        /// <summary>
        /// Set the expiration date
        /// </summary>
        /// <remarks>
        /// Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="timestamp">The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserInventoryExpiresUsingPUTWithHttpInfo (int? userId, int? id, long? timestamp = null);
        /// <summary>
        /// Set the status for an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="inventoryStatus">The inventory status object (optional)</param>
        /// <returns></returns>
        void UpdateUserInventoryStatusUsingPUT (int? userId, int? id, string inventoryStatus = null);

        /// <summary>
        /// Set the status for an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="inventoryStatus">The inventory status object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateUserInventoryStatusUsingPUTWithHttpInfo (int? userId, int? id, string inventoryStatus = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds an item to the user inventory
        /// </summary>
        /// <remarks>
        /// The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="userInventoryAddRequest">The user inventory add request object (optional)</param>
        /// <returns>Task of InvoiceResource</returns>
        System.Threading.Tasks.Task<InvoiceResource> AddItemUsingPOST1Async (int? id, UserInventoryAddRequest userInventoryAddRequest = null);

        /// <summary>
        /// Adds an item to the user inventory
        /// </summary>
        /// <remarks>
        /// The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="userInventoryAddRequest">The user inventory add request object (optional)</param>
        /// <returns>Task of ApiResponse (InvoiceResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<InvoiceResource>> AddItemUsingPOST1AsyncWithHttpInfo (int? id, UserInventoryAddRequest userInventoryAddRequest = null);
        /// <summary>
        /// Create an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>Task of EntitlementItem</returns>
        System.Threading.Tasks.Task<EntitlementItem> CreateItemUsingPOSTAsync (EntitlementItem entitlementItem = null);

        /// <summary>
        /// Create an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>Task of ApiResponse (EntitlementItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitlementItem>> CreateItemUsingPOSTAsyncWithHttpInfo (EntitlementItem entitlementItem = null);
        /// <summary>
        /// Create an entitlement template
        /// </summary>
        /// <remarks>
        /// Entitlement templates define a type of entitlement and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The entitlement template to be created (optional)</param>
        /// <returns>Task of ItemTemplateResource</returns>
        System.Threading.Tasks.Task<ItemTemplateResource> CreateTemplateUsingPOST3Async (ItemTemplateResource template = null);

        /// <summary>
        /// Create an entitlement template
        /// </summary>
        /// <remarks>
        /// Entitlement templates define a type of entitlement and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The entitlement template to be created (optional)</param>
        /// <returns>Task of ApiResponse (ItemTemplateResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemTemplateResource>> CreateTemplateUsingPOST3AsyncWithHttpInfo (ItemTemplateResource template = null);
        /// <summary>
        /// Delete an entitlement template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEntitlementTemplateUsingDELETEAsync (string id, string cascade = null);

        /// <summary>
        /// Delete an entitlement template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEntitlementTemplateUsingDELETEAsyncWithHttpInfo (string id, string cascade = null);
        /// <summary>
        /// Delete an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteItemUsingDELETEAsync (int? entitlementId);

        /// <summary>
        /// Delete an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemUsingDELETEAsyncWithHttpInfo (int? entitlementId);
        /// <summary>
        /// Check for access to an item without consuming
        /// </summary>
        /// <remarks>
        /// Useful for pre-check and accounts for all various buisness rules
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EntitlementCheckUsingGETAsync (string userId, int? itemId, string sku = null);

        /// <summary>
        /// Check for access to an item without consuming
        /// </summary>
        /// <remarks>
        /// Useful for pre-check and accounts for all various buisness rules
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EntitlementCheckUsingGETAsyncWithHttpInfo (string userId, int? itemId, string sku = null);
        /// <summary>
        /// Use an item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <param name="info">Any additional info to add to the log about this use (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EntitlementUseUsingPOSTAsync (string userId, int? itemId, string sku = null, string info = null);

        /// <summary>
        /// Use an item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <param name="info">Any additional info to add to the log about this use (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EntitlementUseUsingPOSTAsyncWithHttpInfo (string userId, int? itemId, string sku = null, string info = null);
        /// <summary>
        /// List and search entitlement items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceEntitlementItem</returns>
        System.Threading.Tasks.Task<PageResourceEntitlementItem> GetCurrenciesUsingGET1Async (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search entitlement items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceEntitlementItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceEntitlementItem>> GetCurrenciesUsingGET1AsyncWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get a single entitlement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of ItemTemplateResource</returns>
        System.Threading.Tasks.Task<ItemTemplateResource> GetEntitlementTemplateUsingGETAsync (string id);

        /// <summary>
        /// Get a single entitlement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of ApiResponse (ItemTemplateResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ItemTemplateResource>> GetEntitlementTemplateUsingGETAsyncWithHttpInfo (string id);
        /// <summary>
        /// List and search entitlement templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceItemTemplateResource</returns>
        System.Threading.Tasks.Task<PageResourceItemTemplateResource> GetEntitlementTemplatesUsingGETAsync (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search entitlement templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceItemTemplateResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceItemTemplateResource>> GetEntitlementTemplatesUsingGETAsyncWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// List the user inventory entries for all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterUsername">Filter by entries owned by the user with the specified username (optional)</param>
        /// <param name="filterGroup">Filter by entries owned by the users in a given group, by unique name (optional)</param>
        /// <param name="filterDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)</param>
        /// <returns>Task of PageResourceUserInventoryResource</returns>
        System.Threading.Tasks.Task<PageResourceUserInventoryResource> GetInventoryListUsingGETAsync (bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, string filterUsername = null, string filterGroup = null, string filterDate = null);

        /// <summary>
        /// List the user inventory entries for all users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterUsername">Filter by entries owned by the user with the specified username (optional)</param>
        /// <param name="filterGroup">Filter by entries owned by the users in a given group, by unique name (optional)</param>
        /// <param name="filterDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)</param>
        /// <returns>Task of ApiResponse (PageResourceUserInventoryResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceUserInventoryResource>> GetInventoryListUsingGETAsyncWithHttpInfo (bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, string filterUsername = null, string filterGroup = null, string filterDate = null);
        /// <summary>
        /// Get an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <returns>Task of UserInventoryResource</returns>
        System.Threading.Tasks.Task<UserInventoryResource> GetInventoryUsingGETAsync (int? userId, int? id);

        /// <summary>
        /// Get an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <returns>Task of ApiResponse (UserInventoryResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserInventoryResource>> GetInventoryUsingGETAsyncWithHttpInfo (int? userId, int? id);
        /// <summary>
        /// Get a single entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>Task of EntitlementItem</returns>
        System.Threading.Tasks.Task<EntitlementItem> GetItemUsingGETAsync (int? entitlementId);

        /// <summary>
        /// Get a single entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>Task of ApiResponse (EntitlementItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntitlementItem>> GetItemUsingGETAsyncWithHttpInfo (int? entitlementId);
        /// <summary>
        /// List the user inventory entries for a given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterMinDate">Filter for inventory added after the specified date, unix timestamp in seconds (optional)</param>
        /// <param name="filterMaxDate">Filter for inventory added before the specified date, unix timestamp in seconds (optional)</param>
        /// <returns>Task of PageResourceUserInventoryResource</returns>
        System.Threading.Tasks.Task<PageResourceUserInventoryResource> GetUserInventoryListUsingGETAsync (int? id, bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, long? filterMinDate = null, long? filterMaxDate = null);

        /// <summary>
        /// List the user inventory entries for a given user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterMinDate">Filter for inventory added after the specified date, unix timestamp in seconds (optional)</param>
        /// <param name="filterMaxDate">Filter for inventory added before the specified date, unix timestamp in seconds (optional)</param>
        /// <returns>Task of ApiResponse (PageResourceUserInventoryResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceUserInventoryResource>> GetUserInventoryListUsingGETAsyncWithHttpInfo (int? id, bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, long? filterMinDate = null, long? filterMaxDate = null);
        /// <summary>
        /// List the log entries for this inventory entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUserItemLogResource</returns>
        System.Threading.Tasks.Task<PageResourceUserItemLogResource> GetUserInventoryLogUsingGETAsync (string userId, int? id, int? size = null, int? page = null);

        /// <summary>
        /// List the log entries for this inventory entry.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUserItemLogResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceUserItemLogResource>> GetUserInventoryLogUsingGETAsyncWithHttpInfo (string userId, int? id, int? size = null, int? page = null);
        /// <summary>
        /// Update an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateItemUsingPUT1Async (int? entitlementId, EntitlementItem entitlementItem = null);

        /// <summary>
        /// Update an entitlement item
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemUsingPUT1AsyncWithHttpInfo (int? entitlementId, EntitlementItem entitlementItem = null);
        /// <summary>
        /// Update an entitlement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTemplateUsingPUT3Async (string id, ItemTemplateResource template = null);

        /// <summary>
        /// Update an entitlement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTemplateUsingPUT3AsyncWithHttpInfo (string id, ItemTemplateResource template = null);
        /// <summary>
        /// Set the behavior data for an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="data">The data map (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserInventoryBehaviorDataUsingPUTAsync (int? userId, int? id, Object data = null);

        /// <summary>
        /// Set the behavior data for an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="data">The data map (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserInventoryBehaviorDataUsingPUTAsyncWithHttpInfo (int? userId, int? id, Object data = null);
        /// <summary>
        /// Set the expiration date
        /// </summary>
        /// <remarks>
        /// Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="timestamp">The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserInventoryExpiresUsingPUTAsync (int? userId, int? id, long? timestamp = null);

        /// <summary>
        /// Set the expiration date
        /// </summary>
        /// <remarks>
        /// Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="timestamp">The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserInventoryExpiresUsingPUTAsyncWithHttpInfo (int? userId, int? id, long? timestamp = null);
        /// <summary>
        /// Set the status for an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="inventoryStatus">The inventory status object (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateUserInventoryStatusUsingPUTAsync (int? userId, int? id, string inventoryStatus = null);

        /// <summary>
        /// Set the status for an inventory entry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="inventoryStatus">The inventory status object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserInventoryStatusUsingPUTAsyncWithHttpInfo (int? userId, int? id, string inventoryStatus = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersInventoryApi : IUsersInventoryApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersInventoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersInventoryApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersInventoryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersInventoryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds an item to the user inventory The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="userInventoryAddRequest">The user inventory add request object (optional)</param>
        /// <returns>InvoiceResource</returns>
        public InvoiceResource AddItemUsingPOST1 (int? id, UserInventoryAddRequest userInventoryAddRequest = null)
        {
             ApiResponse<InvoiceResource> localVarResponse = AddItemUsingPOST1WithHttpInfo(id, userInventoryAddRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds an item to the user inventory The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="userInventoryAddRequest">The user inventory add request object (optional)</param>
        /// <returns>ApiResponse of InvoiceResource</returns>
        public ApiResponse< InvoiceResource > AddItemUsingPOST1WithHttpInfo (int? id, UserInventoryAddRequest userInventoryAddRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->AddItemUsingPOST1");

            var localVarPath = "/users/{id}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userInventoryAddRequest != null && userInventoryAddRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userInventoryAddRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInventoryAddRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoiceResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceResource)));
            
        }

        /// <summary>
        /// Adds an item to the user inventory The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="userInventoryAddRequest">The user inventory add request object (optional)</param>
        /// <returns>Task of InvoiceResource</returns>
        public async System.Threading.Tasks.Task<InvoiceResource> AddItemUsingPOST1Async (int? id, UserInventoryAddRequest userInventoryAddRequest = null)
        {
             ApiResponse<InvoiceResource> localVarResponse = await AddItemUsingPOST1AsyncWithHttpInfo(id, userInventoryAddRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds an item to the user inventory The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="userInventoryAddRequest">The user inventory add request object (optional)</param>
        /// <returns>Task of ApiResponse (InvoiceResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InvoiceResource>> AddItemUsingPOST1AsyncWithHttpInfo (int? id, UserInventoryAddRequest userInventoryAddRequest = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->AddItemUsingPOST1");

            var localVarPath = "/users/{id}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userInventoryAddRequest != null && userInventoryAddRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userInventoryAddRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userInventoryAddRequest; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddItemUsingPOST1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InvoiceResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InvoiceResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InvoiceResource)));
            
        }

        /// <summary>
        /// Create an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>EntitlementItem</returns>
        public EntitlementItem CreateItemUsingPOST (EntitlementItem entitlementItem = null)
        {
             ApiResponse<EntitlementItem> localVarResponse = CreateItemUsingPOSTWithHttpInfo(entitlementItem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>ApiResponse of EntitlementItem</returns>
        public ApiResponse< EntitlementItem > CreateItemUsingPOSTWithHttpInfo (EntitlementItem entitlementItem = null)
        {

            var localVarPath = "/entitlements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (entitlementItem != null && entitlementItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entitlementItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entitlementItem; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateItemUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitlementItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementItem)));
            
        }

        /// <summary>
        /// Create an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>Task of EntitlementItem</returns>
        public async System.Threading.Tasks.Task<EntitlementItem> CreateItemUsingPOSTAsync (EntitlementItem entitlementItem = null)
        {
             ApiResponse<EntitlementItem> localVarResponse = await CreateItemUsingPOSTAsyncWithHttpInfo(entitlementItem);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>Task of ApiResponse (EntitlementItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntitlementItem>> CreateItemUsingPOSTAsyncWithHttpInfo (EntitlementItem entitlementItem = null)
        {

            var localVarPath = "/entitlements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (entitlementItem != null && entitlementItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entitlementItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entitlementItem; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateItemUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitlementItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementItem)));
            
        }

        /// <summary>
        /// Create an entitlement template Entitlement templates define a type of entitlement and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The entitlement template to be created (optional)</param>
        /// <returns>ItemTemplateResource</returns>
        public ItemTemplateResource CreateTemplateUsingPOST3 (ItemTemplateResource template = null)
        {
             ApiResponse<ItemTemplateResource> localVarResponse = CreateTemplateUsingPOST3WithHttpInfo(template);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an entitlement template Entitlement templates define a type of entitlement and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The entitlement template to be created (optional)</param>
        /// <returns>ApiResponse of ItemTemplateResource</returns>
        public ApiResponse< ItemTemplateResource > CreateTemplateUsingPOST3WithHttpInfo (ItemTemplateResource template = null)
        {

            var localVarPath = "/entitlements/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateUsingPOST3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemTemplateResource)));
            
        }

        /// <summary>
        /// Create an entitlement template Entitlement templates define a type of entitlement and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The entitlement template to be created (optional)</param>
        /// <returns>Task of ItemTemplateResource</returns>
        public async System.Threading.Tasks.Task<ItemTemplateResource> CreateTemplateUsingPOST3Async (ItemTemplateResource template = null)
        {
             ApiResponse<ItemTemplateResource> localVarResponse = await CreateTemplateUsingPOST3AsyncWithHttpInfo(template);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an entitlement template Entitlement templates define a type of entitlement and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The entitlement template to be created (optional)</param>
        /// <returns>Task of ApiResponse (ItemTemplateResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemTemplateResource>> CreateTemplateUsingPOST3AsyncWithHttpInfo (ItemTemplateResource template = null)
        {

            var localVarPath = "/entitlements/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateUsingPOST3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemTemplateResource)));
            
        }

        /// <summary>
        /// Delete an entitlement template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns></returns>
        public void DeleteEntitlementTemplateUsingDELETE (string id, string cascade = null)
        {
             DeleteEntitlementTemplateUsingDELETEWithHttpInfo(id, cascade);
        }

        /// <summary>
        /// Delete an entitlement template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteEntitlementTemplateUsingDELETEWithHttpInfo (string id, string cascade = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->DeleteEntitlementTemplateUsingDELETE");

            var localVarPath = "/entitlements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cascade != null) localVarQueryParams.Add("cascade", Configuration.ApiClient.ParameterToString(cascade)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEntitlementTemplateUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an entitlement template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEntitlementTemplateUsingDELETEAsync (string id, string cascade = null)
        {
             await DeleteEntitlementTemplateUsingDELETEAsyncWithHttpInfo(id, cascade);

        }

        /// <summary>
        /// Delete an entitlement template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEntitlementTemplateUsingDELETEAsyncWithHttpInfo (string id, string cascade = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->DeleteEntitlementTemplateUsingDELETE");

            var localVarPath = "/entitlements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cascade != null) localVarQueryParams.Add("cascade", Configuration.ApiClient.ParameterToString(cascade)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteEntitlementTemplateUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns></returns>
        public void DeleteItemUsingDELETE (int? entitlementId)
        {
             DeleteItemUsingDELETEWithHttpInfo(entitlementId);
        }

        /// <summary>
        /// Delete an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteItemUsingDELETEWithHttpInfo (int? entitlementId)
        {
            // verify the required parameter 'entitlementId' is set
            if (entitlementId == null)
                throw new ApiException(400, "Missing required parameter 'entitlementId' when calling UsersInventoryApi->DeleteItemUsingDELETE");

            var localVarPath = "/entitlements/{entitlement_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (entitlementId != null) localVarPathParams.Add("entitlement_id", Configuration.ApiClient.ParameterToString(entitlementId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteItemUsingDELETEAsync (int? entitlementId)
        {
             await DeleteItemUsingDELETEAsyncWithHttpInfo(entitlementId);

        }

        /// <summary>
        /// Delete an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteItemUsingDELETEAsyncWithHttpInfo (int? entitlementId)
        {
            // verify the required parameter 'entitlementId' is set
            if (entitlementId == null)
                throw new ApiException(400, "Missing required parameter 'entitlementId' when calling UsersInventoryApi->DeleteItemUsingDELETE");

            var localVarPath = "/entitlements/{entitlement_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (entitlementId != null) localVarPathParams.Add("entitlement_id", Configuration.ApiClient.ParameterToString(entitlementId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteItemUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check for access to an item without consuming Useful for pre-check and accounts for all various buisness rules
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <returns></returns>
        public void EntitlementCheckUsingGET (string userId, int? itemId, string sku = null)
        {
             EntitlementCheckUsingGETWithHttpInfo(userId, itemId, sku);
        }

        /// <summary>
        /// Check for access to an item without consuming Useful for pre-check and accounts for all various buisness rules
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EntitlementCheckUsingGETWithHttpInfo (string userId, int? itemId, string sku = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->EntitlementCheckUsingGET");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling UsersInventoryApi->EntitlementCheckUsingGET");

            var localVarPath = "/users/{user_id}/entitlements/{item_id}/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (sku != null) localVarQueryParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntitlementCheckUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Check for access to an item without consuming Useful for pre-check and accounts for all various buisness rules
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EntitlementCheckUsingGETAsync (string userId, int? itemId, string sku = null)
        {
             await EntitlementCheckUsingGETAsyncWithHttpInfo(userId, itemId, sku);

        }

        /// <summary>
        /// Check for access to an item without consuming Useful for pre-check and accounts for all various buisness rules
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EntitlementCheckUsingGETAsyncWithHttpInfo (string userId, int? itemId, string sku = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->EntitlementCheckUsingGET");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling UsersInventoryApi->EntitlementCheckUsingGET");

            var localVarPath = "/users/{user_id}/entitlements/{item_id}/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (sku != null) localVarQueryParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntitlementCheckUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Use an item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <param name="info">Any additional info to add to the log about this use (optional)</param>
        /// <returns></returns>
        public void EntitlementUseUsingPOST (string userId, int? itemId, string sku = null, string info = null)
        {
             EntitlementUseUsingPOSTWithHttpInfo(userId, itemId, sku, info);
        }

        /// <summary>
        /// Use an item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <param name="info">Any additional info to add to the log about this use (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EntitlementUseUsingPOSTWithHttpInfo (string userId, int? itemId, string sku = null, string info = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->EntitlementUseUsingPOST");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling UsersInventoryApi->EntitlementUseUsingPOST");

            var localVarPath = "/users/{user_id}/entitlements/{item_id}/use";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (sku != null) localVarQueryParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // query parameter
            if (info != null) localVarQueryParams.Add("info", Configuration.ApiClient.ParameterToString(info)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntitlementUseUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Use an item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <param name="info">Any additional info to add to the log about this use (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EntitlementUseUsingPOSTAsync (string userId, int? itemId, string sku = null, string info = null)
        {
             await EntitlementUseUsingPOSTAsyncWithHttpInfo(userId, itemId, sku, info);

        }

        /// <summary>
        /// Use an item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user to check for or &#39;me&#39; for logged in user</param>
        /// <param name="itemId">The id of the item</param>
        /// <param name="sku">The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)</param>
        /// <param name="info">Any additional info to add to the log about this use (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EntitlementUseUsingPOSTAsyncWithHttpInfo (string userId, int? itemId, string sku = null, string info = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->EntitlementUseUsingPOST");
            // verify the required parameter 'itemId' is set
            if (itemId == null)
                throw new ApiException(400, "Missing required parameter 'itemId' when calling UsersInventoryApi->EntitlementUseUsingPOST");

            var localVarPath = "/users/{user_id}/entitlements/{item_id}/use";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (itemId != null) localVarPathParams.Add("item_id", Configuration.ApiClient.ParameterToString(itemId)); // path parameter
            if (sku != null) localVarQueryParams.Add("sku", Configuration.ApiClient.ParameterToString(sku)); // query parameter
            if (info != null) localVarQueryParams.Add("info", Configuration.ApiClient.ParameterToString(info)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EntitlementUseUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List and search entitlement items 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceEntitlementItem</returns>
        public PageResourceEntitlementItem GetCurrenciesUsingGET1 (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceEntitlementItem> localVarResponse = GetCurrenciesUsingGET1WithHttpInfo(size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List and search entitlement items 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceEntitlementItem</returns>
        public ApiResponse< PageResourceEntitlementItem > GetCurrenciesUsingGET1WithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/entitlements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrenciesUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceEntitlementItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceEntitlementItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceEntitlementItem)));
            
        }

        /// <summary>
        /// List and search entitlement items 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceEntitlementItem</returns>
        public async System.Threading.Tasks.Task<PageResourceEntitlementItem> GetCurrenciesUsingGET1Async (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceEntitlementItem> localVarResponse = await GetCurrenciesUsingGET1AsyncWithHttpInfo(size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List and search entitlement items 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceEntitlementItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceEntitlementItem>> GetCurrenciesUsingGET1AsyncWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/entitlements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrenciesUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceEntitlementItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceEntitlementItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceEntitlementItem)));
            
        }

        /// <summary>
        /// Get a single entitlement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>ItemTemplateResource</returns>
        public ItemTemplateResource GetEntitlementTemplateUsingGET (string id)
        {
             ApiResponse<ItemTemplateResource> localVarResponse = GetEntitlementTemplateUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single entitlement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>ApiResponse of ItemTemplateResource</returns>
        public ApiResponse< ItemTemplateResource > GetEntitlementTemplateUsingGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->GetEntitlementTemplateUsingGET");

            var localVarPath = "/entitlements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntitlementTemplateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemTemplateResource)));
            
        }

        /// <summary>
        /// Get a single entitlement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of ItemTemplateResource</returns>
        public async System.Threading.Tasks.Task<ItemTemplateResource> GetEntitlementTemplateUsingGETAsync (string id)
        {
             ApiResponse<ItemTemplateResource> localVarResponse = await GetEntitlementTemplateUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single entitlement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of ApiResponse (ItemTemplateResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ItemTemplateResource>> GetEntitlementTemplateUsingGETAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->GetEntitlementTemplateUsingGET");

            var localVarPath = "/entitlements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntitlementTemplateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ItemTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ItemTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ItemTemplateResource)));
            
        }

        /// <summary>
        /// List and search entitlement templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceItemTemplateResource</returns>
        public PageResourceItemTemplateResource GetEntitlementTemplatesUsingGET (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceItemTemplateResource> localVarResponse = GetEntitlementTemplatesUsingGETWithHttpInfo(size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List and search entitlement templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceItemTemplateResource</returns>
        public ApiResponse< PageResourceItemTemplateResource > GetEntitlementTemplatesUsingGETWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/entitlements/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntitlementTemplatesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceItemTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceItemTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceItemTemplateResource)));
            
        }

        /// <summary>
        /// List and search entitlement templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceItemTemplateResource</returns>
        public async System.Threading.Tasks.Task<PageResourceItemTemplateResource> GetEntitlementTemplatesUsingGETAsync (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceItemTemplateResource> localVarResponse = await GetEntitlementTemplatesUsingGETAsyncWithHttpInfo(size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List and search entitlement templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceItemTemplateResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceItemTemplateResource>> GetEntitlementTemplatesUsingGETAsyncWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/entitlements/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntitlementTemplatesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceItemTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceItemTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceItemTemplateResource)));
            
        }

        /// <summary>
        /// List the user inventory entries for all users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterUsername">Filter by entries owned by the user with the specified username (optional)</param>
        /// <param name="filterGroup">Filter by entries owned by the users in a given group, by unique name (optional)</param>
        /// <param name="filterDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)</param>
        /// <returns>PageResourceUserInventoryResource</returns>
        public PageResourceUserInventoryResource GetInventoryListUsingGET (bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, string filterUsername = null, string filterGroup = null, string filterDate = null)
        {
             ApiResponse<PageResourceUserInventoryResource> localVarResponse = GetInventoryListUsingGETWithHttpInfo(inactive, size, page, filterItemName, filterUsername, filterGroup, filterDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the user inventory entries for all users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterUsername">Filter by entries owned by the user with the specified username (optional)</param>
        /// <param name="filterGroup">Filter by entries owned by the users in a given group, by unique name (optional)</param>
        /// <param name="filterDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)</param>
        /// <returns>ApiResponse of PageResourceUserInventoryResource</returns>
        public ApiResponse< PageResourceUserInventoryResource > GetInventoryListUsingGETWithHttpInfo (bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, string filterUsername = null, string filterGroup = null, string filterDate = null)
        {

            var localVarPath = "/inventories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inactive != null) localVarQueryParams.Add("inactive", Configuration.ApiClient.ParameterToString(inactive)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (filterItemName != null) localVarQueryParams.Add("filter_item_name", Configuration.ApiClient.ParameterToString(filterItemName)); // query parameter
            if (filterUsername != null) localVarQueryParams.Add("filter_username", Configuration.ApiClient.ParameterToString(filterUsername)); // query parameter
            if (filterGroup != null) localVarQueryParams.Add("filter_group", Configuration.ApiClient.ParameterToString(filterGroup)); // query parameter
            if (filterDate != null) localVarQueryParams.Add("filter_date", Configuration.ApiClient.ParameterToString(filterDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventoryListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUserInventoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUserInventoryResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUserInventoryResource)));
            
        }

        /// <summary>
        /// List the user inventory entries for all users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterUsername">Filter by entries owned by the user with the specified username (optional)</param>
        /// <param name="filterGroup">Filter by entries owned by the users in a given group, by unique name (optional)</param>
        /// <param name="filterDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)</param>
        /// <returns>Task of PageResourceUserInventoryResource</returns>
        public async System.Threading.Tasks.Task<PageResourceUserInventoryResource> GetInventoryListUsingGETAsync (bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, string filterUsername = null, string filterGroup = null, string filterDate = null)
        {
             ApiResponse<PageResourceUserInventoryResource> localVarResponse = await GetInventoryListUsingGETAsyncWithHttpInfo(inactive, size, page, filterItemName, filterUsername, filterGroup, filterDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the user inventory entries for all users 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterUsername">Filter by entries owned by the user with the specified username (optional)</param>
        /// <param name="filterGroup">Filter by entries owned by the users in a given group, by unique name (optional)</param>
        /// <param name="filterDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)</param>
        /// <returns>Task of ApiResponse (PageResourceUserInventoryResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceUserInventoryResource>> GetInventoryListUsingGETAsyncWithHttpInfo (bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, string filterUsername = null, string filterGroup = null, string filterDate = null)
        {

            var localVarPath = "/inventories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (inactive != null) localVarQueryParams.Add("inactive", Configuration.ApiClient.ParameterToString(inactive)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (filterItemName != null) localVarQueryParams.Add("filter_item_name", Configuration.ApiClient.ParameterToString(filterItemName)); // query parameter
            if (filterUsername != null) localVarQueryParams.Add("filter_username", Configuration.ApiClient.ParameterToString(filterUsername)); // query parameter
            if (filterGroup != null) localVarQueryParams.Add("filter_group", Configuration.ApiClient.ParameterToString(filterGroup)); // query parameter
            if (filterDate != null) localVarQueryParams.Add("filter_date", Configuration.ApiClient.ParameterToString(filterDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventoryListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUserInventoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUserInventoryResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUserInventoryResource)));
            
        }

        /// <summary>
        /// Get an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <returns>UserInventoryResource</returns>
        public UserInventoryResource GetInventoryUsingGET (int? userId, int? id)
        {
             ApiResponse<UserInventoryResource> localVarResponse = GetInventoryUsingGETWithHttpInfo(userId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <returns>ApiResponse of UserInventoryResource</returns>
        public ApiResponse< UserInventoryResource > GetInventoryUsingGETWithHttpInfo (int? userId, int? id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->GetInventoryUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->GetInventoryUsingGET");

            var localVarPath = "/users/{user_id}/inventory/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventoryUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInventoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInventoryResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInventoryResource)));
            
        }

        /// <summary>
        /// Get an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <returns>Task of UserInventoryResource</returns>
        public async System.Threading.Tasks.Task<UserInventoryResource> GetInventoryUsingGETAsync (int? userId, int? id)
        {
             ApiResponse<UserInventoryResource> localVarResponse = await GetInventoryUsingGETAsyncWithHttpInfo(userId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <returns>Task of ApiResponse (UserInventoryResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserInventoryResource>> GetInventoryUsingGETAsyncWithHttpInfo (int? userId, int? id)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->GetInventoryUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->GetInventoryUsingGET");

            var localVarPath = "/users/{user_id}/inventory/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInventoryUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserInventoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserInventoryResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserInventoryResource)));
            
        }

        /// <summary>
        /// Get a single entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>EntitlementItem</returns>
        public EntitlementItem GetItemUsingGET (int? entitlementId)
        {
             ApiResponse<EntitlementItem> localVarResponse = GetItemUsingGETWithHttpInfo(entitlementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>ApiResponse of EntitlementItem</returns>
        public ApiResponse< EntitlementItem > GetItemUsingGETWithHttpInfo (int? entitlementId)
        {
            // verify the required parameter 'entitlementId' is set
            if (entitlementId == null)
                throw new ApiException(400, "Missing required parameter 'entitlementId' when calling UsersInventoryApi->GetItemUsingGET");

            var localVarPath = "/entitlements/{entitlement_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (entitlementId != null) localVarPathParams.Add("entitlement_id", Configuration.ApiClient.ParameterToString(entitlementId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitlementItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementItem)));
            
        }

        /// <summary>
        /// Get a single entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>Task of EntitlementItem</returns>
        public async System.Threading.Tasks.Task<EntitlementItem> GetItemUsingGETAsync (int? entitlementId)
        {
             ApiResponse<EntitlementItem> localVarResponse = await GetItemUsingGETAsyncWithHttpInfo(entitlementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <returns>Task of ApiResponse (EntitlementItem)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntitlementItem>> GetItemUsingGETAsyncWithHttpInfo (int? entitlementId)
        {
            // verify the required parameter 'entitlementId' is set
            if (entitlementId == null)
                throw new ApiException(400, "Missing required parameter 'entitlementId' when calling UsersInventoryApi->GetItemUsingGET");

            var localVarPath = "/entitlements/{entitlement_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (entitlementId != null) localVarPathParams.Add("entitlement_id", Configuration.ApiClient.ParameterToString(entitlementId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetItemUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntitlementItem>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntitlementItem) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntitlementItem)));
            
        }

        /// <summary>
        /// List the user inventory entries for a given user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterMinDate">Filter for inventory added after the specified date, unix timestamp in seconds (optional)</param>
        /// <param name="filterMaxDate">Filter for inventory added before the specified date, unix timestamp in seconds (optional)</param>
        /// <returns>PageResourceUserInventoryResource</returns>
        public PageResourceUserInventoryResource GetUserInventoryListUsingGET (int? id, bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, long? filterMinDate = null, long? filterMaxDate = null)
        {
             ApiResponse<PageResourceUserInventoryResource> localVarResponse = GetUserInventoryListUsingGETWithHttpInfo(id, inactive, size, page, filterItemName, filterMinDate, filterMaxDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the user inventory entries for a given user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterMinDate">Filter for inventory added after the specified date, unix timestamp in seconds (optional)</param>
        /// <param name="filterMaxDate">Filter for inventory added before the specified date, unix timestamp in seconds (optional)</param>
        /// <returns>ApiResponse of PageResourceUserInventoryResource</returns>
        public ApiResponse< PageResourceUserInventoryResource > GetUserInventoryListUsingGETWithHttpInfo (int? id, bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, long? filterMinDate = null, long? filterMaxDate = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->GetUserInventoryListUsingGET");

            var localVarPath = "/users/{id}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (inactive != null) localVarQueryParams.Add("inactive", Configuration.ApiClient.ParameterToString(inactive)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (filterItemName != null) localVarQueryParams.Add("filter_item_name", Configuration.ApiClient.ParameterToString(filterItemName)); // query parameter
            if (filterMinDate != null) localVarQueryParams.Add("filter_min_date", Configuration.ApiClient.ParameterToString(filterMinDate)); // query parameter
            if (filterMaxDate != null) localVarQueryParams.Add("filter_max_date", Configuration.ApiClient.ParameterToString(filterMaxDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInventoryListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUserInventoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUserInventoryResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUserInventoryResource)));
            
        }

        /// <summary>
        /// List the user inventory entries for a given user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterMinDate">Filter for inventory added after the specified date, unix timestamp in seconds (optional)</param>
        /// <param name="filterMaxDate">Filter for inventory added before the specified date, unix timestamp in seconds (optional)</param>
        /// <returns>Task of PageResourceUserInventoryResource</returns>
        public async System.Threading.Tasks.Task<PageResourceUserInventoryResource> GetUserInventoryListUsingGETAsync (int? id, bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, long? filterMinDate = null, long? filterMaxDate = null)
        {
             ApiResponse<PageResourceUserInventoryResource> localVarResponse = await GetUserInventoryListUsingGETAsyncWithHttpInfo(id, inactive, size, page, filterItemName, filterMinDate, filterMaxDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the user inventory entries for a given user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the user</param>
        /// <param name="inactive">If true, accepts inactive user inventories (optional, default to false)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="filterItemName">Filter by items whose name starts with a string (optional)</param>
        /// <param name="filterMinDate">Filter for inventory added after the specified date, unix timestamp in seconds (optional)</param>
        /// <param name="filterMaxDate">Filter for inventory added before the specified date, unix timestamp in seconds (optional)</param>
        /// <returns>Task of ApiResponse (PageResourceUserInventoryResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceUserInventoryResource>> GetUserInventoryListUsingGETAsyncWithHttpInfo (int? id, bool? inactive = null, int? size = null, int? page = null, string filterItemName = null, long? filterMinDate = null, long? filterMaxDate = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->GetUserInventoryListUsingGET");

            var localVarPath = "/users/{id}/inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (inactive != null) localVarQueryParams.Add("inactive", Configuration.ApiClient.ParameterToString(inactive)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (filterItemName != null) localVarQueryParams.Add("filter_item_name", Configuration.ApiClient.ParameterToString(filterItemName)); // query parameter
            if (filterMinDate != null) localVarQueryParams.Add("filter_min_date", Configuration.ApiClient.ParameterToString(filterMinDate)); // query parameter
            if (filterMaxDate != null) localVarQueryParams.Add("filter_max_date", Configuration.ApiClient.ParameterToString(filterMaxDate)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInventoryListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUserInventoryResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUserInventoryResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUserInventoryResource)));
            
        }

        /// <summary>
        /// List the log entries for this inventory entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageResourceUserItemLogResource</returns>
        public PageResourceUserItemLogResource GetUserInventoryLogUsingGET (string userId, int? id, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUserItemLogResource> localVarResponse = GetUserInventoryLogUsingGETWithHttpInfo(userId, id, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the log entries for this inventory entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageResourceUserItemLogResource</returns>
        public ApiResponse< PageResourceUserItemLogResource > GetUserInventoryLogUsingGETWithHttpInfo (string userId, int? id, int? size = null, int? page = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->GetUserInventoryLogUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->GetUserInventoryLogUsingGET");

            var localVarPath = "/users/{user_id}/inventory/{id}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInventoryLogUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUserItemLogResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUserItemLogResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUserItemLogResource)));
            
        }

        /// <summary>
        /// List the log entries for this inventory entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageResourceUserItemLogResource</returns>
        public async System.Threading.Tasks.Task<PageResourceUserItemLogResource> GetUserInventoryLogUsingGETAsync (string userId, int? id, int? size = null, int? page = null)
        {
             ApiResponse<PageResourceUserItemLogResource> localVarResponse = await GetUserInventoryLogUsingGETAsyncWithHttpInfo(userId, id, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the log entries for this inventory entry. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the inventory owner or &#39;me&#39; for the logged in user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageResourceUserItemLogResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceUserItemLogResource>> GetUserInventoryLogUsingGETAsyncWithHttpInfo (string userId, int? id, int? size = null, int? page = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->GetUserInventoryLogUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->GetUserInventoryLogUsingGET");

            var localVarPath = "/users/{user_id}/inventory/{id}/log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInventoryLogUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceUserItemLogResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceUserItemLogResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceUserItemLogResource)));
            
        }

        /// <summary>
        /// Update an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns></returns>
        public void UpdateItemUsingPUT1 (int? entitlementId, EntitlementItem entitlementItem = null)
        {
             UpdateItemUsingPUT1WithHttpInfo(entitlementId, entitlementItem);
        }

        /// <summary>
        /// Update an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateItemUsingPUT1WithHttpInfo (int? entitlementId, EntitlementItem entitlementItem = null)
        {
            // verify the required parameter 'entitlementId' is set
            if (entitlementId == null)
                throw new ApiException(400, "Missing required parameter 'entitlementId' when calling UsersInventoryApi->UpdateItemUsingPUT1");

            var localVarPath = "/entitlements/{entitlement_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (entitlementId != null) localVarPathParams.Add("entitlement_id", Configuration.ApiClient.ParameterToString(entitlementId)); // path parameter
            if (entitlementItem != null && entitlementItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entitlementItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entitlementItem; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateItemUsingPUT1Async (int? entitlementId, EntitlementItem entitlementItem = null)
        {
             await UpdateItemUsingPUT1AsyncWithHttpInfo(entitlementId, entitlementItem);

        }

        /// <summary>
        /// Update an entitlement item 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entitlementId">The id of the entitlement</param>
        /// <param name="entitlementItem">The entitlement item object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateItemUsingPUT1AsyncWithHttpInfo (int? entitlementId, EntitlementItem entitlementItem = null)
        {
            // verify the required parameter 'entitlementId' is set
            if (entitlementId == null)
                throw new ApiException(400, "Missing required parameter 'entitlementId' when calling UsersInventoryApi->UpdateItemUsingPUT1");

            var localVarPath = "/entitlements/{entitlement_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (entitlementId != null) localVarPathParams.Add("entitlement_id", Configuration.ApiClient.ParameterToString(entitlementId)); // path parameter
            if (entitlementItem != null && entitlementItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(entitlementItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entitlementItem; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateItemUsingPUT1", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an entitlement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns></returns>
        public void UpdateTemplateUsingPUT3 (string id, ItemTemplateResource template = null)
        {
             UpdateTemplateUsingPUT3WithHttpInfo(id, template);
        }

        /// <summary>
        /// Update an entitlement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTemplateUsingPUT3WithHttpInfo (string id, ItemTemplateResource template = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->UpdateTemplateUsingPUT3");

            var localVarPath = "/entitlements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateUsingPUT3", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an entitlement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTemplateUsingPUT3Async (string id, ItemTemplateResource template = null)
        {
             await UpdateTemplateUsingPUT3AsyncWithHttpInfo(id, template);

        }

        /// <summary>
        /// Update an entitlement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTemplateUsingPUT3AsyncWithHttpInfo (string id, ItemTemplateResource template = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->UpdateTemplateUsingPUT3");

            var localVarPath = "/entitlements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateUsingPUT3", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the behavior data for an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="data">The data map (optional)</param>
        /// <returns></returns>
        public void UpdateUserInventoryBehaviorDataUsingPUT (int? userId, int? id, Object data = null)
        {
             UpdateUserInventoryBehaviorDataUsingPUTWithHttpInfo(userId, id, data);
        }

        /// <summary>
        /// Set the behavior data for an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="data">The data map (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateUserInventoryBehaviorDataUsingPUTWithHttpInfo (int? userId, int? id, Object data = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->UpdateUserInventoryBehaviorDataUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->UpdateUserInventoryBehaviorDataUsingPUT");

            var localVarPath = "/users/{user_id}/inventory/{id}/behavior-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserInventoryBehaviorDataUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the behavior data for an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="data">The data map (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserInventoryBehaviorDataUsingPUTAsync (int? userId, int? id, Object data = null)
        {
             await UpdateUserInventoryBehaviorDataUsingPUTAsyncWithHttpInfo(userId, id, data);

        }

        /// <summary>
        /// Set the behavior data for an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="data">The data map (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserInventoryBehaviorDataUsingPUTAsyncWithHttpInfo (int? userId, int? id, Object data = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->UpdateUserInventoryBehaviorDataUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->UpdateUserInventoryBehaviorDataUsingPUT");

            var localVarPath = "/users/{user_id}/inventory/{id}/behavior-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserInventoryBehaviorDataUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the expiration date Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="timestamp">The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)</param>
        /// <returns></returns>
        public void UpdateUserInventoryExpiresUsingPUT (int? userId, int? id, long? timestamp = null)
        {
             UpdateUserInventoryExpiresUsingPUTWithHttpInfo(userId, id, timestamp);
        }

        /// <summary>
        /// Set the expiration date Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="timestamp">The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateUserInventoryExpiresUsingPUTWithHttpInfo (int? userId, int? id, long? timestamp = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->UpdateUserInventoryExpiresUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->UpdateUserInventoryExpiresUsingPUT");

            var localVarPath = "/users/{user_id}/inventory/{id}/expires";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (timestamp != null && timestamp.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(timestamp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = timestamp; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserInventoryExpiresUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the expiration date Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="timestamp">The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserInventoryExpiresUsingPUTAsync (int? userId, int? id, long? timestamp = null)
        {
             await UpdateUserInventoryExpiresUsingPUTAsyncWithHttpInfo(userId, id, timestamp);

        }

        /// <summary>
        /// Set the expiration date Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="timestamp">The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserInventoryExpiresUsingPUTAsyncWithHttpInfo (int? userId, int? id, long? timestamp = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->UpdateUserInventoryExpiresUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->UpdateUserInventoryExpiresUsingPUT");

            var localVarPath = "/users/{user_id}/inventory/{id}/expires";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (timestamp != null && timestamp.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(timestamp); // http body (model) parameter
            }
            else
            {
                localVarPostBody = timestamp; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserInventoryExpiresUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the status for an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="inventoryStatus">The inventory status object (optional)</param>
        /// <returns></returns>
        public void UpdateUserInventoryStatusUsingPUT (int? userId, int? id, string inventoryStatus = null)
        {
             UpdateUserInventoryStatusUsingPUTWithHttpInfo(userId, id, inventoryStatus);
        }

        /// <summary>
        /// Set the status for an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="inventoryStatus">The inventory status object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateUserInventoryStatusUsingPUTWithHttpInfo (int? userId, int? id, string inventoryStatus = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->UpdateUserInventoryStatusUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->UpdateUserInventoryStatusUsingPUT");

            var localVarPath = "/users/{user_id}/inventory/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (inventoryStatus != null && inventoryStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inventoryStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inventoryStatus; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserInventoryStatusUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set the status for an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="inventoryStatus">The inventory status object (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateUserInventoryStatusUsingPUTAsync (int? userId, int? id, string inventoryStatus = null)
        {
             await UpdateUserInventoryStatusUsingPUTAsyncWithHttpInfo(userId, id, inventoryStatus);

        }

        /// <summary>
        /// Set the status for an inventory entry 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The id of the user</param>
        /// <param name="id">The id of the user inventory</param>
        /// <param name="inventoryStatus">The inventory status object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateUserInventoryStatusUsingPUTAsyncWithHttpInfo (int? userId, int? id, string inventoryStatus = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersInventoryApi->UpdateUserInventoryStatusUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersInventoryApi->UpdateUserInventoryStatusUsingPUT");

            var localVarPath = "/users/{user_id}/inventory/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (inventoryStatus != null && inventoryStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(inventoryStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inventoryStatus; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserInventoryStatusUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
