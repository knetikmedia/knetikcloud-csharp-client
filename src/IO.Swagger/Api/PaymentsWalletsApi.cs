/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsWalletsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves a summation of wallet balances by currency code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PageResourceWalletTotalResponse</returns>
        PageResourceWalletTotalResponse GetWalletTotalsUsingGET ();

        /// <summary>
        /// Retrieves a summation of wallet balances by currency code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PageResourceWalletTotalResponse</returns>
        ApiResponse<PageResourceWalletTotalResponse> GetWalletTotalsUsingGETWithHttpInfo ();
        /// <summary>
        /// Returns the user&#39;s wallet for the given currency code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <returns>SimpleWallet</returns>
        SimpleWallet GetWalletUsingGET (int? userId, string currencyCode);

        /// <summary>
        /// Returns the user&#39;s wallet for the given currency code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <returns>ApiResponse of SimpleWallet</returns>
        ApiResponse<SimpleWallet> GetWalletUsingGETWithHttpInfo (int? userId, string currencyCode);
        /// <summary>
        /// List all of a user&#39;s wallets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallets are being retrieved</param>
        /// <returns>List&lt;SimpleWallet&gt;</returns>
        List<SimpleWallet> GetWalletsUsingGET (int? userId);

        /// <summary>
        /// List all of a user&#39;s wallets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallets are being retrieved</param>
        /// <returns>ApiResponse of List&lt;SimpleWallet&gt;</returns>
        ApiResponse<List<SimpleWallet>> GetWalletsUsingGETWithHttpInfo (int? userId);
        /// <summary>
        /// Retrieve a list of wallets across the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceSimpleWallet</returns>
        PageResourceSimpleWallet GetWalletsUsingGET1 (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Retrieve a list of wallets across the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceSimpleWallet</returns>
        ApiResponse<PageResourceSimpleWallet> GetWalletsUsingGET1WithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Retrieve wallet transactions across the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterInvoice">Filter for transactions from a specific invoice (optional)</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign (optional)</param>
        /// <param name="filterUserId">Filter for transactions for specific userId (optional)</param>
        /// <param name="filterUsername">Filter for transactions for specific username that start with the given string (optional)</param>
        /// <param name="filterDetails">Filter for transactions for specific details that start with the given string (optional)</param>
        /// <param name="filterCurrencyCode">Filter for transactions for specific currency code (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceWalletTransactionResource</returns>
        PageResourceWalletTransactionResource TransactionHistoryUsingGET (int? filterInvoice = null, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? filterUserId = null, string filterUsername = null, string filterDetails = null, string filterCurrencyCode = null, int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Retrieve wallet transactions across the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterInvoice">Filter for transactions from a specific invoice (optional)</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign (optional)</param>
        /// <param name="filterUserId">Filter for transactions for specific userId (optional)</param>
        /// <param name="filterUsername">Filter for transactions for specific username that start with the given string (optional)</param>
        /// <param name="filterDetails">Filter for transactions for specific details that start with the given string (optional)</param>
        /// <param name="filterCurrencyCode">Filter for transactions for specific currency code (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceWalletTransactionResource</returns>
        ApiResponse<PageResourceWalletTransactionResource> TransactionHistoryUsingGETWithHttpInfo (int? filterInvoice = null, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? filterUserId = null, string filterUsername = null, string filterDetails = null, string filterCurrencyCode = null, int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Updates the balance for a user&#39;s wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being modified</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="request">The requested balance modification to be made to the user&#39;s wallet (optional)</param>
        /// <returns>WalletTransactionResource</returns>
        WalletTransactionResource UpdateBalanceUsingPUT (int? userId, string currencyCode, WalletAlterRequest request = null);

        /// <summary>
        /// Updates the balance for a user&#39;s wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being modified</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="request">The requested balance modification to be made to the user&#39;s wallet (optional)</param>
        /// <returns>ApiResponse of WalletTransactionResource</returns>
        ApiResponse<WalletTransactionResource> UpdateBalanceUsingPUTWithHttpInfo (int? userId, string currencyCode, WalletAlterRequest request = null);
        /// <summary>
        /// Retrieve a user&#39;s wallet transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet transactions are being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceWalletTransactionResource</returns>
        PageResourceWalletTransactionResource UserTransactionHistoryUsingGET (int? userId, string currencyCode, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Retrieve a user&#39;s wallet transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet transactions are being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceWalletTransactionResource</returns>
        ApiResponse<PageResourceWalletTransactionResource> UserTransactionHistoryUsingGETWithHttpInfo (int? userId, string currencyCode, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? size = null, int? page = null, string order = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves a summation of wallet balances by currency code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PageResourceWalletTotalResponse</returns>
        System.Threading.Tasks.Task<PageResourceWalletTotalResponse> GetWalletTotalsUsingGETAsync ();

        /// <summary>
        /// Retrieves a summation of wallet balances by currency code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PageResourceWalletTotalResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceWalletTotalResponse>> GetWalletTotalsUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Returns the user&#39;s wallet for the given currency code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <returns>Task of SimpleWallet</returns>
        System.Threading.Tasks.Task<SimpleWallet> GetWalletUsingGETAsync (int? userId, string currencyCode);

        /// <summary>
        /// Returns the user&#39;s wallet for the given currency code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <returns>Task of ApiResponse (SimpleWallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleWallet>> GetWalletUsingGETAsyncWithHttpInfo (int? userId, string currencyCode);
        /// <summary>
        /// List all of a user&#39;s wallets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallets are being retrieved</param>
        /// <returns>Task of List&lt;SimpleWallet&gt;</returns>
        System.Threading.Tasks.Task<List<SimpleWallet>> GetWalletsUsingGETAsync (int? userId);

        /// <summary>
        /// List all of a user&#39;s wallets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallets are being retrieved</param>
        /// <returns>Task of ApiResponse (List&lt;SimpleWallet&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SimpleWallet>>> GetWalletsUsingGETAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// Retrieve a list of wallets across the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceSimpleWallet</returns>
        System.Threading.Tasks.Task<PageResourceSimpleWallet> GetWalletsUsingGET1Async (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Retrieve a list of wallets across the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceSimpleWallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceSimpleWallet>> GetWalletsUsingGET1AsyncWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Retrieve wallet transactions across the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterInvoice">Filter for transactions from a specific invoice (optional)</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign (optional)</param>
        /// <param name="filterUserId">Filter for transactions for specific userId (optional)</param>
        /// <param name="filterUsername">Filter for transactions for specific username that start with the given string (optional)</param>
        /// <param name="filterDetails">Filter for transactions for specific details that start with the given string (optional)</param>
        /// <param name="filterCurrencyCode">Filter for transactions for specific currency code (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceWalletTransactionResource</returns>
        System.Threading.Tasks.Task<PageResourceWalletTransactionResource> TransactionHistoryUsingGETAsync (int? filterInvoice = null, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? filterUserId = null, string filterUsername = null, string filterDetails = null, string filterCurrencyCode = null, int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Retrieve wallet transactions across the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterInvoice">Filter for transactions from a specific invoice (optional)</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign (optional)</param>
        /// <param name="filterUserId">Filter for transactions for specific userId (optional)</param>
        /// <param name="filterUsername">Filter for transactions for specific username that start with the given string (optional)</param>
        /// <param name="filterDetails">Filter for transactions for specific details that start with the given string (optional)</param>
        /// <param name="filterCurrencyCode">Filter for transactions for specific currency code (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceWalletTransactionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceWalletTransactionResource>> TransactionHistoryUsingGETAsyncWithHttpInfo (int? filterInvoice = null, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? filterUserId = null, string filterUsername = null, string filterDetails = null, string filterCurrencyCode = null, int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Updates the balance for a user&#39;s wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being modified</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="request">The requested balance modification to be made to the user&#39;s wallet (optional)</param>
        /// <returns>Task of WalletTransactionResource</returns>
        System.Threading.Tasks.Task<WalletTransactionResource> UpdateBalanceUsingPUTAsync (int? userId, string currencyCode, WalletAlterRequest request = null);

        /// <summary>
        /// Updates the balance for a user&#39;s wallet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being modified</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="request">The requested balance modification to be made to the user&#39;s wallet (optional)</param>
        /// <returns>Task of ApiResponse (WalletTransactionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<WalletTransactionResource>> UpdateBalanceUsingPUTAsyncWithHttpInfo (int? userId, string currencyCode, WalletAlterRequest request = null);
        /// <summary>
        /// Retrieve a user&#39;s wallet transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet transactions are being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceWalletTransactionResource</returns>
        System.Threading.Tasks.Task<PageResourceWalletTransactionResource> UserTransactionHistoryUsingGETAsync (int? userId, string currencyCode, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Retrieve a user&#39;s wallet transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet transactions are being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceWalletTransactionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceWalletTransactionResource>> UserTransactionHistoryUsingGETAsyncWithHttpInfo (int? userId, string currencyCode, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? size = null, int? page = null, string order = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsWalletsApi : IPaymentsWalletsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsWalletsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsWalletsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsWalletsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsWalletsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves a summation of wallet balances by currency code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PageResourceWalletTotalResponse</returns>
        public PageResourceWalletTotalResponse GetWalletTotalsUsingGET ()
        {
             ApiResponse<PageResourceWalletTotalResponse> localVarResponse = GetWalletTotalsUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a summation of wallet balances by currency code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PageResourceWalletTotalResponse</returns>
        public ApiResponse< PageResourceWalletTotalResponse > GetWalletTotalsUsingGETWithHttpInfo ()
        {

            var localVarPath = "/wallets/totals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletTotalsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceWalletTotalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceWalletTotalResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceWalletTotalResponse)));
            
        }

        /// <summary>
        /// Retrieves a summation of wallet balances by currency code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PageResourceWalletTotalResponse</returns>
        public async System.Threading.Tasks.Task<PageResourceWalletTotalResponse> GetWalletTotalsUsingGETAsync ()
        {
             ApiResponse<PageResourceWalletTotalResponse> localVarResponse = await GetWalletTotalsUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a summation of wallet balances by currency code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PageResourceWalletTotalResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceWalletTotalResponse>> GetWalletTotalsUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/wallets/totals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletTotalsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceWalletTotalResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceWalletTotalResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceWalletTotalResponse)));
            
        }

        /// <summary>
        /// Returns the user&#39;s wallet for the given currency code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <returns>SimpleWallet</returns>
        public SimpleWallet GetWalletUsingGET (int? userId, string currencyCode)
        {
             ApiResponse<SimpleWallet> localVarResponse = GetWalletUsingGETWithHttpInfo(userId, currencyCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the user&#39;s wallet for the given currency code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <returns>ApiResponse of SimpleWallet</returns>
        public ApiResponse< SimpleWallet > GetWalletUsingGETWithHttpInfo (int? userId, string currencyCode)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PaymentsWalletsApi->GetWalletUsingGET");
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling PaymentsWalletsApi->GetWalletUsingGET");

            var localVarPath = "/users/{user_id}/wallets/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleWallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleWallet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleWallet)));
            
        }

        /// <summary>
        /// Returns the user&#39;s wallet for the given currency code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <returns>Task of SimpleWallet</returns>
        public async System.Threading.Tasks.Task<SimpleWallet> GetWalletUsingGETAsync (int? userId, string currencyCode)
        {
             ApiResponse<SimpleWallet> localVarResponse = await GetWalletUsingGETAsyncWithHttpInfo(userId, currencyCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the user&#39;s wallet for the given currency code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <returns>Task of ApiResponse (SimpleWallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleWallet>> GetWalletUsingGETAsyncWithHttpInfo (int? userId, string currencyCode)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PaymentsWalletsApi->GetWalletUsingGET");
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling PaymentsWalletsApi->GetWalletUsingGET");

            var localVarPath = "/users/{user_id}/wallets/{currency_code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleWallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleWallet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleWallet)));
            
        }

        /// <summary>
        /// List all of a user&#39;s wallets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallets are being retrieved</param>
        /// <returns>List&lt;SimpleWallet&gt;</returns>
        public List<SimpleWallet> GetWalletsUsingGET (int? userId)
        {
             ApiResponse<List<SimpleWallet>> localVarResponse = GetWalletsUsingGETWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all of a user&#39;s wallets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallets are being retrieved</param>
        /// <returns>ApiResponse of List&lt;SimpleWallet&gt;</returns>
        public ApiResponse< List<SimpleWallet> > GetWalletsUsingGETWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PaymentsWalletsApi->GetWalletsUsingGET");

            var localVarPath = "/users/{user_id}/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SimpleWallet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SimpleWallet>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SimpleWallet>)));
            
        }

        /// <summary>
        /// List all of a user&#39;s wallets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallets are being retrieved</param>
        /// <returns>Task of List&lt;SimpleWallet&gt;</returns>
        public async System.Threading.Tasks.Task<List<SimpleWallet>> GetWalletsUsingGETAsync (int? userId)
        {
             ApiResponse<List<SimpleWallet>> localVarResponse = await GetWalletsUsingGETAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all of a user&#39;s wallets 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallets are being retrieved</param>
        /// <returns>Task of ApiResponse (List&lt;SimpleWallet&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SimpleWallet>>> GetWalletsUsingGETAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PaymentsWalletsApi->GetWalletsUsingGET");

            var localVarPath = "/users/{user_id}/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SimpleWallet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SimpleWallet>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SimpleWallet>)));
            
        }

        /// <summary>
        /// Retrieve a list of wallets across the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceSimpleWallet</returns>
        public PageResourceSimpleWallet GetWalletsUsingGET1 (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceSimpleWallet> localVarResponse = GetWalletsUsingGET1WithHttpInfo(size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a list of wallets across the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceSimpleWallet</returns>
        public ApiResponse< PageResourceSimpleWallet > GetWalletsUsingGET1WithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceSimpleWallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceSimpleWallet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceSimpleWallet)));
            
        }

        /// <summary>
        /// Retrieve a list of wallets across the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceSimpleWallet</returns>
        public async System.Threading.Tasks.Task<PageResourceSimpleWallet> GetWalletsUsingGET1Async (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceSimpleWallet> localVarResponse = await GetWalletsUsingGET1AsyncWithHttpInfo(size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a list of wallets across the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceSimpleWallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceSimpleWallet>> GetWalletsUsingGET1AsyncWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceSimpleWallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceSimpleWallet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceSimpleWallet)));
            
        }

        /// <summary>
        /// Retrieve wallet transactions across the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterInvoice">Filter for transactions from a specific invoice (optional)</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign (optional)</param>
        /// <param name="filterUserId">Filter for transactions for specific userId (optional)</param>
        /// <param name="filterUsername">Filter for transactions for specific username that start with the given string (optional)</param>
        /// <param name="filterDetails">Filter for transactions for specific details that start with the given string (optional)</param>
        /// <param name="filterCurrencyCode">Filter for transactions for specific currency code (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceWalletTransactionResource</returns>
        public PageResourceWalletTransactionResource TransactionHistoryUsingGET (int? filterInvoice = null, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? filterUserId = null, string filterUsername = null, string filterDetails = null, string filterCurrencyCode = null, int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceWalletTransactionResource> localVarResponse = TransactionHistoryUsingGETWithHttpInfo(filterInvoice, filterType, filterMaxDate, filterMinDate, filterSign, filterUserId, filterUsername, filterDetails, filterCurrencyCode, size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve wallet transactions across the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterInvoice">Filter for transactions from a specific invoice (optional)</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign (optional)</param>
        /// <param name="filterUserId">Filter for transactions for specific userId (optional)</param>
        /// <param name="filterUsername">Filter for transactions for specific username that start with the given string (optional)</param>
        /// <param name="filterDetails">Filter for transactions for specific details that start with the given string (optional)</param>
        /// <param name="filterCurrencyCode">Filter for transactions for specific currency code (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceWalletTransactionResource</returns>
        public ApiResponse< PageResourceWalletTransactionResource > TransactionHistoryUsingGETWithHttpInfo (int? filterInvoice = null, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? filterUserId = null, string filterUsername = null, string filterDetails = null, string filterCurrencyCode = null, int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/wallets/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterInvoice != null) localVarQueryParams.Add("filter_invoice", Configuration.ApiClient.ParameterToString(filterInvoice)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterMaxDate != null) localVarQueryParams.Add("filter_max_date", Configuration.ApiClient.ParameterToString(filterMaxDate)); // query parameter
            if (filterMinDate != null) localVarQueryParams.Add("filter_min_date", Configuration.ApiClient.ParameterToString(filterMinDate)); // query parameter
            if (filterSign != null) localVarQueryParams.Add("filter_sign", Configuration.ApiClient.ParameterToString(filterSign)); // query parameter
            if (filterUserId != null) localVarQueryParams.Add("filter_user_id", Configuration.ApiClient.ParameterToString(filterUserId)); // query parameter
            if (filterUsername != null) localVarQueryParams.Add("filter_username", Configuration.ApiClient.ParameterToString(filterUsername)); // query parameter
            if (filterDetails != null) localVarQueryParams.Add("filter_details", Configuration.ApiClient.ParameterToString(filterDetails)); // query parameter
            if (filterCurrencyCode != null) localVarQueryParams.Add("filter_currency_code", Configuration.ApiClient.ParameterToString(filterCurrencyCode)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionHistoryUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceWalletTransactionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceWalletTransactionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceWalletTransactionResource)));
            
        }

        /// <summary>
        /// Retrieve wallet transactions across the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterInvoice">Filter for transactions from a specific invoice (optional)</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign (optional)</param>
        /// <param name="filterUserId">Filter for transactions for specific userId (optional)</param>
        /// <param name="filterUsername">Filter for transactions for specific username that start with the given string (optional)</param>
        /// <param name="filterDetails">Filter for transactions for specific details that start with the given string (optional)</param>
        /// <param name="filterCurrencyCode">Filter for transactions for specific currency code (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceWalletTransactionResource</returns>
        public async System.Threading.Tasks.Task<PageResourceWalletTransactionResource> TransactionHistoryUsingGETAsync (int? filterInvoice = null, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? filterUserId = null, string filterUsername = null, string filterDetails = null, string filterCurrencyCode = null, int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceWalletTransactionResource> localVarResponse = await TransactionHistoryUsingGETAsyncWithHttpInfo(filterInvoice, filterType, filterMaxDate, filterMinDate, filterSign, filterUserId, filterUsername, filterDetails, filterCurrencyCode, size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve wallet transactions across the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterInvoice">Filter for transactions from a specific invoice (optional)</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign (optional)</param>
        /// <param name="filterUserId">Filter for transactions for specific userId (optional)</param>
        /// <param name="filterUsername">Filter for transactions for specific username that start with the given string (optional)</param>
        /// <param name="filterDetails">Filter for transactions for specific details that start with the given string (optional)</param>
        /// <param name="filterCurrencyCode">Filter for transactions for specific currency code (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceWalletTransactionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceWalletTransactionResource>> TransactionHistoryUsingGETAsyncWithHttpInfo (int? filterInvoice = null, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? filterUserId = null, string filterUsername = null, string filterDetails = null, string filterCurrencyCode = null, int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/wallets/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterInvoice != null) localVarQueryParams.Add("filter_invoice", Configuration.ApiClient.ParameterToString(filterInvoice)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterMaxDate != null) localVarQueryParams.Add("filter_max_date", Configuration.ApiClient.ParameterToString(filterMaxDate)); // query parameter
            if (filterMinDate != null) localVarQueryParams.Add("filter_min_date", Configuration.ApiClient.ParameterToString(filterMinDate)); // query parameter
            if (filterSign != null) localVarQueryParams.Add("filter_sign", Configuration.ApiClient.ParameterToString(filterSign)); // query parameter
            if (filterUserId != null) localVarQueryParams.Add("filter_user_id", Configuration.ApiClient.ParameterToString(filterUserId)); // query parameter
            if (filterUsername != null) localVarQueryParams.Add("filter_username", Configuration.ApiClient.ParameterToString(filterUsername)); // query parameter
            if (filterDetails != null) localVarQueryParams.Add("filter_details", Configuration.ApiClient.ParameterToString(filterDetails)); // query parameter
            if (filterCurrencyCode != null) localVarQueryParams.Add("filter_currency_code", Configuration.ApiClient.ParameterToString(filterCurrencyCode)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionHistoryUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceWalletTransactionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceWalletTransactionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceWalletTransactionResource)));
            
        }

        /// <summary>
        /// Updates the balance for a user&#39;s wallet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being modified</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="request">The requested balance modification to be made to the user&#39;s wallet (optional)</param>
        /// <returns>WalletTransactionResource</returns>
        public WalletTransactionResource UpdateBalanceUsingPUT (int? userId, string currencyCode, WalletAlterRequest request = null)
        {
             ApiResponse<WalletTransactionResource> localVarResponse = UpdateBalanceUsingPUTWithHttpInfo(userId, currencyCode, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the balance for a user&#39;s wallet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being modified</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="request">The requested balance modification to be made to the user&#39;s wallet (optional)</param>
        /// <returns>ApiResponse of WalletTransactionResource</returns>
        public ApiResponse< WalletTransactionResource > UpdateBalanceUsingPUTWithHttpInfo (int? userId, string currencyCode, WalletAlterRequest request = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PaymentsWalletsApi->UpdateBalanceUsingPUT");
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling PaymentsWalletsApi->UpdateBalanceUsingPUT");

            var localVarPath = "/users/{user_id}/wallets/{currency_code}/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletTransactionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletTransactionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletTransactionResource)));
            
        }

        /// <summary>
        /// Updates the balance for a user&#39;s wallet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being modified</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="request">The requested balance modification to be made to the user&#39;s wallet (optional)</param>
        /// <returns>Task of WalletTransactionResource</returns>
        public async System.Threading.Tasks.Task<WalletTransactionResource> UpdateBalanceUsingPUTAsync (int? userId, string currencyCode, WalletAlterRequest request = null)
        {
             ApiResponse<WalletTransactionResource> localVarResponse = await UpdateBalanceUsingPUTAsyncWithHttpInfo(userId, currencyCode, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the balance for a user&#39;s wallet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet is being modified</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="request">The requested balance modification to be made to the user&#39;s wallet (optional)</param>
        /// <returns>Task of ApiResponse (WalletTransactionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WalletTransactionResource>> UpdateBalanceUsingPUTAsyncWithHttpInfo (int? userId, string currencyCode, WalletAlterRequest request = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PaymentsWalletsApi->UpdateBalanceUsingPUT");
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling PaymentsWalletsApi->UpdateBalanceUsingPUT");

            var localVarPath = "/users/{user_id}/wallets/{currency_code}/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBalanceUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WalletTransactionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WalletTransactionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(WalletTransactionResource)));
            
        }

        /// <summary>
        /// Retrieve a user&#39;s wallet transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet transactions are being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceWalletTransactionResource</returns>
        public PageResourceWalletTransactionResource UserTransactionHistoryUsingGET (int? userId, string currencyCode, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceWalletTransactionResource> localVarResponse = UserTransactionHistoryUsingGETWithHttpInfo(userId, currencyCode, filterType, filterMaxDate, filterMinDate, filterSign, size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a user&#39;s wallet transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet transactions are being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceWalletTransactionResource</returns>
        public ApiResponse< PageResourceWalletTransactionResource > UserTransactionHistoryUsingGETWithHttpInfo (int? userId, string currencyCode, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? size = null, int? page = null, string order = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PaymentsWalletsApi->UserTransactionHistoryUsingGET");
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling PaymentsWalletsApi->UserTransactionHistoryUsingGET");

            var localVarPath = "/users/{user_id}/wallets/{currency_code}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterMaxDate != null) localVarQueryParams.Add("filter_max_date", Configuration.ApiClient.ParameterToString(filterMaxDate)); // query parameter
            if (filterMinDate != null) localVarQueryParams.Add("filter_min_date", Configuration.ApiClient.ParameterToString(filterMinDate)); // query parameter
            if (filterSign != null) localVarQueryParams.Add("filter_sign", Configuration.ApiClient.ParameterToString(filterSign)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTransactionHistoryUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceWalletTransactionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceWalletTransactionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceWalletTransactionResource)));
            
        }

        /// <summary>
        /// Retrieve a user&#39;s wallet transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet transactions are being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceWalletTransactionResource</returns>
        public async System.Threading.Tasks.Task<PageResourceWalletTransactionResource> UserTransactionHistoryUsingGETAsync (int? userId, string currencyCode, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceWalletTransactionResource> localVarResponse = await UserTransactionHistoryUsingGETAsyncWithHttpInfo(userId, currencyCode, filterType, filterMaxDate, filterMinDate, filterSign, size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a user&#39;s wallet transactions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The ID of the user for whom wallet transactions are being retrieved</param>
        /// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
        /// <param name="filterType">Filter for transactions with specified type (optional)</param>
        /// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>
        /// <param name="filterSign">Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceWalletTransactionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceWalletTransactionResource>> UserTransactionHistoryUsingGETAsyncWithHttpInfo (int? userId, string currencyCode, string filterType = null, long? filterMaxDate = null, long? filterMinDate = null, string filterSign = null, int? size = null, int? page = null, string order = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PaymentsWalletsApi->UserTransactionHistoryUsingGET");
            // verify the required parameter 'currencyCode' is set
            if (currencyCode == null)
                throw new ApiException(400, "Missing required parameter 'currencyCode' when calling PaymentsWalletsApi->UserTransactionHistoryUsingGET");

            var localVarPath = "/users/{user_id}/wallets/{currency_code}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (currencyCode != null) localVarPathParams.Add("currency_code", Configuration.ApiClient.ParameterToString(currencyCode)); // path parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterMaxDate != null) localVarQueryParams.Add("filter_max_date", Configuration.ApiClient.ParameterToString(filterMaxDate)); // query parameter
            if (filterMinDate != null) localVarQueryParams.Add("filter_min_date", Configuration.ApiClient.ParameterToString(filterMinDate)); // query parameter
            if (filterSign != null) localVarQueryParams.Add("filter_sign", Configuration.ApiClient.ParameterToString(filterSign)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (knetik_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTransactionHistoryUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceWalletTransactionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceWalletTransactionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceWalletTransactionResource)));
            
        }

    }
}
