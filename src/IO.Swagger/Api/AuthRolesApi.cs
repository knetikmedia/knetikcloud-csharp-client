/* 
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthRolesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Set roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns></returns>
        void AssignClientRolesUsingPUT (string clientKey, List<string> rolesList = null);

        /// <summary>
        /// Set roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignClientRolesUsingPUTWithHttpInfo (string clientKey, List<string> rolesList = null);
        /// <summary>
        /// Set permissions for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns></returns>
        void AssignPermissionsUsingPUT (string role, List<string> permissionsList = null);

        /// <summary>
        /// Set permissions for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignPermissionsUsingPUTWithHttpInfo (string role, List<string> permissionsList = null);
        /// <summary>
        /// Set roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns></returns>
        void AssignUserRolesExternalUsingPUT (int? userId, List<string> rolesList = null);

        /// <summary>
        /// Set roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssignUserRolesExternalUsingPUTWithHttpInfo (int? userId, List<string> rolesList = null);
        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>RoleResource</returns>
        RoleResource CreateRoleUsingPOST (RoleResource roleResource = null);

        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>ApiResponse of RoleResource</returns>
        ApiResponse<RoleResource> CreateRoleUsingPOSTWithHttpInfo (RoleResource roleResource = null);
        /// <summary>
        /// Delete a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns></returns>
        void DeleteRoleUsingDELETE (string role, bool? force = null);

        /// <summary>
        /// Delete a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRoleUsingDELETEWithHttpInfo (string role, bool? force = null);
        /// <summary>
        /// Get roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>List&lt;RoleResource&gt;</returns>
        List<RoleResource> GetClientRolesUsingGET (string clientKey);

        /// <summary>
        /// Get roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>ApiResponse of List&lt;RoleResource&gt;</returns>
        ApiResponse<List<RoleResource>> GetClientRolesUsingGETWithHttpInfo (string clientKey);
        /// <summary>
        /// Get a single role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>RoleResource</returns>
        RoleResource GetRoleUsingGET (string role);

        /// <summary>
        /// Get a single role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>ApiResponse of RoleResource</returns>
        ApiResponse<RoleResource> GetRoleUsingGETWithHttpInfo (string role);
        /// <summary>
        /// List and search roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>PageRoleResource</returns>
        PageRoleResource GetRolesUsingGET (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>ApiResponse of PageRoleResource</returns>
        ApiResponse<PageRoleResource> GetRolesUsingGETWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>List&lt;RoleResource&gt;</returns>
        List<RoleResource> GetUserRolesUsingGET (int? userId);

        /// <summary>
        /// Get roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>ApiResponse of List&lt;RoleResource&gt;</returns>
        ApiResponse<List<RoleResource>> GetUserRolesUsingGETWithHttpInfo (int? userId);
        /// <summary>
        /// Update a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns></returns>
        void UpdateRoleUsingPUT (string role, RoleResource roleResource = null);

        /// <summary>
        /// Update a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRoleUsingPUTWithHttpInfo (string role, RoleResource roleResource = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Set roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignClientRolesUsingPUTAsync (string clientKey, List<string> rolesList = null);

        /// <summary>
        /// Set roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignClientRolesUsingPUTAsyncWithHttpInfo (string clientKey, List<string> rolesList = null);
        /// <summary>
        /// Set permissions for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignPermissionsUsingPUTAsync (string role, List<string> permissionsList = null);

        /// <summary>
        /// Set permissions for a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignPermissionsUsingPUTAsyncWithHttpInfo (string role, List<string> permissionsList = null);
        /// <summary>
        /// Set roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssignUserRolesExternalUsingPUTAsync (int? userId, List<string> rolesList = null);

        /// <summary>
        /// Set roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignUserRolesExternalUsingPUTAsyncWithHttpInfo (int? userId, List<string> rolesList = null);
        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of RoleResource</returns>
        System.Threading.Tasks.Task<RoleResource> CreateRoleUsingPOSTAsync (RoleResource roleResource = null);

        /// <summary>
        /// Create a new role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResource>> CreateRoleUsingPOSTAsyncWithHttpInfo (RoleResource roleResource = null);
        /// <summary>
        /// Delete a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRoleUsingDELETEAsync (string role, bool? force = null);

        /// <summary>
        /// Delete a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleUsingDELETEAsyncWithHttpInfo (string role, bool? force = null);
        /// <summary>
        /// Get roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>Task of List&lt;RoleResource&gt;</returns>
        System.Threading.Tasks.Task<List<RoleResource>> GetClientRolesUsingGETAsync (string clientKey);

        /// <summary>
        /// Get roles for a client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>Task of ApiResponse (List&lt;RoleResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RoleResource>>> GetClientRolesUsingGETAsyncWithHttpInfo (string clientKey);
        /// <summary>
        /// Get a single role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>Task of RoleResource</returns>
        System.Threading.Tasks.Task<RoleResource> GetRoleUsingGETAsync (string role);

        /// <summary>
        /// Get a single role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleResource>> GetRoleUsingGETAsyncWithHttpInfo (string role);
        /// <summary>
        /// List and search roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of PageRoleResource</returns>
        System.Threading.Tasks.Task<PageRoleResource> GetRolesUsingGETAsync (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageRoleResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageRoleResource>> GetRolesUsingGETAsyncWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>Task of List&lt;RoleResource&gt;</returns>
        System.Threading.Tasks.Task<List<RoleResource>> GetUserRolesUsingGETAsync (int? userId);

        /// <summary>
        /// Get roles for a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>Task of ApiResponse (List&lt;RoleResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RoleResource>>> GetUserRolesUsingGETAsyncWithHttpInfo (int? userId);
        /// <summary>
        /// Update a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRoleUsingPUTAsync (string role, RoleResource roleResource = null);

        /// <summary>
        /// Update a role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRoleUsingPUTAsyncWithHttpInfo (string role, RoleResource roleResource = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthRolesApi : IAuthRolesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthRolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthRolesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthRolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthRolesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Set roles for a client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns></returns>
        public void AssignClientRolesUsingPUT (string clientKey, List<string> rolesList = null)
        {
             AssignClientRolesUsingPUTWithHttpInfo(clientKey, rolesList);
        }

        /// <summary>
        /// Set roles for a client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignClientRolesUsingPUTWithHttpInfo (string clientKey, List<string> rolesList = null)
        {
            // verify the required parameter 'clientKey' is set
            if (clientKey == null)
                throw new ApiException(400, "Missing required parameter 'clientKey' when calling AuthRolesApi->AssignClientRolesUsingPUT");

            var localVarPath = "/auth/clients/{client_key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientKey != null) localVarPathParams.Add("client_key", Configuration.ApiClient.ParameterToString(clientKey)); // path parameter
            if (rolesList != null && rolesList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rolesList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rolesList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignClientRolesUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set roles for a client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignClientRolesUsingPUTAsync (string clientKey, List<string> rolesList = null)
        {
             await AssignClientRolesUsingPUTAsyncWithHttpInfo(clientKey, rolesList);

        }

        /// <summary>
        /// Set roles for a client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignClientRolesUsingPUTAsyncWithHttpInfo (string clientKey, List<string> rolesList = null)
        {
            // verify the required parameter 'clientKey' is set
            if (clientKey == null)
                throw new ApiException(400, "Missing required parameter 'clientKey' when calling AuthRolesApi->AssignClientRolesUsingPUT");

            var localVarPath = "/auth/clients/{client_key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientKey != null) localVarPathParams.Add("client_key", Configuration.ApiClient.ParameterToString(clientKey)); // path parameter
            if (rolesList != null && rolesList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rolesList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rolesList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignClientRolesUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set permissions for a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns></returns>
        public void AssignPermissionsUsingPUT (string role, List<string> permissionsList = null)
        {
             AssignPermissionsUsingPUTWithHttpInfo(role, permissionsList);
        }

        /// <summary>
        /// Set permissions for a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignPermissionsUsingPUTWithHttpInfo (string role, List<string> permissionsList = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->AssignPermissionsUsingPUT");

            var localVarPath = "/auth/roles/{role}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (permissionsList != null && permissionsList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(permissionsList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissionsList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignPermissionsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set permissions for a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignPermissionsUsingPUTAsync (string role, List<string> permissionsList = null)
        {
             await AssignPermissionsUsingPUTAsyncWithHttpInfo(role, permissionsList);

        }

        /// <summary>
        /// Set permissions for a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="permissionsList">The list of unique permissions (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignPermissionsUsingPUTAsyncWithHttpInfo (string role, List<string> permissionsList = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->AssignPermissionsUsingPUT");

            var localVarPath = "/auth/roles/{role}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (permissionsList != null && permissionsList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(permissionsList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = permissionsList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignPermissionsUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set roles for a user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns></returns>
        public void AssignUserRolesExternalUsingPUT (int? userId, List<string> rolesList = null)
        {
             AssignUserRolesExternalUsingPUTWithHttpInfo(userId, rolesList);
        }

        /// <summary>
        /// Set roles for a user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssignUserRolesExternalUsingPUTWithHttpInfo (int? userId, List<string> rolesList = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthRolesApi->AssignUserRolesExternalUsingPUT");

            var localVarPath = "/auth/users/{user_id}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (rolesList != null && rolesList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rolesList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rolesList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignUserRolesExternalUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Set roles for a user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssignUserRolesExternalUsingPUTAsync (int? userId, List<string> rolesList = null)
        {
             await AssignUserRolesExternalUsingPUTAsyncWithHttpInfo(userId, rolesList);

        }

        /// <summary>
        /// Set roles for a user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="rolesList">The list of unique roles (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignUserRolesExternalUsingPUTAsyncWithHttpInfo (int? userId, List<string> rolesList = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthRolesApi->AssignUserRolesExternalUsingPUT");

            var localVarPath = "/auth/users/{user_id}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (rolesList != null && rolesList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(rolesList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = rolesList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignUserRolesExternalUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>RoleResource</returns>
        public RoleResource CreateRoleUsingPOST (RoleResource roleResource = null)
        {
             ApiResponse<RoleResource> localVarResponse = CreateRoleUsingPOSTWithHttpInfo(roleResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>ApiResponse of RoleResource</returns>
        public ApiResponse< RoleResource > CreateRoleUsingPOSTWithHttpInfo (RoleResource roleResource = null)
        {

            var localVarPath = "/auth/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRoleUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of RoleResource</returns>
        public async System.Threading.Tasks.Task<RoleResource> CreateRoleUsingPOSTAsync (RoleResource roleResource = null)
        {
             ApiResponse<RoleResource> localVarResponse = await CreateRoleUsingPOSTAsyncWithHttpInfo(roleResource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResource>> CreateRoleUsingPOSTAsyncWithHttpInfo (RoleResource roleResource = null)
        {

            var localVarPath = "/auth/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRoleUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// Delete a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns></returns>
        public void DeleteRoleUsingDELETE (string role, bool? force = null)
        {
             DeleteRoleUsingDELETEWithHttpInfo(role, force);
        }

        /// <summary>
        /// Delete a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRoleUsingDELETEWithHttpInfo (string role, bool? force = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->DeleteRoleUsingDELETE");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRoleUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRoleUsingDELETEAsync (string role, bool? force = null)
        {
             await DeleteRoleUsingDELETEAsyncWithHttpInfo(role, force);

        }

        /// <summary>
        /// Delete a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="force">If true, removes role from users/clients (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRoleUsingDELETEAsyncWithHttpInfo (string role, bool? force = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->DeleteRoleUsingDELETE");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (force != null) localVarQueryParams.Add("force", Configuration.ApiClient.ParameterToString(force)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRoleUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get roles for a client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>List&lt;RoleResource&gt;</returns>
        public List<RoleResource> GetClientRolesUsingGET (string clientKey)
        {
             ApiResponse<List<RoleResource>> localVarResponse = GetClientRolesUsingGETWithHttpInfo(clientKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get roles for a client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>ApiResponse of List&lt;RoleResource&gt;</returns>
        public ApiResponse< List<RoleResource> > GetClientRolesUsingGETWithHttpInfo (string clientKey)
        {
            // verify the required parameter 'clientKey' is set
            if (clientKey == null)
                throw new ApiException(400, "Missing required parameter 'clientKey' when calling AuthRolesApi->GetClientRolesUsingGET");

            var localVarPath = "/auth/clients/{client_key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientKey != null) localVarPathParams.Add("client_key", Configuration.ApiClient.ParameterToString(clientKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientRolesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RoleResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RoleResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleResource>)));
            
        }

        /// <summary>
        /// Get roles for a client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>Task of List&lt;RoleResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<RoleResource>> GetClientRolesUsingGETAsync (string clientKey)
        {
             ApiResponse<List<RoleResource>> localVarResponse = await GetClientRolesUsingGETAsyncWithHttpInfo(clientKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get roles for a client 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientKey">The client key</param>
        /// <returns>Task of ApiResponse (List&lt;RoleResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RoleResource>>> GetClientRolesUsingGETAsyncWithHttpInfo (string clientKey)
        {
            // verify the required parameter 'clientKey' is set
            if (clientKey == null)
                throw new ApiException(400, "Missing required parameter 'clientKey' when calling AuthRolesApi->GetClientRolesUsingGET");

            var localVarPath = "/auth/clients/{client_key}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (clientKey != null) localVarPathParams.Add("client_key", Configuration.ApiClient.ParameterToString(clientKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientRolesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RoleResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RoleResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleResource>)));
            
        }

        /// <summary>
        /// Get a single role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>RoleResource</returns>
        public RoleResource GetRoleUsingGET (string role)
        {
             ApiResponse<RoleResource> localVarResponse = GetRoleUsingGETWithHttpInfo(role);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>ApiResponse of RoleResource</returns>
        public ApiResponse< RoleResource > GetRoleUsingGETWithHttpInfo (string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->GetRoleUsingGET");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoleUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// Get a single role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>Task of RoleResource</returns>
        public async System.Threading.Tasks.Task<RoleResource> GetRoleUsingGETAsync (string role)
        {
             ApiResponse<RoleResource> localVarResponse = await GetRoleUsingGETAsyncWithHttpInfo(role);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <returns>Task of ApiResponse (RoleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleResource>> GetRoleUsingGETAsyncWithHttpInfo (string role)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->GetRoleUsingGET");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRoleUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleResource)));
            
        }

        /// <summary>
        /// List and search roles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>PageRoleResource</returns>
        public PageRoleResource GetRolesUsingGET (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageRoleResource> localVarResponse = GetRolesUsingGETWithHttpInfo(size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List and search roles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>ApiResponse of PageRoleResource</returns>
        public ApiResponse< PageRoleResource > GetRolesUsingGETWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/auth/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRolesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageRoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageRoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageRoleResource)));
            
        }

        /// <summary>
        /// List and search roles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of PageRoleResource</returns>
        public async System.Threading.Tasks.Task<PageRoleResource> GetRolesUsingGETAsync (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageRoleResource> localVarResponse = await GetRolesUsingGETAsyncWithHttpInfo(size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List and search roles 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageRoleResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageRoleResource>> GetRolesUsingGETAsyncWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/auth/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRolesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageRoleResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageRoleResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageRoleResource)));
            
        }

        /// <summary>
        /// Get roles for a user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>List&lt;RoleResource&gt;</returns>
        public List<RoleResource> GetUserRolesUsingGET (int? userId)
        {
             ApiResponse<List<RoleResource>> localVarResponse = GetUserRolesUsingGETWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get roles for a user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>ApiResponse of List&lt;RoleResource&gt;</returns>
        public ApiResponse< List<RoleResource> > GetUserRolesUsingGETWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthRolesApi->GetUserRolesUsingGET");

            var localVarPath = "/auth/users/{user_id}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserRolesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RoleResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RoleResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleResource>)));
            
        }

        /// <summary>
        /// Get roles for a user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>Task of List&lt;RoleResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<RoleResource>> GetUserRolesUsingGETAsync (int? userId)
        {
             ApiResponse<List<RoleResource>> localVarResponse = await GetUserRolesUsingGETAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get roles for a user 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <returns>Task of ApiResponse (List&lt;RoleResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RoleResource>>> GetUserRolesUsingGETAsyncWithHttpInfo (int? userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling AuthRolesApi->GetUserRolesUsingGET");

            var localVarPath = "/auth/users/{user_id}/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserRolesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RoleResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RoleResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RoleResource>)));
            
        }

        /// <summary>
        /// Update a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns></returns>
        public void UpdateRoleUsingPUT (string role, RoleResource roleResource = null)
        {
             UpdateRoleUsingPUTWithHttpInfo(role, roleResource);
        }

        /// <summary>
        /// Update a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRoleUsingPUTWithHttpInfo (string role, RoleResource roleResource = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->UpdateRoleUsingPUT");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRoleUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRoleUsingPUTAsync (string role, RoleResource roleResource = null)
        {
             await UpdateRoleUsingPUTAsyncWithHttpInfo(role, roleResource);

        }

        /// <summary>
        /// Update a role 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="role">The role value</param>
        /// <param name="roleResource">The role resource object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRoleUsingPUTAsyncWithHttpInfo (string role, RoleResource roleResource = null)
        {
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling AuthRolesApi->UpdateRoleUsingPUT");

            var localVarPath = "/auth/roles/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (role != null) localVarPathParams.Add("role", Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (roleResource != null && roleResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(roleResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = roleResource; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRoleUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
