/* 
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGamificationAchievementsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new achievement definition
        /// </summary>
        /// <remarks>
        /// If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>AchievementDefinitionResource</returns>
        AchievementDefinitionResource CreateAchievementUsingPOST (AchievementDefinitionResource achievement = null);

        /// <summary>
        /// Create a new achievement definition
        /// </summary>
        /// <remarks>
        /// If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>ApiResponse of AchievementDefinitionResource</returns>
        ApiResponse<AchievementDefinitionResource> CreateAchievementUsingPOSTWithHttpInfo (AchievementDefinitionResource achievement = null);
        /// <summary>
        /// Create an achievement template
        /// </summary>
        /// <remarks>
        /// Achievement templates define a type of achievement and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The achievement template to be created (optional)</param>
        /// <returns>TemplateResource</returns>
        TemplateResource CreateTemplateUsingPOST (TemplateResource template = null);

        /// <summary>
        /// Create an achievement template
        /// </summary>
        /// <remarks>
        /// Achievement templates define a type of achievement and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The achievement template to be created (optional)</param>
        /// <returns>ApiResponse of TemplateResource</returns>
        ApiResponse<TemplateResource> CreateTemplateUsingPOSTWithHttpInfo (TemplateResource template = null);
        /// <summary>
        /// Delete an achievement template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns></returns>
        void DeleteAchievementTemplateUsingDELETE (string id, string cascade = null);

        /// <summary>
        /// Delete an achievement template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAchievementTemplateUsingDELETEWithHttpInfo (string id, string cascade = null);
        /// <summary>
        /// Delete an achievement definition
        /// </summary>
        /// <remarks>
        /// Will also disable the associated generated rule, if any.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns></returns>
        void DeleteAchievementUsingDELETE (string name);

        /// <summary>
        /// Delete an achievement definition
        /// </summary>
        /// <remarks>
        /// Will also disable the associated generated rule, if any.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAchievementUsingDELETEWithHttpInfo (string name);
        /// <summary>
        /// Get a list of derived achievements
        /// </summary>
        /// <remarks>
        /// Used by other services that depend on achievements
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the derived achievement</param>
        /// <returns>List&lt;AchievementDefinitionResource&gt;</returns>
        List<AchievementDefinitionResource> FindAllByGroupNameUsingGET (string name);

        /// <summary>
        /// Get a list of derived achievements
        /// </summary>
        /// <remarks>
        /// Used by other services that depend on achievements
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the derived achievement</param>
        /// <returns>ApiResponse of List&lt;AchievementDefinitionResource&gt;</returns>
        ApiResponse<List<AchievementDefinitionResource>> FindAllByGroupNameUsingGETWithHttpInfo (string name);
        /// <summary>
        /// Get a single achievement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>TemplateResource</returns>
        TemplateResource GetAchievementTemplateUsingGET (string id);

        /// <summary>
        /// Get a single achievement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>ApiResponse of TemplateResource</returns>
        ApiResponse<TemplateResource> GetAchievementTemplateUsingGETWithHttpInfo (string id);
        /// <summary>
        /// List and search achievement templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>PageTemplateResource</returns>
        PageTemplateResource GetAchievementTemplatesUsingGET (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search achievement templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>ApiResponse of PageTemplateResource</returns>
        ApiResponse<PageTemplateResource> GetAchievementTemplatesUsingGETWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get a single achievement definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>AchievementDefinitionResource</returns>
        AchievementDefinitionResource GetAchievementUsingGET (string name);

        /// <summary>
        /// Get a single achievement definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>ApiResponse of AchievementDefinitionResource</returns>
        ApiResponse<AchievementDefinitionResource> GetAchievementUsingGETWithHttpInfo (string name);
        /// <summary>
        /// Get all achievement definitions in the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="filterDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>PageAchievementDefinitionResource</returns>
        PageAchievementDefinitionResource GetAchievementsUsingGET (string filterTagset = null, string filterName = null, bool? filterHidden = null, bool? filterDerived = null, int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Get all achievement definitions in the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="filterDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>ApiResponse of PageAchievementDefinitionResource</returns>
        ApiResponse<PageAchievementDefinitionResource> GetAchievementsUsingGETWithHttpInfo (string filterTagset = null, string filterName = null, bool? filterHidden = null, bool? filterDerived = null, int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Retrieve progress on a given achievement for all users
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageUserAchievementGroupResource</returns>
        PageUserAchievementGroupResource GetAllUserProgressForAchievementUsingGET (string achievementName, bool? filterAchievementDerived = null, string filterAchievementTagset = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);

        /// <summary>
        /// Retrieve progress on a given achievement for all users
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageUserAchievementGroupResource</returns>
        ApiResponse<PageUserAchievementGroupResource> GetAllUserProgressForAchievementUsingGETWithHttpInfo (string achievementName, bool? filterAchievementDerived = null, string filterAchievementTagset = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);
        /// <summary>
        /// Retrieve progress on achievements for all users
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageUserAchievementGroupResource</returns>
        PageUserAchievementGroupResource GetAllUserProgressUsingGET (bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);

        /// <summary>
        /// Retrieve progress on achievements for all users
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageUserAchievementGroupResource</returns>
        ApiResponse<PageUserAchievementGroupResource> GetAllUserProgressUsingGETWithHttpInfo (bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);
        /// <summary>
        /// Get the list of triggers that can be used to trigger an achievement progress update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BreTriggerResource&gt;</returns>
        List<BreTriggerResource> GetAvailableTriggersUsingGET ();

        /// <summary>
        /// Get the list of triggers that can be used to trigger an achievement progress update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BreTriggerResource&gt;</returns>
        ApiResponse<List<BreTriggerResource>> GetAvailableTriggersUsingGETWithHttpInfo ();
        /// <summary>
        /// Retrieve progress on a given achievement for a given user
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <returns>UserAchievementGroupResource</returns>
        UserAchievementGroupResource GetUserProgressForAchievementUsingGET (int? userId, string achievementName);

        /// <summary>
        /// Retrieve progress on a given achievement for a given user
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <returns>ApiResponse of UserAchievementGroupResource</returns>
        ApiResponse<UserAchievementGroupResource> GetUserProgressForAchievementUsingGETWithHttpInfo (int? userId, string achievementName);
        /// <summary>
        /// Retrieve progress on achievements for a given user
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageUserAchievementGroupResource</returns>
        PageUserAchievementGroupResource GetUserProgressUsingGET (int? userId, bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);

        /// <summary>
        /// Retrieve progress on achievements for a given user
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageUserAchievementGroupResource</returns>
        ApiResponse<PageUserAchievementGroupResource> GetUserProgressUsingGETWithHttpInfo (int? userId, bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);
        /// <summary>
        /// Update an achievement definition
        /// </summary>
        /// <remarks>
        /// The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns></returns>
        void UpdateAchievementUsingPUT (string name, AchievementDefinitionResource achievement = null);

        /// <summary>
        /// Update an achievement definition
        /// </summary>
        /// <remarks>
        /// The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAchievementUsingPUTWithHttpInfo (string name, AchievementDefinitionResource achievement = null);
        /// <summary>
        /// Update or create an achievement progress record for a user
        /// </summary>
        /// <remarks>
        /// If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="request">The progress update details (optional)</param>
        /// <returns>UserAchievementGroupResource</returns>
        UserAchievementGroupResource UpdateProgressUsingPUT (int? userId, string achievementName, AchievementProgressUpdateRequest request = null);

        /// <summary>
        /// Update or create an achievement progress record for a user
        /// </summary>
        /// <remarks>
        /// If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="request">The progress update details (optional)</param>
        /// <returns>ApiResponse of UserAchievementGroupResource</returns>
        ApiResponse<UserAchievementGroupResource> UpdateProgressUsingPUTWithHttpInfo (int? userId, string achievementName, AchievementProgressUpdateRequest request = null);
        /// <summary>
        /// Update an achievement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns></returns>
        void UpdateTemplateUsingPUT (string id, TemplateResource template = null);

        /// <summary>
        /// Update an achievement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTemplateUsingPUTWithHttpInfo (string id, TemplateResource template = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new achievement definition
        /// </summary>
        /// <remarks>
        /// If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>Task of AchievementDefinitionResource</returns>
        System.Threading.Tasks.Task<AchievementDefinitionResource> CreateAchievementUsingPOSTAsync (AchievementDefinitionResource achievement = null);

        /// <summary>
        /// Create a new achievement definition
        /// </summary>
        /// <remarks>
        /// If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>Task of ApiResponse (AchievementDefinitionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchievementDefinitionResource>> CreateAchievementUsingPOSTAsyncWithHttpInfo (AchievementDefinitionResource achievement = null);
        /// <summary>
        /// Create an achievement template
        /// </summary>
        /// <remarks>
        /// Achievement templates define a type of achievement and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The achievement template to be created (optional)</param>
        /// <returns>Task of TemplateResource</returns>
        System.Threading.Tasks.Task<TemplateResource> CreateTemplateUsingPOSTAsync (TemplateResource template = null);

        /// <summary>
        /// Create an achievement template
        /// </summary>
        /// <remarks>
        /// Achievement templates define a type of achievement and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The achievement template to be created (optional)</param>
        /// <returns>Task of ApiResponse (TemplateResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateResource>> CreateTemplateUsingPOSTAsyncWithHttpInfo (TemplateResource template = null);
        /// <summary>
        /// Delete an achievement template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAchievementTemplateUsingDELETEAsync (string id, string cascade = null);

        /// <summary>
        /// Delete an achievement template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAchievementTemplateUsingDELETEAsyncWithHttpInfo (string id, string cascade = null);
        /// <summary>
        /// Delete an achievement definition
        /// </summary>
        /// <remarks>
        /// Will also disable the associated generated rule, if any.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAchievementUsingDELETEAsync (string name);

        /// <summary>
        /// Delete an achievement definition
        /// </summary>
        /// <remarks>
        /// Will also disable the associated generated rule, if any.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAchievementUsingDELETEAsyncWithHttpInfo (string name);
        /// <summary>
        /// Get a list of derived achievements
        /// </summary>
        /// <remarks>
        /// Used by other services that depend on achievements
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the derived achievement</param>
        /// <returns>Task of List&lt;AchievementDefinitionResource&gt;</returns>
        System.Threading.Tasks.Task<List<AchievementDefinitionResource>> FindAllByGroupNameUsingGETAsync (string name);

        /// <summary>
        /// Get a list of derived achievements
        /// </summary>
        /// <remarks>
        /// Used by other services that depend on achievements
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the derived achievement</param>
        /// <returns>Task of ApiResponse (List&lt;AchievementDefinitionResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AchievementDefinitionResource>>> FindAllByGroupNameUsingGETAsyncWithHttpInfo (string name);
        /// <summary>
        /// Get a single achievement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of TemplateResource</returns>
        System.Threading.Tasks.Task<TemplateResource> GetAchievementTemplateUsingGETAsync (string id);

        /// <summary>
        /// Get a single achievement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of ApiResponse (TemplateResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateResource>> GetAchievementTemplateUsingGETAsyncWithHttpInfo (string id);
        /// <summary>
        /// List and search achievement templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of PageTemplateResource</returns>
        System.Threading.Tasks.Task<PageTemplateResource> GetAchievementTemplatesUsingGETAsync (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search achievement templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageTemplateResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageTemplateResource>> GetAchievementTemplatesUsingGETAsyncWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get a single achievement definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>Task of AchievementDefinitionResource</returns>
        System.Threading.Tasks.Task<AchievementDefinitionResource> GetAchievementUsingGETAsync (string name);

        /// <summary>
        /// Get a single achievement definition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>Task of ApiResponse (AchievementDefinitionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<AchievementDefinitionResource>> GetAchievementUsingGETAsyncWithHttpInfo (string name);
        /// <summary>
        /// Get all achievement definitions in the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="filterDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of PageAchievementDefinitionResource</returns>
        System.Threading.Tasks.Task<PageAchievementDefinitionResource> GetAchievementsUsingGETAsync (string filterTagset = null, string filterName = null, bool? filterHidden = null, bool? filterDerived = null, int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Get all achievement definitions in the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="filterDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageAchievementDefinitionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAchievementDefinitionResource>> GetAchievementsUsingGETAsyncWithHttpInfo (string filterTagset = null, string filterName = null, bool? filterHidden = null, bool? filterDerived = null, int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Retrieve progress on a given achievement for all users
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageUserAchievementGroupResource</returns>
        System.Threading.Tasks.Task<PageUserAchievementGroupResource> GetAllUserProgressForAchievementUsingGETAsync (string achievementName, bool? filterAchievementDerived = null, string filterAchievementTagset = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);

        /// <summary>
        /// Retrieve progress on a given achievement for all users
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageUserAchievementGroupResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageUserAchievementGroupResource>> GetAllUserProgressForAchievementUsingGETAsyncWithHttpInfo (string achievementName, bool? filterAchievementDerived = null, string filterAchievementTagset = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);
        /// <summary>
        /// Retrieve progress on achievements for all users
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageUserAchievementGroupResource</returns>
        System.Threading.Tasks.Task<PageUserAchievementGroupResource> GetAllUserProgressUsingGETAsync (bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);

        /// <summary>
        /// Retrieve progress on achievements for all users
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageUserAchievementGroupResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageUserAchievementGroupResource>> GetAllUserProgressUsingGETAsyncWithHttpInfo (bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);
        /// <summary>
        /// Get the list of triggers that can be used to trigger an achievement progress update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BreTriggerResource&gt;</returns>
        System.Threading.Tasks.Task<List<BreTriggerResource>> GetAvailableTriggersUsingGETAsync ();

        /// <summary>
        /// Get the list of triggers that can be used to trigger an achievement progress update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BreTriggerResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BreTriggerResource>>> GetAvailableTriggersUsingGETAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieve progress on a given achievement for a given user
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <returns>Task of UserAchievementGroupResource</returns>
        System.Threading.Tasks.Task<UserAchievementGroupResource> GetUserProgressForAchievementUsingGETAsync (int? userId, string achievementName);

        /// <summary>
        /// Retrieve progress on a given achievement for a given user
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <returns>Task of ApiResponse (UserAchievementGroupResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAchievementGroupResource>> GetUserProgressForAchievementUsingGETAsyncWithHttpInfo (int? userId, string achievementName);
        /// <summary>
        /// Retrieve progress on achievements for a given user
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageUserAchievementGroupResource</returns>
        System.Threading.Tasks.Task<PageUserAchievementGroupResource> GetUserProgressUsingGETAsync (int? userId, bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);

        /// <summary>
        /// Retrieve progress on achievements for a given user
        /// </summary>
        /// <remarks>
        /// Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageUserAchievementGroupResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageUserAchievementGroupResource>> GetUserProgressUsingGETAsyncWithHttpInfo (int? userId, bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null);
        /// <summary>
        /// Update an achievement definition
        /// </summary>
        /// <remarks>
        /// The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAchievementUsingPUTAsync (string name, AchievementDefinitionResource achievement = null);

        /// <summary>
        /// Update an achievement definition
        /// </summary>
        /// <remarks>
        /// The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAchievementUsingPUTAsyncWithHttpInfo (string name, AchievementDefinitionResource achievement = null);
        /// <summary>
        /// Update or create an achievement progress record for a user
        /// </summary>
        /// <remarks>
        /// If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="request">The progress update details (optional)</param>
        /// <returns>Task of UserAchievementGroupResource</returns>
        System.Threading.Tasks.Task<UserAchievementGroupResource> UpdateProgressUsingPUTAsync (int? userId, string achievementName, AchievementProgressUpdateRequest request = null);

        /// <summary>
        /// Update or create an achievement progress record for a user
        /// </summary>
        /// <remarks>
        /// If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="request">The progress update details (optional)</param>
        /// <returns>Task of ApiResponse (UserAchievementGroupResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAchievementGroupResource>> UpdateProgressUsingPUTAsyncWithHttpInfo (int? userId, string achievementName, AchievementProgressUpdateRequest request = null);
        /// <summary>
        /// Update an achievement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTemplateUsingPUTAsync (string id, TemplateResource template = null);

        /// <summary>
        /// Update an achievement template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTemplateUsingPUTAsyncWithHttpInfo (string id, TemplateResource template = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GamificationAchievementsApi : IGamificationAchievementsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GamificationAchievementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GamificationAchievementsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamificationAchievementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GamificationAchievementsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new achievement definition If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>AchievementDefinitionResource</returns>
        public AchievementDefinitionResource CreateAchievementUsingPOST (AchievementDefinitionResource achievement = null)
        {
             ApiResponse<AchievementDefinitionResource> localVarResponse = CreateAchievementUsingPOSTWithHttpInfo(achievement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new achievement definition If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>ApiResponse of AchievementDefinitionResource</returns>
        public ApiResponse< AchievementDefinitionResource > CreateAchievementUsingPOSTWithHttpInfo (AchievementDefinitionResource achievement = null)
        {

            var localVarPath = "/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (achievement != null && achievement.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(achievement); // http body (model) parameter
            }
            else
            {
                localVarPostBody = achievement; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchievementUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchievementDefinitionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchievementDefinitionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchievementDefinitionResource)));
            
        }

        /// <summary>
        /// Create a new achievement definition If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>Task of AchievementDefinitionResource</returns>
        public async System.Threading.Tasks.Task<AchievementDefinitionResource> CreateAchievementUsingPOSTAsync (AchievementDefinitionResource achievement = null)
        {
             ApiResponse<AchievementDefinitionResource> localVarResponse = await CreateAchievementUsingPOSTAsyncWithHttpInfo(achievement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new achievement definition If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>Task of ApiResponse (AchievementDefinitionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchievementDefinitionResource>> CreateAchievementUsingPOSTAsyncWithHttpInfo (AchievementDefinitionResource achievement = null)
        {

            var localVarPath = "/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (achievement != null && achievement.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(achievement); // http body (model) parameter
            }
            else
            {
                localVarPostBody = achievement; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAchievementUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchievementDefinitionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchievementDefinitionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchievementDefinitionResource)));
            
        }

        /// <summary>
        /// Create an achievement template Achievement templates define a type of achievement and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The achievement template to be created (optional)</param>
        /// <returns>TemplateResource</returns>
        public TemplateResource CreateTemplateUsingPOST (TemplateResource template = null)
        {
             ApiResponse<TemplateResource> localVarResponse = CreateTemplateUsingPOSTWithHttpInfo(template);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an achievement template Achievement templates define a type of achievement and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The achievement template to be created (optional)</param>
        /// <returns>ApiResponse of TemplateResource</returns>
        public ApiResponse< TemplateResource > CreateTemplateUsingPOSTWithHttpInfo (TemplateResource template = null)
        {

            var localVarPath = "/achievements/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateResource)));
            
        }

        /// <summary>
        /// Create an achievement template Achievement templates define a type of achievement and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The achievement template to be created (optional)</param>
        /// <returns>Task of TemplateResource</returns>
        public async System.Threading.Tasks.Task<TemplateResource> CreateTemplateUsingPOSTAsync (TemplateResource template = null)
        {
             ApiResponse<TemplateResource> localVarResponse = await CreateTemplateUsingPOSTAsyncWithHttpInfo(template);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an achievement template Achievement templates define a type of achievement and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="template">The achievement template to be created (optional)</param>
        /// <returns>Task of ApiResponse (TemplateResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateResource>> CreateTemplateUsingPOSTAsyncWithHttpInfo (TemplateResource template = null)
        {

            var localVarPath = "/achievements/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTemplateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateResource)));
            
        }

        /// <summary>
        /// Delete an achievement template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns></returns>
        public void DeleteAchievementTemplateUsingDELETE (string id, string cascade = null)
        {
             DeleteAchievementTemplateUsingDELETEWithHttpInfo(id, cascade);
        }

        /// <summary>
        /// Delete an achievement template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAchievementTemplateUsingDELETEWithHttpInfo (string id, string cascade = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationAchievementsApi->DeleteAchievementTemplateUsingDELETE");

            var localVarPath = "/achievements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cascade != null) localVarQueryParams.Add("cascade", Configuration.ApiClient.ParameterToString(cascade)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAchievementTemplateUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an achievement template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAchievementTemplateUsingDELETEAsync (string id, string cascade = null)
        {
             await DeleteAchievementTemplateUsingDELETEAsyncWithHttpInfo(id, cascade);

        }

        /// <summary>
        /// Delete an achievement template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAchievementTemplateUsingDELETEAsyncWithHttpInfo (string id, string cascade = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationAchievementsApi->DeleteAchievementTemplateUsingDELETE");

            var localVarPath = "/achievements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cascade != null) localVarQueryParams.Add("cascade", Configuration.ApiClient.ParameterToString(cascade)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAchievementTemplateUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an achievement definition Will also disable the associated generated rule, if any.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns></returns>
        public void DeleteAchievementUsingDELETE (string name)
        {
             DeleteAchievementUsingDELETEWithHttpInfo(name);
        }

        /// <summary>
        /// Delete an achievement definition Will also disable the associated generated rule, if any.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAchievementUsingDELETEWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GamificationAchievementsApi->DeleteAchievementUsingDELETE");

            var localVarPath = "/achievements/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAchievementUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an achievement definition Will also disable the associated generated rule, if any.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAchievementUsingDELETEAsync (string name)
        {
             await DeleteAchievementUsingDELETEAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Delete an achievement definition Will also disable the associated generated rule, if any.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAchievementUsingDELETEAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GamificationAchievementsApi->DeleteAchievementUsingDELETE");

            var localVarPath = "/achievements/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAchievementUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a list of derived achievements Used by other services that depend on achievements
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the derived achievement</param>
        /// <returns>List&lt;AchievementDefinitionResource&gt;</returns>
        public List<AchievementDefinitionResource> FindAllByGroupNameUsingGET (string name)
        {
             ApiResponse<List<AchievementDefinitionResource>> localVarResponse = FindAllByGroupNameUsingGETWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of derived achievements Used by other services that depend on achievements
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the derived achievement</param>
        /// <returns>ApiResponse of List&lt;AchievementDefinitionResource&gt;</returns>
        public ApiResponse< List<AchievementDefinitionResource> > FindAllByGroupNameUsingGETWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GamificationAchievementsApi->FindAllByGroupNameUsingGET");

            var localVarPath = "/achievements/derived/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllByGroupNameUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AchievementDefinitionResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AchievementDefinitionResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AchievementDefinitionResource>)));
            
        }

        /// <summary>
        /// Get a list of derived achievements Used by other services that depend on achievements
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the derived achievement</param>
        /// <returns>Task of List&lt;AchievementDefinitionResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<AchievementDefinitionResource>> FindAllByGroupNameUsingGETAsync (string name)
        {
             ApiResponse<List<AchievementDefinitionResource>> localVarResponse = await FindAllByGroupNameUsingGETAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of derived achievements Used by other services that depend on achievements
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the derived achievement</param>
        /// <returns>Task of ApiResponse (List&lt;AchievementDefinitionResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AchievementDefinitionResource>>> FindAllByGroupNameUsingGETAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GamificationAchievementsApi->FindAllByGroupNameUsingGET");

            var localVarPath = "/achievements/derived/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAllByGroupNameUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AchievementDefinitionResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AchievementDefinitionResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AchievementDefinitionResource>)));
            
        }

        /// <summary>
        /// Get a single achievement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>TemplateResource</returns>
        public TemplateResource GetAchievementTemplateUsingGET (string id)
        {
             ApiResponse<TemplateResource> localVarResponse = GetAchievementTemplateUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single achievement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>ApiResponse of TemplateResource</returns>
        public ApiResponse< TemplateResource > GetAchievementTemplateUsingGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationAchievementsApi->GetAchievementTemplateUsingGET");

            var localVarPath = "/achievements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementTemplateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateResource)));
            
        }

        /// <summary>
        /// Get a single achievement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of TemplateResource</returns>
        public async System.Threading.Tasks.Task<TemplateResource> GetAchievementTemplateUsingGETAsync (string id)
        {
             ApiResponse<TemplateResource> localVarResponse = await GetAchievementTemplateUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single achievement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of ApiResponse (TemplateResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateResource>> GetAchievementTemplateUsingGETAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationAchievementsApi->GetAchievementTemplateUsingGET");

            var localVarPath = "/achievements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementTemplateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateResource)));
            
        }

        /// <summary>
        /// List and search achievement templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>PageTemplateResource</returns>
        public PageTemplateResource GetAchievementTemplatesUsingGET (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageTemplateResource> localVarResponse = GetAchievementTemplatesUsingGETWithHttpInfo(size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List and search achievement templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>ApiResponse of PageTemplateResource</returns>
        public ApiResponse< PageTemplateResource > GetAchievementTemplatesUsingGETWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/achievements/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementTemplatesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageTemplateResource)));
            
        }

        /// <summary>
        /// List and search achievement templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of PageTemplateResource</returns>
        public async System.Threading.Tasks.Task<PageTemplateResource> GetAchievementTemplatesUsingGETAsync (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageTemplateResource> localVarResponse = await GetAchievementTemplatesUsingGETAsyncWithHttpInfo(size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List and search achievement templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageTemplateResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageTemplateResource>> GetAchievementTemplatesUsingGETAsyncWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/achievements/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementTemplatesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageTemplateResource)));
            
        }

        /// <summary>
        /// Get a single achievement definition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>AchievementDefinitionResource</returns>
        public AchievementDefinitionResource GetAchievementUsingGET (string name)
        {
             ApiResponse<AchievementDefinitionResource> localVarResponse = GetAchievementUsingGETWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single achievement definition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>ApiResponse of AchievementDefinitionResource</returns>
        public ApiResponse< AchievementDefinitionResource > GetAchievementUsingGETWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GamificationAchievementsApi->GetAchievementUsingGET");

            var localVarPath = "/achievements/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchievementDefinitionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchievementDefinitionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchievementDefinitionResource)));
            
        }

        /// <summary>
        /// Get a single achievement definition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>Task of AchievementDefinitionResource</returns>
        public async System.Threading.Tasks.Task<AchievementDefinitionResource> GetAchievementUsingGETAsync (string name)
        {
             ApiResponse<AchievementDefinitionResource> localVarResponse = await GetAchievementUsingGETAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single achievement definition 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <returns>Task of ApiResponse (AchievementDefinitionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AchievementDefinitionResource>> GetAchievementUsingGETAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GamificationAchievementsApi->GetAchievementUsingGET");

            var localVarPath = "/achievements/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AchievementDefinitionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AchievementDefinitionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AchievementDefinitionResource)));
            
        }

        /// <summary>
        /// Get all achievement definitions in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="filterDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>PageAchievementDefinitionResource</returns>
        public PageAchievementDefinitionResource GetAchievementsUsingGET (string filterTagset = null, string filterName = null, bool? filterHidden = null, bool? filterDerived = null, int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageAchievementDefinitionResource> localVarResponse = GetAchievementsUsingGETWithHttpInfo(filterTagset, filterName, filterHidden, filterDerived, size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all achievement definitions in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="filterDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>ApiResponse of PageAchievementDefinitionResource</returns>
        public ApiResponse< PageAchievementDefinitionResource > GetAchievementsUsingGETWithHttpInfo (string filterTagset = null, string filterName = null, bool? filterHidden = null, bool? filterDerived = null, int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterName != null) localVarQueryParams.Add("filter_name", Configuration.ApiClient.ParameterToString(filterName)); // query parameter
            if (filterHidden != null) localVarQueryParams.Add("filter_hidden", Configuration.ApiClient.ParameterToString(filterHidden)); // query parameter
            if (filterDerived != null) localVarQueryParams.Add("filter_derived", Configuration.ApiClient.ParameterToString(filterDerived)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAchievementDefinitionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAchievementDefinitionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAchievementDefinitionResource)));
            
        }

        /// <summary>
        /// Get all achievement definitions in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="filterDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of PageAchievementDefinitionResource</returns>
        public async System.Threading.Tasks.Task<PageAchievementDefinitionResource> GetAchievementsUsingGETAsync (string filterTagset = null, string filterName = null, bool? filterHidden = null, bool? filterDerived = null, int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageAchievementDefinitionResource> localVarResponse = await GetAchievementsUsingGETAsyncWithHttpInfo(filterTagset, filterName, filterHidden, filterDerived, size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all achievement definitions in the system 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="filterDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageAchievementDefinitionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAchievementDefinitionResource>> GetAchievementsUsingGETAsyncWithHttpInfo (string filterTagset = null, string filterName = null, bool? filterHidden = null, bool? filterDerived = null, int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterName != null) localVarQueryParams.Add("filter_name", Configuration.ApiClient.ParameterToString(filterName)); // query parameter
            if (filterHidden != null) localVarQueryParams.Add("filter_hidden", Configuration.ApiClient.ParameterToString(filterHidden)); // query parameter
            if (filterDerived != null) localVarQueryParams.Add("filter_derived", Configuration.ApiClient.ParameterToString(filterDerived)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAchievementsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAchievementDefinitionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAchievementDefinitionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAchievementDefinitionResource)));
            
        }

        /// <summary>
        /// Retrieve progress on a given achievement for all users Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageUserAchievementGroupResource</returns>
        public PageUserAchievementGroupResource GetAllUserProgressForAchievementUsingGET (string achievementName, bool? filterAchievementDerived = null, string filterAchievementTagset = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {
             ApiResponse<PageUserAchievementGroupResource> localVarResponse = GetAllUserProgressForAchievementUsingGETWithHttpInfo(achievementName, filterAchievementDerived, filterAchievementTagset, filterAchievementHidden, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve progress on a given achievement for all users Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageUserAchievementGroupResource</returns>
        public ApiResponse< PageUserAchievementGroupResource > GetAllUserProgressForAchievementUsingGETWithHttpInfo (string achievementName, bool? filterAchievementDerived = null, string filterAchievementTagset = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'achievementName' is set
            if (achievementName == null)
                throw new ApiException(400, "Missing required parameter 'achievementName' when calling GamificationAchievementsApi->GetAllUserProgressForAchievementUsingGET");

            var localVarPath = "/users/achievements/{achievement_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (achievementName != null) localVarPathParams.Add("achievement_name", Configuration.ApiClient.ParameterToString(achievementName)); // path parameter
            if (filterAchievementDerived != null) localVarQueryParams.Add("filter_achievement_derived", Configuration.ApiClient.ParameterToString(filterAchievementDerived)); // query parameter
            if (filterAchievementTagset != null) localVarQueryParams.Add("filter_achievement_tagset", Configuration.ApiClient.ParameterToString(filterAchievementTagset)); // query parameter
            if (filterAchievementHidden != null) localVarQueryParams.Add("filter_achievement_hidden", Configuration.ApiClient.ParameterToString(filterAchievementHidden)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUserProgressForAchievementUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageUserAchievementGroupResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageUserAchievementGroupResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageUserAchievementGroupResource)));
            
        }

        /// <summary>
        /// Retrieve progress on a given achievement for all users Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageUserAchievementGroupResource</returns>
        public async System.Threading.Tasks.Task<PageUserAchievementGroupResource> GetAllUserProgressForAchievementUsingGETAsync (string achievementName, bool? filterAchievementDerived = null, string filterAchievementTagset = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {
             ApiResponse<PageUserAchievementGroupResource> localVarResponse = await GetAllUserProgressForAchievementUsingGETAsyncWithHttpInfo(achievementName, filterAchievementDerived, filterAchievementTagset, filterAchievementHidden, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve progress on a given achievement for all users Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageUserAchievementGroupResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageUserAchievementGroupResource>> GetAllUserProgressForAchievementUsingGETAsyncWithHttpInfo (string achievementName, bool? filterAchievementDerived = null, string filterAchievementTagset = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'achievementName' is set
            if (achievementName == null)
                throw new ApiException(400, "Missing required parameter 'achievementName' when calling GamificationAchievementsApi->GetAllUserProgressForAchievementUsingGET");

            var localVarPath = "/users/achievements/{achievement_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (achievementName != null) localVarPathParams.Add("achievement_name", Configuration.ApiClient.ParameterToString(achievementName)); // path parameter
            if (filterAchievementDerived != null) localVarQueryParams.Add("filter_achievement_derived", Configuration.ApiClient.ParameterToString(filterAchievementDerived)); // query parameter
            if (filterAchievementTagset != null) localVarQueryParams.Add("filter_achievement_tagset", Configuration.ApiClient.ParameterToString(filterAchievementTagset)); // query parameter
            if (filterAchievementHidden != null) localVarQueryParams.Add("filter_achievement_hidden", Configuration.ApiClient.ParameterToString(filterAchievementHidden)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUserProgressForAchievementUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageUserAchievementGroupResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageUserAchievementGroupResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageUserAchievementGroupResource)));
            
        }

        /// <summary>
        /// Retrieve progress on achievements for all users Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageUserAchievementGroupResource</returns>
        public PageUserAchievementGroupResource GetAllUserProgressUsingGET (bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {
             ApiResponse<PageUserAchievementGroupResource> localVarResponse = GetAllUserProgressUsingGETWithHttpInfo(filterAchievementDerived, filterAchievementTagset, filterAchievementName, filterAchievementHidden, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve progress on achievements for all users Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageUserAchievementGroupResource</returns>
        public ApiResponse< PageUserAchievementGroupResource > GetAllUserProgressUsingGETWithHttpInfo (bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {

            var localVarPath = "/users/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterAchievementDerived != null) localVarQueryParams.Add("filter_achievement_derived", Configuration.ApiClient.ParameterToString(filterAchievementDerived)); // query parameter
            if (filterAchievementTagset != null) localVarQueryParams.Add("filter_achievement_tagset", Configuration.ApiClient.ParameterToString(filterAchievementTagset)); // query parameter
            if (filterAchievementName != null) localVarQueryParams.Add("filter_achievement_name", Configuration.ApiClient.ParameterToString(filterAchievementName)); // query parameter
            if (filterAchievementHidden != null) localVarQueryParams.Add("filter_achievement_hidden", Configuration.ApiClient.ParameterToString(filterAchievementHidden)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUserProgressUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageUserAchievementGroupResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageUserAchievementGroupResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageUserAchievementGroupResource)));
            
        }

        /// <summary>
        /// Retrieve progress on achievements for all users Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageUserAchievementGroupResource</returns>
        public async System.Threading.Tasks.Task<PageUserAchievementGroupResource> GetAllUserProgressUsingGETAsync (bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {
             ApiResponse<PageUserAchievementGroupResource> localVarResponse = await GetAllUserProgressUsingGETAsyncWithHttpInfo(filterAchievementDerived, filterAchievementTagset, filterAchievementName, filterAchievementHidden, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve progress on achievements for all users Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageUserAchievementGroupResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageUserAchievementGroupResource>> GetAllUserProgressUsingGETAsyncWithHttpInfo (bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {

            var localVarPath = "/users/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterAchievementDerived != null) localVarQueryParams.Add("filter_achievement_derived", Configuration.ApiClient.ParameterToString(filterAchievementDerived)); // query parameter
            if (filterAchievementTagset != null) localVarQueryParams.Add("filter_achievement_tagset", Configuration.ApiClient.ParameterToString(filterAchievementTagset)); // query parameter
            if (filterAchievementName != null) localVarQueryParams.Add("filter_achievement_name", Configuration.ApiClient.ParameterToString(filterAchievementName)); // query parameter
            if (filterAchievementHidden != null) localVarQueryParams.Add("filter_achievement_hidden", Configuration.ApiClient.ParameterToString(filterAchievementHidden)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllUserProgressUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageUserAchievementGroupResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageUserAchievementGroupResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageUserAchievementGroupResource)));
            
        }

        /// <summary>
        /// Get the list of triggers that can be used to trigger an achievement progress update 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;BreTriggerResource&gt;</returns>
        public List<BreTriggerResource> GetAvailableTriggersUsingGET ()
        {
             ApiResponse<List<BreTriggerResource>> localVarResponse = GetAvailableTriggersUsingGETWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of triggers that can be used to trigger an achievement progress update 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;BreTriggerResource&gt;</returns>
        public ApiResponse< List<BreTriggerResource> > GetAvailableTriggersUsingGETWithHttpInfo ()
        {

            var localVarPath = "/achievements/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableTriggersUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BreTriggerResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BreTriggerResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BreTriggerResource>)));
            
        }

        /// <summary>
        /// Get the list of triggers that can be used to trigger an achievement progress update 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;BreTriggerResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<BreTriggerResource>> GetAvailableTriggersUsingGETAsync ()
        {
             ApiResponse<List<BreTriggerResource>> localVarResponse = await GetAvailableTriggersUsingGETAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the list of triggers that can be used to trigger an achievement progress update 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;BreTriggerResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BreTriggerResource>>> GetAvailableTriggersUsingGETAsyncWithHttpInfo ()
        {

            var localVarPath = "/achievements/triggers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableTriggersUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BreTriggerResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BreTriggerResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BreTriggerResource>)));
            
        }

        /// <summary>
        /// Retrieve progress on a given achievement for a given user Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <returns>UserAchievementGroupResource</returns>
        public UserAchievementGroupResource GetUserProgressForAchievementUsingGET (int? userId, string achievementName)
        {
             ApiResponse<UserAchievementGroupResource> localVarResponse = GetUserProgressForAchievementUsingGETWithHttpInfo(userId, achievementName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve progress on a given achievement for a given user Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <returns>ApiResponse of UserAchievementGroupResource</returns>
        public ApiResponse< UserAchievementGroupResource > GetUserProgressForAchievementUsingGETWithHttpInfo (int? userId, string achievementName)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GamificationAchievementsApi->GetUserProgressForAchievementUsingGET");
            // verify the required parameter 'achievementName' is set
            if (achievementName == null)
                throw new ApiException(400, "Missing required parameter 'achievementName' when calling GamificationAchievementsApi->GetUserProgressForAchievementUsingGET");

            var localVarPath = "/users/{user_id}/achievements/{achievement_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (achievementName != null) localVarPathParams.Add("achievement_name", Configuration.ApiClient.ParameterToString(achievementName)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProgressForAchievementUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAchievementGroupResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAchievementGroupResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAchievementGroupResource)));
            
        }

        /// <summary>
        /// Retrieve progress on a given achievement for a given user Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <returns>Task of UserAchievementGroupResource</returns>
        public async System.Threading.Tasks.Task<UserAchievementGroupResource> GetUserProgressForAchievementUsingGETAsync (int? userId, string achievementName)
        {
             ApiResponse<UserAchievementGroupResource> localVarResponse = await GetUserProgressForAchievementUsingGETAsyncWithHttpInfo(userId, achievementName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve progress on a given achievement for a given user Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <returns>Task of ApiResponse (UserAchievementGroupResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAchievementGroupResource>> GetUserProgressForAchievementUsingGETAsyncWithHttpInfo (int? userId, string achievementName)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GamificationAchievementsApi->GetUserProgressForAchievementUsingGET");
            // verify the required parameter 'achievementName' is set
            if (achievementName == null)
                throw new ApiException(400, "Missing required parameter 'achievementName' when calling GamificationAchievementsApi->GetUserProgressForAchievementUsingGET");

            var localVarPath = "/users/{user_id}/achievements/{achievement_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (achievementName != null) localVarPathParams.Add("achievement_name", Configuration.ApiClient.ParameterToString(achievementName)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProgressForAchievementUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAchievementGroupResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAchievementGroupResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAchievementGroupResource)));
            
        }

        /// <summary>
        /// Retrieve progress on achievements for a given user Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>PageUserAchievementGroupResource</returns>
        public PageUserAchievementGroupResource GetUserProgressUsingGET (int? userId, bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {
             ApiResponse<PageUserAchievementGroupResource> localVarResponse = GetUserProgressUsingGETWithHttpInfo(userId, filterAchievementDerived, filterAchievementTagset, filterAchievementName, filterAchievementHidden, size, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve progress on achievements for a given user Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>ApiResponse of PageUserAchievementGroupResource</returns>
        public ApiResponse< PageUserAchievementGroupResource > GetUserProgressUsingGETWithHttpInfo (int? userId, bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GamificationAchievementsApi->GetUserProgressUsingGET");

            var localVarPath = "/users/{user_id}/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (filterAchievementDerived != null) localVarQueryParams.Add("filter_achievement_derived", Configuration.ApiClient.ParameterToString(filterAchievementDerived)); // query parameter
            if (filterAchievementTagset != null) localVarQueryParams.Add("filter_achievement_tagset", Configuration.ApiClient.ParameterToString(filterAchievementTagset)); // query parameter
            if (filterAchievementName != null) localVarQueryParams.Add("filter_achievement_name", Configuration.ApiClient.ParameterToString(filterAchievementName)); // query parameter
            if (filterAchievementHidden != null) localVarQueryParams.Add("filter_achievement_hidden", Configuration.ApiClient.ParameterToString(filterAchievementHidden)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProgressUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageUserAchievementGroupResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageUserAchievementGroupResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageUserAchievementGroupResource)));
            
        }

        /// <summary>
        /// Retrieve progress on achievements for a given user Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of PageUserAchievementGroupResource</returns>
        public async System.Threading.Tasks.Task<PageUserAchievementGroupResource> GetUserProgressUsingGETAsync (int? userId, bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {
             ApiResponse<PageUserAchievementGroupResource> localVarResponse = await GetUserProgressUsingGETAsyncWithHttpInfo(userId, filterAchievementDerived, filterAchievementTagset, filterAchievementName, filterAchievementHidden, size, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve progress on achievements for a given user Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="filterAchievementDerived">Filter for achievements that are derived from other services (optional)</param>
        /// <param name="filterAchievementTagset">Filter for achievements with specified tags (separated by comma) (optional)</param>
        /// <param name="filterAchievementName">Filter for achievements whose name contains a string (optional)</param>
        /// <param name="filterAchievementHidden">Filter for achievements that are hidden or not (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <returns>Task of ApiResponse (PageUserAchievementGroupResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageUserAchievementGroupResource>> GetUserProgressUsingGETAsyncWithHttpInfo (int? userId, bool? filterAchievementDerived = null, string filterAchievementTagset = null, string filterAchievementName = null, bool? filterAchievementHidden = null, int? size = null, int? page = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GamificationAchievementsApi->GetUserProgressUsingGET");

            var localVarPath = "/users/{user_id}/achievements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (filterAchievementDerived != null) localVarQueryParams.Add("filter_achievement_derived", Configuration.ApiClient.ParameterToString(filterAchievementDerived)); // query parameter
            if (filterAchievementTagset != null) localVarQueryParams.Add("filter_achievement_tagset", Configuration.ApiClient.ParameterToString(filterAchievementTagset)); // query parameter
            if (filterAchievementName != null) localVarQueryParams.Add("filter_achievement_name", Configuration.ApiClient.ParameterToString(filterAchievementName)); // query parameter
            if (filterAchievementHidden != null) localVarQueryParams.Add("filter_achievement_hidden", Configuration.ApiClient.ParameterToString(filterAchievementHidden)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserProgressUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageUserAchievementGroupResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageUserAchievementGroupResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageUserAchievementGroupResource)));
            
        }

        /// <summary>
        /// Update an achievement definition The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns></returns>
        public void UpdateAchievementUsingPUT (string name, AchievementDefinitionResource achievement = null)
        {
             UpdateAchievementUsingPUTWithHttpInfo(name, achievement);
        }

        /// <summary>
        /// Update an achievement definition The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAchievementUsingPUTWithHttpInfo (string name, AchievementDefinitionResource achievement = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GamificationAchievementsApi->UpdateAchievementUsingPUT");

            var localVarPath = "/achievements/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (achievement != null && achievement.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(achievement); // http body (model) parameter
            }
            else
            {
                localVarPostBody = achievement; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAchievementUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an achievement definition The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAchievementUsingPUTAsync (string name, AchievementDefinitionResource achievement = null)
        {
             await UpdateAchievementUsingPUTAsyncWithHttpInfo(name, achievement);

        }

        /// <summary>
        /// Update an achievement definition The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the achievement</param>
        /// <param name="achievement">The achievement definition (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAchievementUsingPUTAsyncWithHttpInfo (string name, AchievementDefinitionResource achievement = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GamificationAchievementsApi->UpdateAchievementUsingPUT");

            var localVarPath = "/achievements/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (achievement != null && achievement.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(achievement); // http body (model) parameter
            }
            else
            {
                localVarPostBody = achievement; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAchievementUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update or create an achievement progress record for a user If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="request">The progress update details (optional)</param>
        /// <returns>UserAchievementGroupResource</returns>
        public UserAchievementGroupResource UpdateProgressUsingPUT (int? userId, string achievementName, AchievementProgressUpdateRequest request = null)
        {
             ApiResponse<UserAchievementGroupResource> localVarResponse = UpdateProgressUsingPUTWithHttpInfo(userId, achievementName, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update or create an achievement progress record for a user If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="request">The progress update details (optional)</param>
        /// <returns>ApiResponse of UserAchievementGroupResource</returns>
        public ApiResponse< UserAchievementGroupResource > UpdateProgressUsingPUTWithHttpInfo (int? userId, string achievementName, AchievementProgressUpdateRequest request = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GamificationAchievementsApi->UpdateProgressUsingPUT");
            // verify the required parameter 'achievementName' is set
            if (achievementName == null)
                throw new ApiException(400, "Missing required parameter 'achievementName' when calling GamificationAchievementsApi->UpdateProgressUsingPUT");

            var localVarPath = "/users/{user_id}/achievements/{achievement_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (achievementName != null) localVarPathParams.Add("achievement_name", Configuration.ApiClient.ParameterToString(achievementName)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProgressUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAchievementGroupResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAchievementGroupResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAchievementGroupResource)));
            
        }

        /// <summary>
        /// Update or create an achievement progress record for a user If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="request">The progress update details (optional)</param>
        /// <returns>Task of UserAchievementGroupResource</returns>
        public async System.Threading.Tasks.Task<UserAchievementGroupResource> UpdateProgressUsingPUTAsync (int? userId, string achievementName, AchievementProgressUpdateRequest request = null)
        {
             ApiResponse<UserAchievementGroupResource> localVarResponse = await UpdateProgressUsingPUTAsyncWithHttpInfo(userId, achievementName, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update or create an achievement progress record for a user If no progress record yet exists for the user, it will be created. Otherwise it will be updated. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">The user&#39;s id</param>
        /// <param name="achievementName">The achievement&#39;s name</param>
        /// <param name="request">The progress update details (optional)</param>
        /// <returns>Task of ApiResponse (UserAchievementGroupResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAchievementGroupResource>> UpdateProgressUsingPUTAsyncWithHttpInfo (int? userId, string achievementName, AchievementProgressUpdateRequest request = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling GamificationAchievementsApi->UpdateProgressUsingPUT");
            // verify the required parameter 'achievementName' is set
            if (achievementName == null)
                throw new ApiException(400, "Missing required parameter 'achievementName' when calling GamificationAchievementsApi->UpdateProgressUsingPUT");

            var localVarPath = "/users/{user_id}/achievements/{achievement_name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userId != null) localVarPathParams.Add("user_id", Configuration.ApiClient.ParameterToString(userId)); // path parameter
            if (achievementName != null) localVarPathParams.Add("achievement_name", Configuration.ApiClient.ParameterToString(achievementName)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProgressUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserAchievementGroupResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserAchievementGroupResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserAchievementGroupResource)));
            
        }

        /// <summary>
        /// Update an achievement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns></returns>
        public void UpdateTemplateUsingPUT (string id, TemplateResource template = null)
        {
             UpdateTemplateUsingPUTWithHttpInfo(id, template);
        }

        /// <summary>
        /// Update an achievement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateTemplateUsingPUTWithHttpInfo (string id, TemplateResource template = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationAchievementsApi->UpdateTemplateUsingPUT");

            var localVarPath = "/achievements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an achievement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTemplateUsingPUTAsync (string id, TemplateResource template = null)
        {
             await UpdateTemplateUsingPUTAsyncWithHttpInfo(id, template);

        }

        /// <summary>
        /// Update an achievement template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="template">The updated template (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTemplateUsingPUTAsyncWithHttpInfo (string id, TemplateResource template = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationAchievementsApi->UpdateTemplateUsingPUT");

            var localVarPath = "/achievements/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTemplateUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
