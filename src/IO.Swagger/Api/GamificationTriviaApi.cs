/* 
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGamificationTriviaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an answer to a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="answer">The new answer (optional)</param>
        /// <returns>AnswerResource</returns>
        AnswerResource AddAnswersUsingPOST (string questionId, AnswerResource answer = null);

        /// <summary>
        /// Add an answer to a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="answer">The new answer (optional)</param>
        /// <returns>ApiResponse of AnswerResource</returns>
        ApiResponse<AnswerResource> AddAnswersUsingPOSTWithHttpInfo (string questionId, AnswerResource answer = null);
        /// <summary>
        /// Add a tag to a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The new tag (optional)</param>
        /// <returns></returns>
        void AddTagUsingPOST (string id, string tag = null);

        /// <summary>
        /// Add a tag to a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The new tag (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddTagUsingPOSTWithHttpInfo (string id, string tag = null);
        /// <summary>
        /// Add a tag to a batch of questions
        /// </summary>
        /// <remarks>
        /// All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to add (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>int?</returns>
        int? BatchAddTagUsingPOST (string tag = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);

        /// <summary>
        /// Add a tag to a batch of questions
        /// </summary>
        /// <remarks>
        /// All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to add (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> BatchAddTagUsingPOSTWithHttpInfo (string tag = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);
        /// <summary>
        /// Remove a tag from a batch of questions
        /// </summary>
        /// <remarks>
        /// ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to remove</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>int?</returns>
        int? BatchRemoveTagUsingDELETE (string tag, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);

        /// <summary>
        /// Remove a tag from a batch of questions
        /// </summary>
        /// <remarks>
        /// ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to remove</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> BatchRemoveTagUsingDELETEWithHttpInfo (string tag, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);
        /// <summary>
        /// Bulk update questions
        /// </summary>
        /// <remarks>
        /// Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">New values for a set of question fields (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>int?</returns>
        int? BulkUpdateUsingPUT (QuestionResource question = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);

        /// <summary>
        /// Bulk update questions
        /// </summary>
        /// <remarks>
        /// Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">New values for a set of question fields (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> BulkUpdateUsingPUTWithHttpInfo (QuestionResource question = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);
        /// <summary>
        /// Count questions based on filters.
        /// </summary>
        /// <remarks>
        /// This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <returns>long?</returns>
        long? CountQuestionsUsingGET (string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null);

        /// <summary>
        /// Count questions based on filters.
        /// </summary>
        /// <remarks>
        /// This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CountQuestionsUsingGETWithHttpInfo (string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null);
        /// <summary>
        /// Create a question template
        /// </summary>
        /// <remarks>
        /// Question templates define a type of question and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>QuestionTemplateResource</returns>
        QuestionTemplateResource CreateQuestionTemplateUsingPOST (QuestionTemplateResource questionTemplateResource = null);

        /// <summary>
        /// Create a question template
        /// </summary>
        /// <remarks>
        /// Question templates define a type of question and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>ApiResponse of QuestionTemplateResource</returns>
        ApiResponse<QuestionTemplateResource> CreateQuestionTemplateUsingPOSTWithHttpInfo (QuestionTemplateResource questionTemplateResource = null);
        /// <summary>
        /// Create a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">The new question (optional)</param>
        /// <returns>QuestionResource</returns>
        QuestionResource CreateQuestionUsingPOST (QuestionResource question = null);

        /// <summary>
        /// Create a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">The new question (optional)</param>
        /// <returns>ApiResponse of QuestionResource</returns>
        ApiResponse<QuestionResource> CreateQuestionUsingPOSTWithHttpInfo (QuestionResource question = null);
        /// <summary>
        /// Create an import job
        /// </summary>
        /// <remarks>
        /// Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The new import job (optional)</param>
        /// <returns>ImportJobResource</returns>
        ImportJobResource CreateUsingPOST (ImportJobResource request = null);

        /// <summary>
        /// Create an import job
        /// </summary>
        /// <remarks>
        /// Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The new import job (optional)</param>
        /// <returns>ApiResponse of ImportJobResource</returns>
        ApiResponse<ImportJobResource> CreateUsingPOSTWithHttpInfo (ImportJobResource request = null);
        /// <summary>
        /// Delete a question template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns></returns>
        void DeleteQuestionTemplateUsingDELETE (string id, string cascade = null);

        /// <summary>
        /// Delete a question template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQuestionTemplateUsingDELETEWithHttpInfo (string id, string cascade = null);
        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns></returns>
        void DeleteQuestionUsingDELETE (string id);

        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteQuestionUsingDELETEWithHttpInfo (string id);
        /// <summary>
        /// Delete an import job
        /// </summary>
        /// <remarks>
        /// Also deletes all questions that were imported by it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns></returns>
        void DeleteUsingDELETE (long? id);

        /// <summary>
        /// Delete an import job
        /// </summary>
        /// <remarks>
        /// Also deletes all questions that were imported by it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUsingDELETEWithHttpInfo (long? id);
        /// <summary>
        /// Get an answer for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>AnswerResource</returns>
        AnswerResource GetAnswerUsingGET (string questionId, string id);

        /// <summary>
        /// Get an answer for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>ApiResponse of AnswerResource</returns>
        ApiResponse<AnswerResource> GetAnswerUsingGETWithHttpInfo (string questionId, string id);
        /// <summary>
        /// List the answers available for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <returns>List&lt;AnswerResource&gt;</returns>
        List<AnswerResource> GetAnswersUsingGET (string questionId);

        /// <summary>
        /// List the answers available for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <returns>ApiResponse of List&lt;AnswerResource&gt;</returns>
        ApiResponse<List<AnswerResource>> GetAnswersUsingGETWithHttpInfo (string questionId);
        /// <summary>
        /// Get a list of import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVendor">Filter for jobs by vendor id (optional)</param>
        /// <param name="filterCategory">Filter for jobs by category id (optional)</param>
        /// <param name="filterName">Filter for jobs which name *STARTS* with the given string (optional)</param>
        /// <param name="filterStatus">Filter for jobs that are in a specific set of statuses (comma separated) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceImportJobResource</returns>
        PageResourceImportJobResource GetListUsingGET1 (string filterVendor = null, string filterCategory = null, string filterName = null, string filterStatus = null, int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Get a list of import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVendor">Filter for jobs by vendor id (optional)</param>
        /// <param name="filterCategory">Filter for jobs by category id (optional)</param>
        /// <param name="filterName">Filter for jobs which name *STARTS* with the given string (optional)</param>
        /// <param name="filterStatus">Filter for jobs that are in a specific set of statuses (comma separated) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceImportJobResource</returns>
        ApiResponse<PageResourceImportJobResource> GetListUsingGET1WithHttpInfo (string filterVendor = null, string filterCategory = null, string filterName = null, string filterStatus = null, int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get a single question template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>QuestionTemplateResource</returns>
        QuestionTemplateResource GetQuestionTemplateUsingGET (string id);

        /// <summary>
        /// Get a single question template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>ApiResponse of QuestionTemplateResource</returns>
        ApiResponse<QuestionTemplateResource> GetQuestionTemplateUsingGETWithHttpInfo (string id);
        /// <summary>
        /// List and search question templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceQuestionTemplateResource</returns>
        PageResourceQuestionTemplateResource GetQuestionTemplatesUsingGET (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search question templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceQuestionTemplateResource</returns>
        ApiResponse<PageResourceQuestionTemplateResource> GetQuestionTemplatesUsingGETWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get a single question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>QuestionResource</returns>
        QuestionResource GetQuestionUsingGET (string id);

        /// <summary>
        /// Get a single question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>ApiResponse of QuestionResource</returns>
        ApiResponse<QuestionResource> GetQuestionUsingGETWithHttpInfo (string id);
        /// <summary>
        /// List question deltas in ascending order of updated date
        /// </summary>
        /// <remarks>
        /// The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Timestamp in seconds (optional)</param>
        /// <returns>List&lt;DeltaResource&gt;</returns>
        List<DeltaResource> GetQuestionsDeltaUsingGET (long? since = null);

        /// <summary>
        /// List question deltas in ascending order of updated date
        /// </summary>
        /// <remarks>
        /// The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Timestamp in seconds (optional)</param>
        /// <returns>ApiResponse of List&lt;DeltaResource&gt;</returns>
        ApiResponse<List<DeltaResource>> GetQuestionsDeltaUsingGETWithHttpInfo (long? since = null);
        /// <summary>
        /// List and search questions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>PageResourceQuestionResource</returns>
        PageResourceQuestionResource GetQuestionsUsingGET (int? size = null, int? page = null, string order = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);

        /// <summary>
        /// List and search questions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>ApiResponse of PageResourceQuestionResource</returns>
        ApiResponse<PageResourceQuestionResource> GetQuestionsUsingGETWithHttpInfo (int? size = null, int? page = null, string order = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);
        /// <summary>
        /// List the tags for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetTagsUsingGET1 (string id);

        /// <summary>
        /// List the tags for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetTagsUsingGET1WithHttpInfo (string id);
        /// <summary>
        /// List and search tags by the beginning of the string
        /// </summary>
        /// <remarks>
        /// For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for tags starting with the given text (optional)</param>
        /// <param name="filterCategory">Filter for tags on questions from a specific category (optional)</param>
        /// <param name="filterImportId">Filter for tags on questions from a specific import job (optional)</param>
        /// <returns>Collectionstring</returns>
        Collectionstring GetTagsUsingGET2 (string filterSearch = null, string filterCategory = null, long? filterImportId = null);

        /// <summary>
        /// List and search tags by the beginning of the string
        /// </summary>
        /// <remarks>
        /// For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for tags starting with the given text (optional)</param>
        /// <param name="filterCategory">Filter for tags on questions from a specific category (optional)</param>
        /// <param name="filterImportId">Filter for tags on questions from a specific import job (optional)</param>
        /// <returns>ApiResponse of Collectionstring</returns>
        ApiResponse<Collectionstring> GetTagsUsingGET2WithHttpInfo (string filterSearch = null, string filterCategory = null, long? filterImportId = null);
        /// <summary>
        /// Get an import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>ImportJobResource</returns>
        ImportJobResource GetUsingGET (long? id);

        /// <summary>
        /// Get an import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>ApiResponse of ImportJobResource</returns>
        ApiResponse<ImportJobResource> GetUsingGETWithHttpInfo (long? id);
        /// <summary>
        /// Remove an answer from a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns></returns>
        void RemoveAnswersUsingDELETE (string questionId, string id);

        /// <summary>
        /// Remove an answer from a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAnswersUsingDELETEWithHttpInfo (string questionId, string id);
        /// <summary>
        /// Remove a tag from a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The tag to remove</param>
        /// <returns></returns>
        void RemoveTagUsingDELETE (string id, string tag);

        /// <summary>
        /// Remove a tag from a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The tag to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveTagUsingDELETEWithHttpInfo (string id, string tag);
        /// <summary>
        /// Start processing an import job
        /// </summary>
        /// <remarks>
        /// Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="publishNow">Whether the new questions should be published live immediately</param>
        /// <returns>ImportJobResource</returns>
        ImportJobResource StartProcessUsingPOST (long? id, bool? publishNow);

        /// <summary>
        /// Start processing an import job
        /// </summary>
        /// <remarks>
        /// Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="publishNow">Whether the new questions should be published live immediately</param>
        /// <returns>ApiResponse of ImportJobResource</returns>
        ApiResponse<ImportJobResource> StartProcessUsingPOSTWithHttpInfo (long? id, bool? publishNow);
        /// <summary>
        /// Update an answer for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <param name="answer">The updated answer (optional)</param>
        /// <returns></returns>
        void UpdateAnswerUsingPUT (string questionId, string id, AnswerResource answer = null);

        /// <summary>
        /// Update an answer for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <param name="answer">The updated answer (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAnswerUsingPUTWithHttpInfo (string questionId, string id, AnswerResource answer = null);
        /// <summary>
        /// Update a question template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns></returns>
        void UpdateQuestionTemplateUsingPUT (string id, QuestionTemplateResource questionTemplateResource = null);

        /// <summary>
        /// Update a question template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateQuestionTemplateUsingPUTWithHttpInfo (string id, QuestionTemplateResource questionTemplateResource = null);
        /// <summary>
        /// Update a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="question">The updated question (optional)</param>
        /// <returns>QuestionResource</returns>
        QuestionResource UpdateQuestionUsingPUT (string id, QuestionResource question = null);

        /// <summary>
        /// Update a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="question">The updated question (optional)</param>
        /// <returns>ApiResponse of QuestionResource</returns>
        ApiResponse<QuestionResource> UpdateQuestionUsingPUTWithHttpInfo (string id, QuestionResource question = null);
        /// <summary>
        /// Update an import job
        /// </summary>
        /// <remarks>
        /// Changes should be made before process is started for there to be any effect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="request">The updated job (optional)</param>
        /// <returns>ImportJobResource</returns>
        ImportJobResource UpdateUsingPUT (long? id, ImportJobResource request = null);

        /// <summary>
        /// Update an import job
        /// </summary>
        /// <remarks>
        /// Changes should be made before process is started for there to be any effect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="request">The updated job (optional)</param>
        /// <returns>ApiResponse of ImportJobResource</returns>
        ApiResponse<ImportJobResource> UpdateUsingPUTWithHttpInfo (long? id, ImportJobResource request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add an answer to a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="answer">The new answer (optional)</param>
        /// <returns>Task of AnswerResource</returns>
        System.Threading.Tasks.Task<AnswerResource> AddAnswersUsingPOSTAsync (string questionId, AnswerResource answer = null);

        /// <summary>
        /// Add an answer to a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="answer">The new answer (optional)</param>
        /// <returns>Task of ApiResponse (AnswerResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnswerResource>> AddAnswersUsingPOSTAsyncWithHttpInfo (string questionId, AnswerResource answer = null);
        /// <summary>
        /// Add a tag to a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The new tag (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddTagUsingPOSTAsync (string id, string tag = null);

        /// <summary>
        /// Add a tag to a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The new tag (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddTagUsingPOSTAsyncWithHttpInfo (string id, string tag = null);
        /// <summary>
        /// Add a tag to a batch of questions
        /// </summary>
        /// <remarks>
        /// All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to add (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> BatchAddTagUsingPOSTAsync (string tag = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);

        /// <summary>
        /// Add a tag to a batch of questions
        /// </summary>
        /// <remarks>
        /// All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to add (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> BatchAddTagUsingPOSTAsyncWithHttpInfo (string tag = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);
        /// <summary>
        /// Remove a tag from a batch of questions
        /// </summary>
        /// <remarks>
        /// ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to remove</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> BatchRemoveTagUsingDELETEAsync (string tag, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);

        /// <summary>
        /// Remove a tag from a batch of questions
        /// </summary>
        /// <remarks>
        /// ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to remove</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> BatchRemoveTagUsingDELETEAsyncWithHttpInfo (string tag, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);
        /// <summary>
        /// Bulk update questions
        /// </summary>
        /// <remarks>
        /// Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">New values for a set of question fields (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> BulkUpdateUsingPUTAsync (QuestionResource question = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);

        /// <summary>
        /// Bulk update questions
        /// </summary>
        /// <remarks>
        /// Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">New values for a set of question fields (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> BulkUpdateUsingPUTAsyncWithHttpInfo (QuestionResource question = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);
        /// <summary>
        /// Count questions based on filters.
        /// </summary>
        /// <remarks>
        /// This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CountQuestionsUsingGETAsync (string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null);

        /// <summary>
        /// Count questions based on filters.
        /// </summary>
        /// <remarks>
        /// This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CountQuestionsUsingGETAsyncWithHttpInfo (string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null);
        /// <summary>
        /// Create a question template
        /// </summary>
        /// <remarks>
        /// Question templates define a type of question and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>Task of QuestionTemplateResource</returns>
        System.Threading.Tasks.Task<QuestionTemplateResource> CreateQuestionTemplateUsingPOSTAsync (QuestionTemplateResource questionTemplateResource = null);

        /// <summary>
        /// Create a question template
        /// </summary>
        /// <remarks>
        /// Question templates define a type of question and the properties they have
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>Task of ApiResponse (QuestionTemplateResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionTemplateResource>> CreateQuestionTemplateUsingPOSTAsyncWithHttpInfo (QuestionTemplateResource questionTemplateResource = null);
        /// <summary>
        /// Create a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">The new question (optional)</param>
        /// <returns>Task of QuestionResource</returns>
        System.Threading.Tasks.Task<QuestionResource> CreateQuestionUsingPOSTAsync (QuestionResource question = null);

        /// <summary>
        /// Create a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">The new question (optional)</param>
        /// <returns>Task of ApiResponse (QuestionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionResource>> CreateQuestionUsingPOSTAsyncWithHttpInfo (QuestionResource question = null);
        /// <summary>
        /// Create an import job
        /// </summary>
        /// <remarks>
        /// Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The new import job (optional)</param>
        /// <returns>Task of ImportJobResource</returns>
        System.Threading.Tasks.Task<ImportJobResource> CreateUsingPOSTAsync (ImportJobResource request = null);

        /// <summary>
        /// Create an import job
        /// </summary>
        /// <remarks>
        /// Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The new import job (optional)</param>
        /// <returns>Task of ApiResponse (ImportJobResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportJobResource>> CreateUsingPOSTAsyncWithHttpInfo (ImportJobResource request = null);
        /// <summary>
        /// Delete a question template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQuestionTemplateUsingDELETEAsync (string id, string cascade = null);

        /// <summary>
        /// Delete a question template
        /// </summary>
        /// <remarks>
        /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionTemplateUsingDELETEAsyncWithHttpInfo (string id, string cascade = null);
        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteQuestionUsingDELETEAsync (string id);

        /// <summary>
        /// Delete a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionUsingDELETEAsyncWithHttpInfo (string id);
        /// <summary>
        /// Delete an import job
        /// </summary>
        /// <remarks>
        /// Also deletes all questions that were imported by it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUsingDELETEAsync (long? id);

        /// <summary>
        /// Delete an import job
        /// </summary>
        /// <remarks>
        /// Also deletes all questions that were imported by it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsingDELETEAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get an answer for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>Task of AnswerResource</returns>
        System.Threading.Tasks.Task<AnswerResource> GetAnswerUsingGETAsync (string questionId, string id);

        /// <summary>
        /// Get an answer for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>Task of ApiResponse (AnswerResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnswerResource>> GetAnswerUsingGETAsyncWithHttpInfo (string questionId, string id);
        /// <summary>
        /// List the answers available for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <returns>Task of List&lt;AnswerResource&gt;</returns>
        System.Threading.Tasks.Task<List<AnswerResource>> GetAnswersUsingGETAsync (string questionId);

        /// <summary>
        /// List the answers available for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <returns>Task of ApiResponse (List&lt;AnswerResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AnswerResource>>> GetAnswersUsingGETAsyncWithHttpInfo (string questionId);
        /// <summary>
        /// Get a list of import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVendor">Filter for jobs by vendor id (optional)</param>
        /// <param name="filterCategory">Filter for jobs by category id (optional)</param>
        /// <param name="filterName">Filter for jobs which name *STARTS* with the given string (optional)</param>
        /// <param name="filterStatus">Filter for jobs that are in a specific set of statuses (comma separated) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceImportJobResource</returns>
        System.Threading.Tasks.Task<PageResourceImportJobResource> GetListUsingGET1Async (string filterVendor = null, string filterCategory = null, string filterName = null, string filterStatus = null, int? size = null, int? page = null, string order = null);

        /// <summary>
        /// Get a list of import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVendor">Filter for jobs by vendor id (optional)</param>
        /// <param name="filterCategory">Filter for jobs by category id (optional)</param>
        /// <param name="filterName">Filter for jobs which name *STARTS* with the given string (optional)</param>
        /// <param name="filterStatus">Filter for jobs that are in a specific set of statuses (comma separated) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceImportJobResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceImportJobResource>> GetListUsingGET1AsyncWithHttpInfo (string filterVendor = null, string filterCategory = null, string filterName = null, string filterStatus = null, int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get a single question template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of QuestionTemplateResource</returns>
        System.Threading.Tasks.Task<QuestionTemplateResource> GetQuestionTemplateUsingGETAsync (string id);

        /// <summary>
        /// Get a single question template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of ApiResponse (QuestionTemplateResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionTemplateResource>> GetQuestionTemplateUsingGETAsyncWithHttpInfo (string id);
        /// <summary>
        /// List and search question templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceQuestionTemplateResource</returns>
        System.Threading.Tasks.Task<PageResourceQuestionTemplateResource> GetQuestionTemplatesUsingGETAsync (int? size = null, int? page = null, string order = null);

        /// <summary>
        /// List and search question templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceQuestionTemplateResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceQuestionTemplateResource>> GetQuestionTemplatesUsingGETAsyncWithHttpInfo (int? size = null, int? page = null, string order = null);
        /// <summary>
        /// Get a single question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of QuestionResource</returns>
        System.Threading.Tasks.Task<QuestionResource> GetQuestionUsingGETAsync (string id);

        /// <summary>
        /// Get a single question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of ApiResponse (QuestionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionResource>> GetQuestionUsingGETAsyncWithHttpInfo (string id);
        /// <summary>
        /// List question deltas in ascending order of updated date
        /// </summary>
        /// <remarks>
        /// The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Timestamp in seconds (optional)</param>
        /// <returns>Task of List&lt;DeltaResource&gt;</returns>
        System.Threading.Tasks.Task<List<DeltaResource>> GetQuestionsDeltaUsingGETAsync (long? since = null);

        /// <summary>
        /// List question deltas in ascending order of updated date
        /// </summary>
        /// <remarks>
        /// The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Timestamp in seconds (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeltaResource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DeltaResource>>> GetQuestionsDeltaUsingGETAsyncWithHttpInfo (long? since = null);
        /// <summary>
        /// List and search questions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of PageResourceQuestionResource</returns>
        System.Threading.Tasks.Task<PageResourceQuestionResource> GetQuestionsUsingGETAsync (int? size = null, int? page = null, string order = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);

        /// <summary>
        /// List and search questions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of ApiResponse (PageResourceQuestionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageResourceQuestionResource>> GetQuestionsUsingGETAsyncWithHttpInfo (int? size = null, int? page = null, string order = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null);
        /// <summary>
        /// List the tags for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetTagsUsingGET1Async (string id);

        /// <summary>
        /// List the tags for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTagsUsingGET1AsyncWithHttpInfo (string id);
        /// <summary>
        /// List and search tags by the beginning of the string
        /// </summary>
        /// <remarks>
        /// For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for tags starting with the given text (optional)</param>
        /// <param name="filterCategory">Filter for tags on questions from a specific category (optional)</param>
        /// <param name="filterImportId">Filter for tags on questions from a specific import job (optional)</param>
        /// <returns>Task of Collectionstring</returns>
        System.Threading.Tasks.Task<Collectionstring> GetTagsUsingGET2Async (string filterSearch = null, string filterCategory = null, long? filterImportId = null);

        /// <summary>
        /// List and search tags by the beginning of the string
        /// </summary>
        /// <remarks>
        /// For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for tags starting with the given text (optional)</param>
        /// <param name="filterCategory">Filter for tags on questions from a specific category (optional)</param>
        /// <param name="filterImportId">Filter for tags on questions from a specific import job (optional)</param>
        /// <returns>Task of ApiResponse (Collectionstring)</returns>
        System.Threading.Tasks.Task<ApiResponse<Collectionstring>> GetTagsUsingGET2AsyncWithHttpInfo (string filterSearch = null, string filterCategory = null, long? filterImportId = null);
        /// <summary>
        /// Get an import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>Task of ImportJobResource</returns>
        System.Threading.Tasks.Task<ImportJobResource> GetUsingGETAsync (long? id);

        /// <summary>
        /// Get an import job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>Task of ApiResponse (ImportJobResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportJobResource>> GetUsingGETAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Remove an answer from a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAnswersUsingDELETEAsync (string questionId, string id);

        /// <summary>
        /// Remove an answer from a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAnswersUsingDELETEAsyncWithHttpInfo (string questionId, string id);
        /// <summary>
        /// Remove a tag from a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The tag to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveTagUsingDELETEAsync (string id, string tag);

        /// <summary>
        /// Remove a tag from a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The tag to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveTagUsingDELETEAsyncWithHttpInfo (string id, string tag);
        /// <summary>
        /// Start processing an import job
        /// </summary>
        /// <remarks>
        /// Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="publishNow">Whether the new questions should be published live immediately</param>
        /// <returns>Task of ImportJobResource</returns>
        System.Threading.Tasks.Task<ImportJobResource> StartProcessUsingPOSTAsync (long? id, bool? publishNow);

        /// <summary>
        /// Start processing an import job
        /// </summary>
        /// <remarks>
        /// Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="publishNow">Whether the new questions should be published live immediately</param>
        /// <returns>Task of ApiResponse (ImportJobResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportJobResource>> StartProcessUsingPOSTAsyncWithHttpInfo (long? id, bool? publishNow);
        /// <summary>
        /// Update an answer for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <param name="answer">The updated answer (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAnswerUsingPUTAsync (string questionId, string id, AnswerResource answer = null);

        /// <summary>
        /// Update an answer for a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <param name="answer">The updated answer (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAnswerUsingPUTAsyncWithHttpInfo (string questionId, string id, AnswerResource answer = null);
        /// <summary>
        /// Update a question template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateQuestionTemplateUsingPUTAsync (string id, QuestionTemplateResource questionTemplateResource = null);

        /// <summary>
        /// Update a question template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateQuestionTemplateUsingPUTAsyncWithHttpInfo (string id, QuestionTemplateResource questionTemplateResource = null);
        /// <summary>
        /// Update a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="question">The updated question (optional)</param>
        /// <returns>Task of QuestionResource</returns>
        System.Threading.Tasks.Task<QuestionResource> UpdateQuestionUsingPUTAsync (string id, QuestionResource question = null);

        /// <summary>
        /// Update a question
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="question">The updated question (optional)</param>
        /// <returns>Task of ApiResponse (QuestionResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuestionResource>> UpdateQuestionUsingPUTAsyncWithHttpInfo (string id, QuestionResource question = null);
        /// <summary>
        /// Update an import job
        /// </summary>
        /// <remarks>
        /// Changes should be made before process is started for there to be any effect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="request">The updated job (optional)</param>
        /// <returns>Task of ImportJobResource</returns>
        System.Threading.Tasks.Task<ImportJobResource> UpdateUsingPUTAsync (long? id, ImportJobResource request = null);

        /// <summary>
        /// Update an import job
        /// </summary>
        /// <remarks>
        /// Changes should be made before process is started for there to be any effect.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="request">The updated job (optional)</param>
        /// <returns>Task of ApiResponse (ImportJobResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ImportJobResource>> UpdateUsingPUTAsyncWithHttpInfo (long? id, ImportJobResource request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GamificationTriviaApi : IGamificationTriviaApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GamificationTriviaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GamificationTriviaApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GamificationTriviaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GamificationTriviaApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add an answer to a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="answer">The new answer (optional)</param>
        /// <returns>AnswerResource</returns>
        public AnswerResource AddAnswersUsingPOST (string questionId, AnswerResource answer = null)
        {
             ApiResponse<AnswerResource> localVarResponse = AddAnswersUsingPOSTWithHttpInfo(questionId, answer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add an answer to a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="answer">The new answer (optional)</param>
        /// <returns>ApiResponse of AnswerResource</returns>
        public ApiResponse< AnswerResource > AddAnswersUsingPOSTWithHttpInfo (string questionId, AnswerResource answer = null)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling GamificationTriviaApi->AddAnswersUsingPOST");

            var localVarPath = "/trivia/questions/{question_id}/answers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionId != null) localVarPathParams.Add("question_id", Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (answer != null && answer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(answer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answer; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAnswersUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerResource)));
            
        }

        /// <summary>
        /// Add an answer to a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="answer">The new answer (optional)</param>
        /// <returns>Task of AnswerResource</returns>
        public async System.Threading.Tasks.Task<AnswerResource> AddAnswersUsingPOSTAsync (string questionId, AnswerResource answer = null)
        {
             ApiResponse<AnswerResource> localVarResponse = await AddAnswersUsingPOSTAsyncWithHttpInfo(questionId, answer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add an answer to a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="answer">The new answer (optional)</param>
        /// <returns>Task of ApiResponse (AnswerResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnswerResource>> AddAnswersUsingPOSTAsyncWithHttpInfo (string questionId, AnswerResource answer = null)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling GamificationTriviaApi->AddAnswersUsingPOST");

            var localVarPath = "/trivia/questions/{question_id}/answers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionId != null) localVarPathParams.Add("question_id", Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (answer != null && answer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(answer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answer; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAnswersUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerResource)));
            
        }

        /// <summary>
        /// Add a tag to a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The new tag (optional)</param>
        /// <returns></returns>
        public void AddTagUsingPOST (string id, string tag = null)
        {
             AddTagUsingPOSTWithHttpInfo(id, tag);
        }

        /// <summary>
        /// Add a tag to a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The new tag (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddTagUsingPOSTWithHttpInfo (string id, string tag = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->AddTagUsingPOST");

            var localVarPath = "/trivia/questions/{id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tag != null && tag.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tag); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tag; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTagUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a tag to a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The new tag (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddTagUsingPOSTAsync (string id, string tag = null)
        {
             await AddTagUsingPOSTAsyncWithHttpInfo(id, tag);

        }

        /// <summary>
        /// Add a tag to a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The new tag (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddTagUsingPOSTAsyncWithHttpInfo (string id, string tag = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->AddTagUsingPOST");

            var localVarPath = "/trivia/questions/{id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tag != null && tag.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tag); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tag; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTagUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a tag to a batch of questions All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to add (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>int?</returns>
        public int? BatchAddTagUsingPOST (string tag = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {
             ApiResponse<int?> localVarResponse = BatchAddTagUsingPOSTWithHttpInfo(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a tag to a batch of questions All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to add (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > BatchAddTagUsingPOSTWithHttpInfo (string tag = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {

            var localVarPath = "/trivia/questions/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterIdset != null) localVarQueryParams.Add("filter_idset", Configuration.ApiClient.ParameterToString(filterIdset)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTag != null) localVarQueryParams.Add("filter_tag", Configuration.ApiClient.ParameterToString(filterTag)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterPublished != null) localVarQueryParams.Add("filter_published", Configuration.ApiClient.ParameterToString(filterPublished)); // query parameter
            if (filterImportId != null) localVarQueryParams.Add("filter_import_id", Configuration.ApiClient.ParameterToString(filterImportId)); // query parameter
            if (tag != null && tag.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tag); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tag; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchAddTagUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Add a tag to a batch of questions All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to add (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> BatchAddTagUsingPOSTAsync (string tag = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {
             ApiResponse<int?> localVarResponse = await BatchAddTagUsingPOSTAsyncWithHttpInfo(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a tag to a batch of questions All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to add (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> BatchAddTagUsingPOSTAsyncWithHttpInfo (string tag = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {

            var localVarPath = "/trivia/questions/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterIdset != null) localVarQueryParams.Add("filter_idset", Configuration.ApiClient.ParameterToString(filterIdset)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTag != null) localVarQueryParams.Add("filter_tag", Configuration.ApiClient.ParameterToString(filterTag)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterPublished != null) localVarQueryParams.Add("filter_published", Configuration.ApiClient.ParameterToString(filterPublished)); // query parameter
            if (filterImportId != null) localVarQueryParams.Add("filter_import_id", Configuration.ApiClient.ParameterToString(filterImportId)); // query parameter
            if (tag != null && tag.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tag); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tag; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchAddTagUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Remove a tag from a batch of questions ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to remove</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>int?</returns>
        public int? BatchRemoveTagUsingDELETE (string tag, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {
             ApiResponse<int?> localVarResponse = BatchRemoveTagUsingDELETEWithHttpInfo(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a tag from a batch of questions ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to remove</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > BatchRemoveTagUsingDELETEWithHttpInfo (string tag, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling GamificationTriviaApi->BatchRemoveTagUsingDELETE");

            var localVarPath = "/trivia/questions/tags/{tag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterIdset != null) localVarQueryParams.Add("filter_idset", Configuration.ApiClient.ParameterToString(filterIdset)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTag != null) localVarQueryParams.Add("filter_tag", Configuration.ApiClient.ParameterToString(filterTag)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterPublished != null) localVarQueryParams.Add("filter_published", Configuration.ApiClient.ParameterToString(filterPublished)); // query parameter
            if (filterImportId != null) localVarQueryParams.Add("filter_import_id", Configuration.ApiClient.ParameterToString(filterImportId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchRemoveTagUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Remove a tag from a batch of questions ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to remove</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> BatchRemoveTagUsingDELETEAsync (string tag, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {
             ApiResponse<int?> localVarResponse = await BatchRemoveTagUsingDELETEAsyncWithHttpInfo(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a tag from a batch of questions ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tag">The tag to remove</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> BatchRemoveTagUsingDELETEAsyncWithHttpInfo (string tag, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling GamificationTriviaApi->BatchRemoveTagUsingDELETE");

            var localVarPath = "/trivia/questions/tags/{tag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterIdset != null) localVarQueryParams.Add("filter_idset", Configuration.ApiClient.ParameterToString(filterIdset)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTag != null) localVarQueryParams.Add("filter_tag", Configuration.ApiClient.ParameterToString(filterTag)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterPublished != null) localVarQueryParams.Add("filter_published", Configuration.ApiClient.ParameterToString(filterPublished)); // query parameter
            if (filterImportId != null) localVarQueryParams.Add("filter_import_id", Configuration.ApiClient.ParameterToString(filterImportId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchRemoveTagUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Bulk update questions Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">New values for a set of question fields (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>int?</returns>
        public int? BulkUpdateUsingPUT (QuestionResource question = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {
             ApiResponse<int?> localVarResponse = BulkUpdateUsingPUTWithHttpInfo(question, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk update questions Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">New values for a set of question fields (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > BulkUpdateUsingPUTWithHttpInfo (QuestionResource question = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {

            var localVarPath = "/trivia/questions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterIdset != null) localVarQueryParams.Add("filter_idset", Configuration.ApiClient.ParameterToString(filterIdset)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterPublished != null) localVarQueryParams.Add("filter_published", Configuration.ApiClient.ParameterToString(filterPublished)); // query parameter
            if (filterImportId != null) localVarQueryParams.Add("filter_import_id", Configuration.ApiClient.ParameterToString(filterImportId)); // query parameter
            if (question != null && question.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(question); // http body (model) parameter
            }
            else
            {
                localVarPostBody = question; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Bulk update questions Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">New values for a set of question fields (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> BulkUpdateUsingPUTAsync (QuestionResource question = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {
             ApiResponse<int?> localVarResponse = await BulkUpdateUsingPUTAsyncWithHttpInfo(question, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk update questions Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">New values for a set of question fields (optional)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> BulkUpdateUsingPUTAsyncWithHttpInfo (QuestionResource question = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {

            var localVarPath = "/trivia/questions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterIdset != null) localVarQueryParams.Add("filter_idset", Configuration.ApiClient.ParameterToString(filterIdset)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterPublished != null) localVarQueryParams.Add("filter_published", Configuration.ApiClient.ParameterToString(filterPublished)); // query parameter
            if (filterImportId != null) localVarQueryParams.Add("filter_import_id", Configuration.ApiClient.ParameterToString(filterImportId)); // query parameter
            if (question != null && question.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(question); // http body (model) parameter
            }
            else
            {
                localVarPostBody = question; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkUpdateUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Count questions based on filters. This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <returns>long?</returns>
        public long? CountQuestionsUsingGET (string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null)
        {
             ApiResponse<long?> localVarResponse = CountQuestionsUsingGETWithHttpInfo(filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Count questions based on filters. This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CountQuestionsUsingGETWithHttpInfo (string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null)
        {

            var localVarPath = "/trivia/questions/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterIdset != null) localVarQueryParams.Add("filter_idset", Configuration.ApiClient.ParameterToString(filterIdset)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTag != null) localVarQueryParams.Add("filter_tag", Configuration.ApiClient.ParameterToString(filterTag)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterPublished != null) localVarQueryParams.Add("filter_published", Configuration.ApiClient.ParameterToString(filterPublished)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountQuestionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        /// Count questions based on filters. This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CountQuestionsUsingGETAsync (string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null)
        {
             ApiResponse<long?> localVarResponse = await CountQuestionsUsingGETAsyncWithHttpInfo(filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Count questions based on filters. This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTag">Filter for questions with specified tag (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CountQuestionsUsingGETAsyncWithHttpInfo (string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTag = null, string filterTagset = null, string filterType = null, bool? filterPublished = null)
        {

            var localVarPath = "/trivia/questions/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterIdset != null) localVarQueryParams.Add("filter_idset", Configuration.ApiClient.ParameterToString(filterIdset)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTag != null) localVarQueryParams.Add("filter_tag", Configuration.ApiClient.ParameterToString(filterTag)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterPublished != null) localVarQueryParams.Add("filter_published", Configuration.ApiClient.ParameterToString(filterPublished)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountQuestionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
            
        }

        /// <summary>
        /// Create a question template Question templates define a type of question and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>QuestionTemplateResource</returns>
        public QuestionTemplateResource CreateQuestionTemplateUsingPOST (QuestionTemplateResource questionTemplateResource = null)
        {
             ApiResponse<QuestionTemplateResource> localVarResponse = CreateQuestionTemplateUsingPOSTWithHttpInfo(questionTemplateResource);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a question template Question templates define a type of question and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>ApiResponse of QuestionTemplateResource</returns>
        public ApiResponse< QuestionTemplateResource > CreateQuestionTemplateUsingPOSTWithHttpInfo (QuestionTemplateResource questionTemplateResource = null)
        {

            var localVarPath = "/trivia/questions/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionTemplateResource != null && questionTemplateResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(questionTemplateResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = questionTemplateResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestionTemplateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionTemplateResource)));
            
        }

        /// <summary>
        /// Create a question template Question templates define a type of question and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>Task of QuestionTemplateResource</returns>
        public async System.Threading.Tasks.Task<QuestionTemplateResource> CreateQuestionTemplateUsingPOSTAsync (QuestionTemplateResource questionTemplateResource = null)
        {
             ApiResponse<QuestionTemplateResource> localVarResponse = await CreateQuestionTemplateUsingPOSTAsyncWithHttpInfo(questionTemplateResource);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a question template Question templates define a type of question and the properties they have
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>Task of ApiResponse (QuestionTemplateResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionTemplateResource>> CreateQuestionTemplateUsingPOSTAsyncWithHttpInfo (QuestionTemplateResource questionTemplateResource = null)
        {

            var localVarPath = "/trivia/questions/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionTemplateResource != null && questionTemplateResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(questionTemplateResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = questionTemplateResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestionTemplateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionTemplateResource)));
            
        }

        /// <summary>
        /// Create a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">The new question (optional)</param>
        /// <returns>QuestionResource</returns>
        public QuestionResource CreateQuestionUsingPOST (QuestionResource question = null)
        {
             ApiResponse<QuestionResource> localVarResponse = CreateQuestionUsingPOSTWithHttpInfo(question);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">The new question (optional)</param>
        /// <returns>ApiResponse of QuestionResource</returns>
        public ApiResponse< QuestionResource > CreateQuestionUsingPOSTWithHttpInfo (QuestionResource question = null)
        {

            var localVarPath = "/trivia/questions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (question != null && question.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(question); // http body (model) parameter
            }
            else
            {
                localVarPostBody = question; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionResource)));
            
        }

        /// <summary>
        /// Create a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">The new question (optional)</param>
        /// <returns>Task of QuestionResource</returns>
        public async System.Threading.Tasks.Task<QuestionResource> CreateQuestionUsingPOSTAsync (QuestionResource question = null)
        {
             ApiResponse<QuestionResource> localVarResponse = await CreateQuestionUsingPOSTAsyncWithHttpInfo(question);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="question">The new question (optional)</param>
        /// <returns>Task of ApiResponse (QuestionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionResource>> CreateQuestionUsingPOSTAsyncWithHttpInfo (QuestionResource question = null)
        {

            var localVarPath = "/trivia/questions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (question != null && question.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(question); // http body (model) parameter
            }
            else
            {
                localVarPostBody = question; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuestionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionResource)));
            
        }

        /// <summary>
        /// Create an import job Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The new import job (optional)</param>
        /// <returns>ImportJobResource</returns>
        public ImportJobResource CreateUsingPOST (ImportJobResource request = null)
        {
             ApiResponse<ImportJobResource> localVarResponse = CreateUsingPOSTWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an import job Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The new import job (optional)</param>
        /// <returns>ApiResponse of ImportJobResource</returns>
        public ApiResponse< ImportJobResource > CreateUsingPOSTWithHttpInfo (ImportJobResource request = null)
        {

            var localVarPath = "/trivia/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResource)));
            
        }

        /// <summary>
        /// Create an import job Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The new import job (optional)</param>
        /// <returns>Task of ImportJobResource</returns>
        public async System.Threading.Tasks.Task<ImportJobResource> CreateUsingPOSTAsync (ImportJobResource request = null)
        {
             ApiResponse<ImportJobResource> localVarResponse = await CreateUsingPOSTAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an import job Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The new import job (optional)</param>
        /// <returns>Task of ApiResponse (ImportJobResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImportJobResource>> CreateUsingPOSTAsyncWithHttpInfo (ImportJobResource request = null)
        {

            var localVarPath = "/trivia/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResource)));
            
        }

        /// <summary>
        /// Delete a question template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns></returns>
        public void DeleteQuestionTemplateUsingDELETE (string id, string cascade = null)
        {
             DeleteQuestionTemplateUsingDELETEWithHttpInfo(id, cascade);
        }

        /// <summary>
        /// Delete a question template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteQuestionTemplateUsingDELETEWithHttpInfo (string id, string cascade = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->DeleteQuestionTemplateUsingDELETE");

            var localVarPath = "/trivia/questions/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cascade != null) localVarQueryParams.Add("cascade", Configuration.ApiClient.ParameterToString(cascade)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionTemplateUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a question template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQuestionTemplateUsingDELETEAsync (string id, string cascade = null)
        {
             await DeleteQuestionTemplateUsingDELETEAsyncWithHttpInfo(id, cascade);

        }

        /// <summary>
        /// Delete a question template If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="cascade">The value needed to delete used templates (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionTemplateUsingDELETEAsyncWithHttpInfo (string id, string cascade = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->DeleteQuestionTemplateUsingDELETE");

            var localVarPath = "/trivia/questions/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (cascade != null) localVarQueryParams.Add("cascade", Configuration.ApiClient.ParameterToString(cascade)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionTemplateUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns></returns>
        public void DeleteQuestionUsingDELETE (string id)
        {
             DeleteQuestionUsingDELETEWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteQuestionUsingDELETEWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->DeleteQuestionUsingDELETE");

            var localVarPath = "/trivia/questions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteQuestionUsingDELETEAsync (string id)
        {
             await DeleteQuestionUsingDELETEAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteQuestionUsingDELETEAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->DeleteQuestionUsingDELETE");

            var localVarPath = "/trivia/questions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuestionUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an import job Also deletes all questions that were imported by it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns></returns>
        public void DeleteUsingDELETE (long? id)
        {
             DeleteUsingDELETEWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an import job Also deletes all questions that were imported by it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUsingDELETEWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->DeleteUsingDELETE");

            var localVarPath = "/trivia/import/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an import job Also deletes all questions that were imported by it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUsingDELETEAsync (long? id)
        {
             await DeleteUsingDELETEAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an import job Also deletes all questions that were imported by it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUsingDELETEAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->DeleteUsingDELETE");

            var localVarPath = "/trivia/import/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get an answer for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>AnswerResource</returns>
        public AnswerResource GetAnswerUsingGET (string questionId, string id)
        {
             ApiResponse<AnswerResource> localVarResponse = GetAnswerUsingGETWithHttpInfo(questionId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an answer for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>ApiResponse of AnswerResource</returns>
        public ApiResponse< AnswerResource > GetAnswerUsingGETWithHttpInfo (string questionId, string id)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling GamificationTriviaApi->GetAnswerUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->GetAnswerUsingGET");

            var localVarPath = "/trivia/questions/{question_id}/answers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionId != null) localVarPathParams.Add("question_id", Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnswerUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerResource)));
            
        }

        /// <summary>
        /// Get an answer for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>Task of AnswerResource</returns>
        public async System.Threading.Tasks.Task<AnswerResource> GetAnswerUsingGETAsync (string questionId, string id)
        {
             ApiResponse<AnswerResource> localVarResponse = await GetAnswerUsingGETAsyncWithHttpInfo(questionId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an answer for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>Task of ApiResponse (AnswerResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnswerResource>> GetAnswerUsingGETAsyncWithHttpInfo (string questionId, string id)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling GamificationTriviaApi->GetAnswerUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->GetAnswerUsingGET");

            var localVarPath = "/trivia/questions/{question_id}/answers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionId != null) localVarPathParams.Add("question_id", Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnswerUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnswerResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnswerResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnswerResource)));
            
        }

        /// <summary>
        /// List the answers available for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <returns>List&lt;AnswerResource&gt;</returns>
        public List<AnswerResource> GetAnswersUsingGET (string questionId)
        {
             ApiResponse<List<AnswerResource>> localVarResponse = GetAnswersUsingGETWithHttpInfo(questionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the answers available for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <returns>ApiResponse of List&lt;AnswerResource&gt;</returns>
        public ApiResponse< List<AnswerResource> > GetAnswersUsingGETWithHttpInfo (string questionId)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling GamificationTriviaApi->GetAnswersUsingGET");

            var localVarPath = "/trivia/questions/{question_id}/answers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionId != null) localVarPathParams.Add("question_id", Configuration.ApiClient.ParameterToString(questionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnswersUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnswerResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AnswerResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnswerResource>)));
            
        }

        /// <summary>
        /// List the answers available for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <returns>Task of List&lt;AnswerResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<AnswerResource>> GetAnswersUsingGETAsync (string questionId)
        {
             ApiResponse<List<AnswerResource>> localVarResponse = await GetAnswersUsingGETAsyncWithHttpInfo(questionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the answers available for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <returns>Task of ApiResponse (List&lt;AnswerResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AnswerResource>>> GetAnswersUsingGETAsyncWithHttpInfo (string questionId)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling GamificationTriviaApi->GetAnswersUsingGET");

            var localVarPath = "/trivia/questions/{question_id}/answers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionId != null) localVarPathParams.Add("question_id", Configuration.ApiClient.ParameterToString(questionId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnswersUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnswerResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AnswerResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnswerResource>)));
            
        }

        /// <summary>
        /// Get a list of import job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVendor">Filter for jobs by vendor id (optional)</param>
        /// <param name="filterCategory">Filter for jobs by category id (optional)</param>
        /// <param name="filterName">Filter for jobs which name *STARTS* with the given string (optional)</param>
        /// <param name="filterStatus">Filter for jobs that are in a specific set of statuses (comma separated) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceImportJobResource</returns>
        public PageResourceImportJobResource GetListUsingGET1 (string filterVendor = null, string filterCategory = null, string filterName = null, string filterStatus = null, int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceImportJobResource> localVarResponse = GetListUsingGET1WithHttpInfo(filterVendor, filterCategory, filterName, filterStatus, size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of import job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVendor">Filter for jobs by vendor id (optional)</param>
        /// <param name="filterCategory">Filter for jobs by category id (optional)</param>
        /// <param name="filterName">Filter for jobs which name *STARTS* with the given string (optional)</param>
        /// <param name="filterStatus">Filter for jobs that are in a specific set of statuses (comma separated) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceImportJobResource</returns>
        public ApiResponse< PageResourceImportJobResource > GetListUsingGET1WithHttpInfo (string filterVendor = null, string filterCategory = null, string filterName = null, string filterStatus = null, int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/trivia/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterVendor != null) localVarQueryParams.Add("filter_vendor", Configuration.ApiClient.ParameterToString(filterVendor)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterName != null) localVarQueryParams.Add("filter_name", Configuration.ApiClient.ParameterToString(filterName)); // query parameter
            if (filterStatus != null) localVarQueryParams.Add("filter_status", Configuration.ApiClient.ParameterToString(filterStatus)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceImportJobResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceImportJobResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceImportJobResource)));
            
        }

        /// <summary>
        /// Get a list of import job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVendor">Filter for jobs by vendor id (optional)</param>
        /// <param name="filterCategory">Filter for jobs by category id (optional)</param>
        /// <param name="filterName">Filter for jobs which name *STARTS* with the given string (optional)</param>
        /// <param name="filterStatus">Filter for jobs that are in a specific set of statuses (comma separated) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceImportJobResource</returns>
        public async System.Threading.Tasks.Task<PageResourceImportJobResource> GetListUsingGET1Async (string filterVendor = null, string filterCategory = null, string filterName = null, string filterStatus = null, int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceImportJobResource> localVarResponse = await GetListUsingGET1AsyncWithHttpInfo(filterVendor, filterCategory, filterName, filterStatus, size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of import job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterVendor">Filter for jobs by vendor id (optional)</param>
        /// <param name="filterCategory">Filter for jobs by category id (optional)</param>
        /// <param name="filterName">Filter for jobs which name *STARTS* with the given string (optional)</param>
        /// <param name="filterStatus">Filter for jobs that are in a specific set of statuses (comma separated) (optional)</param>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceImportJobResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceImportJobResource>> GetListUsingGET1AsyncWithHttpInfo (string filterVendor = null, string filterCategory = null, string filterName = null, string filterStatus = null, int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/trivia/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterVendor != null) localVarQueryParams.Add("filter_vendor", Configuration.ApiClient.ParameterToString(filterVendor)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterName != null) localVarQueryParams.Add("filter_name", Configuration.ApiClient.ParameterToString(filterName)); // query parameter
            if (filterStatus != null) localVarQueryParams.Add("filter_status", Configuration.ApiClient.ParameterToString(filterStatus)); // query parameter
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceImportJobResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceImportJobResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceImportJobResource)));
            
        }

        /// <summary>
        /// Get a single question template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>QuestionTemplateResource</returns>
        public QuestionTemplateResource GetQuestionTemplateUsingGET (string id)
        {
             ApiResponse<QuestionTemplateResource> localVarResponse = GetQuestionTemplateUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single question template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>ApiResponse of QuestionTemplateResource</returns>
        public ApiResponse< QuestionTemplateResource > GetQuestionTemplateUsingGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->GetQuestionTemplateUsingGET");

            var localVarPath = "/trivia/questions/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionTemplateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionTemplateResource)));
            
        }

        /// <summary>
        /// Get a single question template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of QuestionTemplateResource</returns>
        public async System.Threading.Tasks.Task<QuestionTemplateResource> GetQuestionTemplateUsingGETAsync (string id)
        {
             ApiResponse<QuestionTemplateResource> localVarResponse = await GetQuestionTemplateUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single question template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <returns>Task of ApiResponse (QuestionTemplateResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionTemplateResource>> GetQuestionTemplateUsingGETAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->GetQuestionTemplateUsingGET");

            var localVarPath = "/trivia/questions/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionTemplateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionTemplateResource)));
            
        }

        /// <summary>
        /// List and search question templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>PageResourceQuestionTemplateResource</returns>
        public PageResourceQuestionTemplateResource GetQuestionTemplatesUsingGET (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceQuestionTemplateResource> localVarResponse = GetQuestionTemplatesUsingGETWithHttpInfo(size, page, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List and search question templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>ApiResponse of PageResourceQuestionTemplateResource</returns>
        public ApiResponse< PageResourceQuestionTemplateResource > GetQuestionTemplatesUsingGETWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/trivia/questions/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionTemplatesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceQuestionTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceQuestionTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceQuestionTemplateResource)));
            
        }

        /// <summary>
        /// List and search question templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of PageResourceQuestionTemplateResource</returns>
        public async System.Threading.Tasks.Task<PageResourceQuestionTemplateResource> GetQuestionTemplatesUsingGETAsync (int? size = null, int? page = null, string order = null)
        {
             ApiResponse<PageResourceQuestionTemplateResource> localVarResponse = await GetQuestionTemplatesUsingGETAsyncWithHttpInfo(size, page, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List and search question templates 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <returns>Task of ApiResponse (PageResourceQuestionTemplateResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceQuestionTemplateResource>> GetQuestionTemplatesUsingGETAsyncWithHttpInfo (int? size = null, int? page = null, string order = null)
        {

            var localVarPath = "/trivia/questions/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionTemplatesUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceQuestionTemplateResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceQuestionTemplateResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceQuestionTemplateResource)));
            
        }

        /// <summary>
        /// Get a single question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>QuestionResource</returns>
        public QuestionResource GetQuestionUsingGET (string id)
        {
             ApiResponse<QuestionResource> localVarResponse = GetQuestionUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>ApiResponse of QuestionResource</returns>
        public ApiResponse< QuestionResource > GetQuestionUsingGETWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->GetQuestionUsingGET");

            var localVarPath = "/trivia/questions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionResource)));
            
        }

        /// <summary>
        /// Get a single question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of QuestionResource</returns>
        public async System.Threading.Tasks.Task<QuestionResource> GetQuestionUsingGETAsync (string id)
        {
             ApiResponse<QuestionResource> localVarResponse = await GetQuestionUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of ApiResponse (QuestionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionResource>> GetQuestionUsingGETAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->GetQuestionUsingGET");

            var localVarPath = "/trivia/questions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionResource)));
            
        }

        /// <summary>
        /// List question deltas in ascending order of updated date The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Timestamp in seconds (optional)</param>
        /// <returns>List&lt;DeltaResource&gt;</returns>
        public List<DeltaResource> GetQuestionsDeltaUsingGET (long? since = null)
        {
             ApiResponse<List<DeltaResource>> localVarResponse = GetQuestionsDeltaUsingGETWithHttpInfo(since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List question deltas in ascending order of updated date The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Timestamp in seconds (optional)</param>
        /// <returns>ApiResponse of List&lt;DeltaResource&gt;</returns>
        public ApiResponse< List<DeltaResource> > GetQuestionsDeltaUsingGETWithHttpInfo (long? since = null)
        {

            var localVarPath = "/trivia/questions/delta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (since != null) localVarQueryParams.Add("since", Configuration.ApiClient.ParameterToString(since)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionsDeltaUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeltaResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeltaResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeltaResource>)));
            
        }

        /// <summary>
        /// List question deltas in ascending order of updated date The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Timestamp in seconds (optional)</param>
        /// <returns>Task of List&lt;DeltaResource&gt;</returns>
        public async System.Threading.Tasks.Task<List<DeltaResource>> GetQuestionsDeltaUsingGETAsync (long? since = null)
        {
             ApiResponse<List<DeltaResource>> localVarResponse = await GetQuestionsDeltaUsingGETAsyncWithHttpInfo(since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List question deltas in ascending order of updated date The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="since">Timestamp in seconds (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DeltaResource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DeltaResource>>> GetQuestionsDeltaUsingGETAsyncWithHttpInfo (long? since = null)
        {

            var localVarPath = "/trivia/questions/delta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (since != null) localVarQueryParams.Add("since", Configuration.ApiClient.ParameterToString(since)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionsDeltaUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DeltaResource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DeltaResource>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DeltaResource>)));
            
        }

        /// <summary>
        /// List and search questions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>PageResourceQuestionResource</returns>
        public PageResourceQuestionResource GetQuestionsUsingGET (int? size = null, int? page = null, string order = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {
             ApiResponse<PageResourceQuestionResource> localVarResponse = GetQuestionsUsingGETWithHttpInfo(size, page, order, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List and search questions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>ApiResponse of PageResourceQuestionResource</returns>
        public ApiResponse< PageResourceQuestionResource > GetQuestionsUsingGETWithHttpInfo (int? size = null, int? page = null, string order = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {

            var localVarPath = "/trivia/questions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterIdset != null) localVarQueryParams.Add("filter_idset", Configuration.ApiClient.ParameterToString(filterIdset)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterPublished != null) localVarQueryParams.Add("filter_published", Configuration.ApiClient.ParameterToString(filterPublished)); // query parameter
            if (filterImportId != null) localVarQueryParams.Add("filter_import_id", Configuration.ApiClient.ParameterToString(filterImportId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceQuestionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceQuestionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceQuestionResource)));
            
        }

        /// <summary>
        /// List and search questions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of PageResourceQuestionResource</returns>
        public async System.Threading.Tasks.Task<PageResourceQuestionResource> GetQuestionsUsingGETAsync (int? size = null, int? page = null, string order = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {
             ApiResponse<PageResourceQuestionResource> localVarResponse = await GetQuestionsUsingGETAsyncWithHttpInfo(size, page, order, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List and search questions 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The number of objects returned per page (optional, default to 25)</param>
        /// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
        /// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
        /// <param name="filterSearch">Filter for documents whose question, answers or tags contains provided string (optional)</param>
        /// <param name="filterIdset">Filter for documents whose id is in the comma separated list provided (optional)</param>
        /// <param name="filterCategory">Filter for questions with specified category, by id (optional)</param>
        /// <param name="filterTagset">Filter for questions with specified tags (separated by comma) (optional)</param>
        /// <param name="filterType">Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)</param>
        /// <param name="filterPublished">Filter for questions currenctly published or not (optional)</param>
        /// <param name="filterImportId">Filter for questions from a specific import job (optional)</param>
        /// <returns>Task of ApiResponse (PageResourceQuestionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageResourceQuestionResource>> GetQuestionsUsingGETAsyncWithHttpInfo (int? size = null, int? page = null, string order = null, string filterSearch = null, string filterIdset = null, string filterCategory = null, string filterTagset = null, string filterType = null, bool? filterPublished = null, long? filterImportId = null)
        {

            var localVarPath = "/trivia/questions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (size != null) localVarQueryParams.Add("size", Configuration.ApiClient.ParameterToString(size)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterIdset != null) localVarQueryParams.Add("filter_idset", Configuration.ApiClient.ParameterToString(filterIdset)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterTagset != null) localVarQueryParams.Add("filter_tagset", Configuration.ApiClient.ParameterToString(filterTagset)); // query parameter
            if (filterType != null) localVarQueryParams.Add("filter_type", Configuration.ApiClient.ParameterToString(filterType)); // query parameter
            if (filterPublished != null) localVarQueryParams.Add("filter_published", Configuration.ApiClient.ParameterToString(filterPublished)); // query parameter
            if (filterImportId != null) localVarQueryParams.Add("filter_import_id", Configuration.ApiClient.ParameterToString(filterImportId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuestionsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageResourceQuestionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageResourceQuestionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageResourceQuestionResource)));
            
        }

        /// <summary>
        /// List the tags for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetTagsUsingGET1 (string id)
        {
             ApiResponse<List<string>> localVarResponse = GetTagsUsingGET1WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the tags for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetTagsUsingGET1WithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->GetTagsUsingGET1");

            var localVarPath = "/trivia/questions/{id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// List the tags for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetTagsUsingGET1Async (string id)
        {
             ApiResponse<List<string>> localVarResponse = await GetTagsUsingGET1AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the tags for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetTagsUsingGET1AsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->GetTagsUsingGET1");

            var localVarPath = "/trivia/questions/{id}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagsUsingGET1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// List and search tags by the beginning of the string For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for tags starting with the given text (optional)</param>
        /// <param name="filterCategory">Filter for tags on questions from a specific category (optional)</param>
        /// <param name="filterImportId">Filter for tags on questions from a specific import job (optional)</param>
        /// <returns>Collectionstring</returns>
        public Collectionstring GetTagsUsingGET2 (string filterSearch = null, string filterCategory = null, long? filterImportId = null)
        {
             ApiResponse<Collectionstring> localVarResponse = GetTagsUsingGET2WithHttpInfo(filterSearch, filterCategory, filterImportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List and search tags by the beginning of the string For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for tags starting with the given text (optional)</param>
        /// <param name="filterCategory">Filter for tags on questions from a specific category (optional)</param>
        /// <param name="filterImportId">Filter for tags on questions from a specific import job (optional)</param>
        /// <returns>ApiResponse of Collectionstring</returns>
        public ApiResponse< Collectionstring > GetTagsUsingGET2WithHttpInfo (string filterSearch = null, string filterCategory = null, long? filterImportId = null)
        {

            var localVarPath = "/trivia/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterImportId != null) localVarQueryParams.Add("filter_import_id", Configuration.ApiClient.ParameterToString(filterImportId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagsUsingGET2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collectionstring>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Collectionstring) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collectionstring)));
            
        }

        /// <summary>
        /// List and search tags by the beginning of the string For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for tags starting with the given text (optional)</param>
        /// <param name="filterCategory">Filter for tags on questions from a specific category (optional)</param>
        /// <param name="filterImportId">Filter for tags on questions from a specific import job (optional)</param>
        /// <returns>Task of Collectionstring</returns>
        public async System.Threading.Tasks.Task<Collectionstring> GetTagsUsingGET2Async (string filterSearch = null, string filterCategory = null, long? filterImportId = null)
        {
             ApiResponse<Collectionstring> localVarResponse = await GetTagsUsingGET2AsyncWithHttpInfo(filterSearch, filterCategory, filterImportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List and search tags by the beginning of the string For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSearch">Filter for tags starting with the given text (optional)</param>
        /// <param name="filterCategory">Filter for tags on questions from a specific category (optional)</param>
        /// <param name="filterImportId">Filter for tags on questions from a specific import job (optional)</param>
        /// <returns>Task of ApiResponse (Collectionstring)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Collectionstring>> GetTagsUsingGET2AsyncWithHttpInfo (string filterSearch = null, string filterCategory = null, long? filterImportId = null)
        {

            var localVarPath = "/trivia/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (filterSearch != null) localVarQueryParams.Add("filter_search", Configuration.ApiClient.ParameterToString(filterSearch)); // query parameter
            if (filterCategory != null) localVarQueryParams.Add("filter_category", Configuration.ApiClient.ParameterToString(filterCategory)); // query parameter
            if (filterImportId != null) localVarQueryParams.Add("filter_import_id", Configuration.ApiClient.ParameterToString(filterImportId)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTagsUsingGET2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Collectionstring>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Collectionstring) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Collectionstring)));
            
        }

        /// <summary>
        /// Get an import job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>ImportJobResource</returns>
        public ImportJobResource GetUsingGET (long? id)
        {
             ApiResponse<ImportJobResource> localVarResponse = GetUsingGETWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an import job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>ApiResponse of ImportJobResource</returns>
        public ApiResponse< ImportJobResource > GetUsingGETWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->GetUsingGET");

            var localVarPath = "/trivia/import/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResource)));
            
        }

        /// <summary>
        /// Get an import job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>Task of ImportJobResource</returns>
        public async System.Threading.Tasks.Task<ImportJobResource> GetUsingGETAsync (long? id)
        {
             ApiResponse<ImportJobResource> localVarResponse = await GetUsingGETAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an import job 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <returns>Task of ApiResponse (ImportJobResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImportJobResource>> GetUsingGETAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->GetUsingGET");

            var localVarPath = "/trivia/import/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResource)));
            
        }

        /// <summary>
        /// Remove an answer from a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns></returns>
        public void RemoveAnswersUsingDELETE (string questionId, string id)
        {
             RemoveAnswersUsingDELETEWithHttpInfo(questionId, id);
        }

        /// <summary>
        /// Remove an answer from a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveAnswersUsingDELETEWithHttpInfo (string questionId, string id)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling GamificationTriviaApi->RemoveAnswersUsingDELETE");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->RemoveAnswersUsingDELETE");

            var localVarPath = "/trivia/questions/{question_id}/answers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionId != null) localVarPathParams.Add("question_id", Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAnswersUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an answer from a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAnswersUsingDELETEAsync (string questionId, string id)
        {
             await RemoveAnswersUsingDELETEAsyncWithHttpInfo(questionId, id);

        }

        /// <summary>
        /// Remove an answer from a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAnswersUsingDELETEAsyncWithHttpInfo (string questionId, string id)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling GamificationTriviaApi->RemoveAnswersUsingDELETE");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->RemoveAnswersUsingDELETE");

            var localVarPath = "/trivia/questions/{question_id}/answers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionId != null) localVarPathParams.Add("question_id", Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAnswersUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a tag from a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The tag to remove</param>
        /// <returns></returns>
        public void RemoveTagUsingDELETE (string id, string tag)
        {
             RemoveTagUsingDELETEWithHttpInfo(id, tag);
        }

        /// <summary>
        /// Remove a tag from a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The tag to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveTagUsingDELETEWithHttpInfo (string id, string tag)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->RemoveTagUsingDELETE");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling GamificationTriviaApi->RemoveTagUsingDELETE");

            var localVarPath = "/trivia/questions/{id}/tags/{tag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTagUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a tag from a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The tag to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveTagUsingDELETEAsync (string id, string tag)
        {
             await RemoveTagUsingDELETEAsyncWithHttpInfo(id, tag);

        }

        /// <summary>
        /// Remove a tag from a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="tag">The tag to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveTagUsingDELETEAsyncWithHttpInfo (string id, string tag)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->RemoveTagUsingDELETE");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling GamificationTriviaApi->RemoveTagUsingDELETE");

            var localVarPath = "/trivia/questions/{id}/tags/{tag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", Configuration.ApiClient.ParameterToString(tag)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveTagUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Start processing an import job Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="publishNow">Whether the new questions should be published live immediately</param>
        /// <returns>ImportJobResource</returns>
        public ImportJobResource StartProcessUsingPOST (long? id, bool? publishNow)
        {
             ApiResponse<ImportJobResource> localVarResponse = StartProcessUsingPOSTWithHttpInfo(id, publishNow);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start processing an import job Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="publishNow">Whether the new questions should be published live immediately</param>
        /// <returns>ApiResponse of ImportJobResource</returns>
        public ApiResponse< ImportJobResource > StartProcessUsingPOSTWithHttpInfo (long? id, bool? publishNow)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->StartProcessUsingPOST");
            // verify the required parameter 'publishNow' is set
            if (publishNow == null)
                throw new ApiException(400, "Missing required parameter 'publishNow' when calling GamificationTriviaApi->StartProcessUsingPOST");

            var localVarPath = "/trivia/import/{id}/process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (publishNow != null) localVarQueryParams.Add("publish_now", Configuration.ApiClient.ParameterToString(publishNow)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartProcessUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResource)));
            
        }

        /// <summary>
        /// Start processing an import job Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="publishNow">Whether the new questions should be published live immediately</param>
        /// <returns>Task of ImportJobResource</returns>
        public async System.Threading.Tasks.Task<ImportJobResource> StartProcessUsingPOSTAsync (long? id, bool? publishNow)
        {
             ApiResponse<ImportJobResource> localVarResponse = await StartProcessUsingPOSTAsyncWithHttpInfo(id, publishNow);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start processing an import job Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="publishNow">Whether the new questions should be published live immediately</param>
        /// <returns>Task of ApiResponse (ImportJobResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImportJobResource>> StartProcessUsingPOSTAsyncWithHttpInfo (long? id, bool? publishNow)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->StartProcessUsingPOST");
            // verify the required parameter 'publishNow' is set
            if (publishNow == null)
                throw new ApiException(400, "Missing required parameter 'publishNow' when calling GamificationTriviaApi->StartProcessUsingPOST");

            var localVarPath = "/trivia/import/{id}/process";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (publishNow != null) localVarQueryParams.Add("publish_now", Configuration.ApiClient.ParameterToString(publishNow)); // query parameter

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartProcessUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResource)));
            
        }

        /// <summary>
        /// Update an answer for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <param name="answer">The updated answer (optional)</param>
        /// <returns></returns>
        public void UpdateAnswerUsingPUT (string questionId, string id, AnswerResource answer = null)
        {
             UpdateAnswerUsingPUTWithHttpInfo(questionId, id, answer);
        }

        /// <summary>
        /// Update an answer for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <param name="answer">The updated answer (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAnswerUsingPUTWithHttpInfo (string questionId, string id, AnswerResource answer = null)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling GamificationTriviaApi->UpdateAnswerUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->UpdateAnswerUsingPUT");

            var localVarPath = "/trivia/questions/{question_id}/answers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionId != null) localVarPathParams.Add("question_id", Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (answer != null && answer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(answer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answer; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAnswerUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an answer for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <param name="answer">The updated answer (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAnswerUsingPUTAsync (string questionId, string id, AnswerResource answer = null)
        {
             await UpdateAnswerUsingPUTAsyncWithHttpInfo(questionId, id, answer);

        }

        /// <summary>
        /// Update an answer for a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="questionId">The id of the question</param>
        /// <param name="id">The id of the answer</param>
        /// <param name="answer">The updated answer (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAnswerUsingPUTAsyncWithHttpInfo (string questionId, string id, AnswerResource answer = null)
        {
            // verify the required parameter 'questionId' is set
            if (questionId == null)
                throw new ApiException(400, "Missing required parameter 'questionId' when calling GamificationTriviaApi->UpdateAnswerUsingPUT");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->UpdateAnswerUsingPUT");

            var localVarPath = "/trivia/questions/{question_id}/answers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (questionId != null) localVarPathParams.Add("question_id", Configuration.ApiClient.ParameterToString(questionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (answer != null && answer.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(answer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answer; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAnswerUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a question template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns></returns>
        public void UpdateQuestionTemplateUsingPUT (string id, QuestionTemplateResource questionTemplateResource = null)
        {
             UpdateQuestionTemplateUsingPUTWithHttpInfo(id, questionTemplateResource);
        }

        /// <summary>
        /// Update a question template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateQuestionTemplateUsingPUTWithHttpInfo (string id, QuestionTemplateResource questionTemplateResource = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->UpdateQuestionTemplateUsingPUT");

            var localVarPath = "/trivia/questions/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (questionTemplateResource != null && questionTemplateResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(questionTemplateResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = questionTemplateResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionTemplateUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a question template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateQuestionTemplateUsingPUTAsync (string id, QuestionTemplateResource questionTemplateResource = null)
        {
             await UpdateQuestionTemplateUsingPUTAsyncWithHttpInfo(id, questionTemplateResource);

        }

        /// <summary>
        /// Update a question template 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the template</param>
        /// <param name="questionTemplateResource">The question template resource object (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateQuestionTemplateUsingPUTAsyncWithHttpInfo (string id, QuestionTemplateResource questionTemplateResource = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->UpdateQuestionTemplateUsingPUT");

            var localVarPath = "/trivia/questions/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (questionTemplateResource != null && questionTemplateResource.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(questionTemplateResource); // http body (model) parameter
            }
            else
            {
                localVarPostBody = questionTemplateResource; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionTemplateUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="question">The updated question (optional)</param>
        /// <returns>QuestionResource</returns>
        public QuestionResource UpdateQuestionUsingPUT (string id, QuestionResource question = null)
        {
             ApiResponse<QuestionResource> localVarResponse = UpdateQuestionUsingPUTWithHttpInfo(id, question);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="question">The updated question (optional)</param>
        /// <returns>ApiResponse of QuestionResource</returns>
        public ApiResponse< QuestionResource > UpdateQuestionUsingPUTWithHttpInfo (string id, QuestionResource question = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->UpdateQuestionUsingPUT");

            var localVarPath = "/trivia/questions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (question != null && question.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(question); // http body (model) parameter
            }
            else
            {
                localVarPostBody = question; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionResource)));
            
        }

        /// <summary>
        /// Update a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="question">The updated question (optional)</param>
        /// <returns>Task of QuestionResource</returns>
        public async System.Threading.Tasks.Task<QuestionResource> UpdateQuestionUsingPUTAsync (string id, QuestionResource question = null)
        {
             ApiResponse<QuestionResource> localVarResponse = await UpdateQuestionUsingPUTAsyncWithHttpInfo(id, question);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a question 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the question</param>
        /// <param name="question">The updated question (optional)</param>
        /// <returns>Task of ApiResponse (QuestionResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QuestionResource>> UpdateQuestionUsingPUTAsyncWithHttpInfo (string id, QuestionResource question = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->UpdateQuestionUsingPUT");

            var localVarPath = "/trivia/questions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (question != null && question.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(question); // http body (model) parameter
            }
            else
            {
                localVarPostBody = question; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateQuestionUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QuestionResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QuestionResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QuestionResource)));
            
        }

        /// <summary>
        /// Update an import job Changes should be made before process is started for there to be any effect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="request">The updated job (optional)</param>
        /// <returns>ImportJobResource</returns>
        public ImportJobResource UpdateUsingPUT (long? id, ImportJobResource request = null)
        {
             ApiResponse<ImportJobResource> localVarResponse = UpdateUsingPUTWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an import job Changes should be made before process is started for there to be any effect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="request">The updated job (optional)</param>
        /// <returns>ApiResponse of ImportJobResource</returns>
        public ApiResponse< ImportJobResource > UpdateUsingPUTWithHttpInfo (long? id, ImportJobResource request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->UpdateUsingPUT");

            var localVarPath = "/trivia/import/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResource)));
            
        }

        /// <summary>
        /// Update an import job Changes should be made before process is started for there to be any effect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="request">The updated job (optional)</param>
        /// <returns>Task of ImportJobResource</returns>
        public async System.Threading.Tasks.Task<ImportJobResource> UpdateUsingPUTAsync (long? id, ImportJobResource request = null)
        {
             ApiResponse<ImportJobResource> localVarResponse = await UpdateUsingPUTAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an import job Changes should be made before process is started for there to be any effect.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the job</param>
        /// <param name="request">The updated job (optional)</param>
        /// <returns>Task of ApiResponse (ImportJobResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ImportJobResource>> UpdateUsingPUTAsyncWithHttpInfo (long? id, ImportJobResource request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling GamificationTriviaApi->UpdateUsingPUT");

            var localVarPath = "/trivia/import/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (OAuth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ImportJobResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ImportJobResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ImportJobResource)));
            
        }

    }
}
