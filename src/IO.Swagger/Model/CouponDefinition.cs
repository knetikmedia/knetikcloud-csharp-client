/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CouponDefinition
    /// </summary>
    [DataContract]
    public partial class CouponDefinition :  IEquatable<CouponDefinition>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets DiscountType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DiscountTypeEnum
        {
            
            /// <summary>
            /// Enum Value for "value"
            /// </summary>
            [EnumMember(Value = "value")]
            Value,
            
            /// <summary>
            /// Enum Percentage for "percentage"
            /// </summary>
            [EnumMember(Value = "percentage")]
            Percentage
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Cart for "coupon_cart"
            /// </summary>
            [EnumMember(Value = "coupon_cart")]
            Cart,
            
            /// <summary>
            /// Enum Singleitem for "coupon_single_item"
            /// </summary>
            [EnumMember(Value = "coupon_single_item")]
            Singleitem,
            
            /// <summary>
            /// Enum Voucher for "coupon_voucher"
            /// </summary>
            [EnumMember(Value = "coupon_voucher")]
            Voucher,
            
            /// <summary>
            /// Enum Vendor for "coupon_vendor"
            /// </summary>
            [EnumMember(Value = "coupon_vendor")]
            Vendor,
            
            /// <summary>
            /// Enum Tag for "coupon_tag"
            /// </summary>
            [EnumMember(Value = "coupon_tag")]
            Tag
        }

        /// <summary>
        /// Gets or Sets DiscountType
        /// </summary>
        [DataMember(Name="discount_type", EmitDefaultValue=false)]
        public DiscountTypeEnum? DiscountType { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CouponDefinition" /> class.
        /// </summary>
        /// <param name="Code">Code.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DiscountType">DiscountType.</param>
        /// <param name="Exclusive">Exclusive.</param>
        /// <param name="MaxDiscount">MaxDiscount.</param>
        /// <param name="MaxQuantity">MaxQuantity.</param>
        /// <param name="MinCartTotal">MinCartTotal.</param>
        /// <param name="Name">Name.</param>
        /// <param name="SelfExclusive">SelfExclusive.</param>
        /// <param name="TargetItemId">TargetItemId.</param>
        /// <param name="Type">Type.</param>
        /// <param name="ValidForTags">ValidForTags.</param>
        /// <param name="Value">Value.</param>
        /// <param name="VendorId">VendorId.</param>
        public CouponDefinition(string Code = default(string), string Description = default(string), DiscountTypeEnum? DiscountType = default(DiscountTypeEnum?), bool? Exclusive = default(bool?), double? MaxDiscount = default(double?), int? MaxQuantity = default(int?), double? MinCartTotal = default(double?), string Name = default(string), bool? SelfExclusive = default(bool?), int? TargetItemId = default(int?), TypeEnum? Type = default(TypeEnum?), List<string> ValidForTags = default(List<string>), double? Value = default(double?), int? VendorId = default(int?))
        {
            this.Code = Code;
            this.Description = Description;
            this.DiscountType = DiscountType;
            this.Exclusive = Exclusive;
            this.MaxDiscount = MaxDiscount;
            this.MaxQuantity = MaxQuantity;
            this.MinCartTotal = MinCartTotal;
            this.Name = Name;
            this.SelfExclusive = SelfExclusive;
            this.TargetItemId = TargetItemId;
            this.Type = Type;
            this.ValidForTags = ValidForTags;
            this.Value = Value;
            this.VendorId = VendorId;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Exclusive
        /// </summary>
        [DataMember(Name="exclusive", EmitDefaultValue=false)]
        public bool? Exclusive { get; set; }
        /// <summary>
        /// Gets or Sets MaxDiscount
        /// </summary>
        [DataMember(Name="max_discount", EmitDefaultValue=false)]
        public double? MaxDiscount { get; set; }
        /// <summary>
        /// Gets or Sets MaxQuantity
        /// </summary>
        [DataMember(Name="max_quantity", EmitDefaultValue=false)]
        public int? MaxQuantity { get; set; }
        /// <summary>
        /// Gets or Sets MinCartTotal
        /// </summary>
        [DataMember(Name="min_cart_total", EmitDefaultValue=false)]
        public double? MinCartTotal { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets SelfExclusive
        /// </summary>
        [DataMember(Name="self_exclusive", EmitDefaultValue=false)]
        public bool? SelfExclusive { get; set; }
        /// <summary>
        /// Gets or Sets TargetItemId
        /// </summary>
        [DataMember(Name="target_item_id", EmitDefaultValue=false)]
        public int? TargetItemId { get; set; }
        /// <summary>
        /// Gets or Sets ValidForTags
        /// </summary>
        [DataMember(Name="valid_for_tags", EmitDefaultValue=false)]
        public List<string> ValidForTags { get; set; }
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }
        /// <summary>
        /// Gets or Sets VendorId
        /// </summary>
        [DataMember(Name="vendor_id", EmitDefaultValue=false)]
        public int? VendorId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CouponDefinition {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  Exclusive: ").Append(Exclusive).Append("\n");
            sb.Append("  MaxDiscount: ").Append(MaxDiscount).Append("\n");
            sb.Append("  MaxQuantity: ").Append(MaxQuantity).Append("\n");
            sb.Append("  MinCartTotal: ").Append(MinCartTotal).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SelfExclusive: ").Append(SelfExclusive).Append("\n");
            sb.Append("  TargetItemId: ").Append(TargetItemId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ValidForTags: ").Append(ValidForTags).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  VendorId: ").Append(VendorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CouponDefinition);
        }

        /// <summary>
        /// Returns true if CouponDefinition instances are equal
        /// </summary>
        /// <param name="other">Instance of CouponDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CouponDefinition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DiscountType == other.DiscountType ||
                    this.DiscountType != null &&
                    this.DiscountType.Equals(other.DiscountType)
                ) && 
                (
                    this.Exclusive == other.Exclusive ||
                    this.Exclusive != null &&
                    this.Exclusive.Equals(other.Exclusive)
                ) && 
                (
                    this.MaxDiscount == other.MaxDiscount ||
                    this.MaxDiscount != null &&
                    this.MaxDiscount.Equals(other.MaxDiscount)
                ) && 
                (
                    this.MaxQuantity == other.MaxQuantity ||
                    this.MaxQuantity != null &&
                    this.MaxQuantity.Equals(other.MaxQuantity)
                ) && 
                (
                    this.MinCartTotal == other.MinCartTotal ||
                    this.MinCartTotal != null &&
                    this.MinCartTotal.Equals(other.MinCartTotal)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.SelfExclusive == other.SelfExclusive ||
                    this.SelfExclusive != null &&
                    this.SelfExclusive.Equals(other.SelfExclusive)
                ) && 
                (
                    this.TargetItemId == other.TargetItemId ||
                    this.TargetItemId != null &&
                    this.TargetItemId.Equals(other.TargetItemId)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.ValidForTags == other.ValidForTags ||
                    this.ValidForTags != null &&
                    this.ValidForTags.SequenceEqual(other.ValidForTags)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.VendorId == other.VendorId ||
                    this.VendorId != null &&
                    this.VendorId.Equals(other.VendorId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DiscountType != null)
                    hash = hash * 59 + this.DiscountType.GetHashCode();
                if (this.Exclusive != null)
                    hash = hash * 59 + this.Exclusive.GetHashCode();
                if (this.MaxDiscount != null)
                    hash = hash * 59 + this.MaxDiscount.GetHashCode();
                if (this.MaxQuantity != null)
                    hash = hash * 59 + this.MaxQuantity.GetHashCode();
                if (this.MinCartTotal != null)
                    hash = hash * 59 + this.MinCartTotal.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.SelfExclusive != null)
                    hash = hash * 59 + this.SelfExclusive.GetHashCode();
                if (this.TargetItemId != null)
                    hash = hash * 59 + this.TargetItemId.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.ValidForTags != null)
                    hash = hash * 59 + this.ValidForTags.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.VendorId != null)
                    hash = hash * 59 + this.VendorId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
