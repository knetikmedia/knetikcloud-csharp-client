/* 
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MetricResource
    /// </summary>
    [DataContract]
    public partial class MetricResource :  IEquatable<MetricResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetricResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricResource" /> class.
        /// </summary>
        /// <param name="ActivityOccurenceId">The id of the activity occurence where this score/metric occured (required).</param>
        /// <param name="Name">The name of the metric (required).</param>
        /// <param name="Tags">Any tags for the metric. Each unique tag will translate into a unique leaderboard. Maximum 5 tags and 50 characters each.</param>
        /// <param name="Value">The value/score of the metric (required).</param>
        public MetricResource(long? ActivityOccurenceId = null, string Name = null, List<string> Tags = null, long? Value = null)
        {
            // to ensure "ActivityOccurenceId" is required (not null)
            if (ActivityOccurenceId == null)
            {
                throw new InvalidDataException("ActivityOccurenceId is a required property for MetricResource and cannot be null");
            }
            else
            {
                this.ActivityOccurenceId = ActivityOccurenceId;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for MetricResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for MetricResource and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            this.Tags = Tags;
        }
        
        /// <summary>
        /// The id of the activity occurence where this score/metric occured
        /// </summary>
        /// <value>The id of the activity occurence where this score/metric occured</value>
        [DataMember(Name="activity_occurence_id", EmitDefaultValue=false)]
        public long? ActivityOccurenceId { get; set; }
        /// <summary>
        /// The name of the metric
        /// </summary>
        /// <value>The name of the metric</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Any tags for the metric. Each unique tag will translate into a unique leaderboard. Maximum 5 tags and 50 characters each
        /// </summary>
        /// <value>Any tags for the metric. Each unique tag will translate into a unique leaderboard. Maximum 5 tags and 50 characters each</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }
        /// <summary>
        /// The value/score of the metric
        /// </summary>
        /// <value>The value/score of the metric</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public long? Value { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MetricResource {\n");
            sb.Append("  ActivityOccurenceId: ").Append(ActivityOccurenceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MetricResource);
        }

        /// <summary>
        /// Returns true if MetricResource instances are equal
        /// </summary>
        /// <param name="other">Instance of MetricResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MetricResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActivityOccurenceId == other.ActivityOccurenceId ||
                    this.ActivityOccurenceId != null &&
                    this.ActivityOccurenceId.Equals(other.ActivityOccurenceId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Tags == other.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActivityOccurenceId != null)
                    hash = hash * 59 + this.ActivityOccurenceId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Tags != null)
                    hash = hash * 59 + this.Tags.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
