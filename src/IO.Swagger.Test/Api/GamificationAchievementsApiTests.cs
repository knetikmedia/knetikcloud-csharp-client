/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing GamificationAchievementsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GamificationAchievementsApiTests
    {
        private GamificationAchievementsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GamificationAchievementsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GamificationAchievementsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GamificationAchievementsApi
            //Assert.IsInstanceOfType(typeof(GamificationAchievementsApi), instance, "instance is a GamificationAchievementsApi");
        }

        
        /// <summary>
        /// Test CreateAchievementUsingPOST
        /// </summary>
        [Test]
        public void CreateAchievementUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AchievementDefinitionResource achievement = null;
            //var response = instance.CreateAchievementUsingPOST(achievement);
            //Assert.IsInstanceOf<AchievementDefinitionResource> (response, "response is AchievementDefinitionResource");
        }
        
        /// <summary>
        /// Test CreateTemplateUsingPOST
        /// </summary>
        [Test]
        public void CreateTemplateUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateResource template = null;
            //var response = instance.CreateTemplateUsingPOST(template);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test DeleteAchievementTemplateUsingDELETE
        /// </summary>
        [Test]
        public void DeleteAchievementTemplateUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteAchievementTemplateUsingDELETE(id, cascade);
            
        }
        
        /// <summary>
        /// Test DeleteAchievementUsingDELETE
        /// </summary>
        [Test]
        public void DeleteAchievementUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteAchievementUsingDELETE(name);
            
        }
        
        /// <summary>
        /// Test FindAllByGroupNameUsingGET
        /// </summary>
        [Test]
        public void FindAllByGroupNameUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.FindAllByGroupNameUsingGET(name);
            //Assert.IsInstanceOf<List<AchievementDefinitionResource>> (response, "response is List<AchievementDefinitionResource>");
        }
        
        /// <summary>
        /// Test GetAchievementTemplateUsingGET
        /// </summary>
        [Test]
        public void GetAchievementTemplateUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetAchievementTemplateUsingGET(id);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test GetAchievementTemplatesUsingGET
        /// </summary>
        [Test]
        public void GetAchievementTemplatesUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetAchievementTemplatesUsingGET(size, page, order);
            //Assert.IsInstanceOf<PageResourceTemplateResource> (response, "response is PageResourceTemplateResource");
        }
        
        /// <summary>
        /// Test GetAchievementUsingGET
        /// </summary>
        [Test]
        public void GetAchievementUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetAchievementUsingGET(name);
            //Assert.IsInstanceOf<AchievementDefinitionResource> (response, "response is AchievementDefinitionResource");
        }
        
        /// <summary>
        /// Test GetAchievementsUsingGET
        /// </summary>
        [Test]
        public void GetAchievementsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterTagset = null;
            //string filterName = null;
            //bool? filterHidden = null;
            //bool? filterDerived = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetAchievementsUsingGET(filterTagset, filterName, filterHidden, filterDerived, size, page, order);
            //Assert.IsInstanceOf<PageResourceAchievementDefinitionResource> (response, "response is PageResourceAchievementDefinitionResource");
        }
        
        /// <summary>
        /// Test GetAllUserProgressForAchievementUsingGET
        /// </summary>
        [Test]
        public void GetAllUserProgressForAchievementUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string achievementName = null;
            //bool? filterAchievementDerived = null;
            //string filterAchievementTagset = null;
            //bool? filterAchievementHidden = null;
            //int? size = null;
            //int? page = null;
            //var response = instance.GetAllUserProgressForAchievementUsingGET(achievementName, filterAchievementDerived, filterAchievementTagset, filterAchievementHidden, size, page);
            //Assert.IsInstanceOf<PageResourceUserAchievementGroupResource> (response, "response is PageResourceUserAchievementGroupResource");
        }
        
        /// <summary>
        /// Test GetAllUserProgressUsingGET
        /// </summary>
        [Test]
        public void GetAllUserProgressUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? filterAchievementDerived = null;
            //string filterAchievementTagset = null;
            //string filterAchievementName = null;
            //bool? filterAchievementHidden = null;
            //int? size = null;
            //int? page = null;
            //var response = instance.GetAllUserProgressUsingGET(filterAchievementDerived, filterAchievementTagset, filterAchievementName, filterAchievementHidden, size, page);
            //Assert.IsInstanceOf<PageResourceUserAchievementGroupResource> (response, "response is PageResourceUserAchievementGroupResource");
        }
        
        /// <summary>
        /// Test GetAvailableTriggersUsingGET
        /// </summary>
        [Test]
        public void GetAvailableTriggersUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAvailableTriggersUsingGET();
            //Assert.IsInstanceOf<List<BreTriggerResource>> (response, "response is List<BreTriggerResource>");
        }
        
        /// <summary>
        /// Test GetUserProgressForAchievementUsingGET
        /// </summary>
        [Test]
        public void GetUserProgressForAchievementUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string achievementName = null;
            //var response = instance.GetUserProgressForAchievementUsingGET(userId, achievementName);
            //Assert.IsInstanceOf<UserAchievementGroupResource> (response, "response is UserAchievementGroupResource");
        }
        
        /// <summary>
        /// Test GetUserProgressUsingGET
        /// </summary>
        [Test]
        public void GetUserProgressUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //bool? filterAchievementDerived = null;
            //string filterAchievementTagset = null;
            //string filterAchievementName = null;
            //bool? filterAchievementHidden = null;
            //int? size = null;
            //int? page = null;
            //var response = instance.GetUserProgressUsingGET(userId, filterAchievementDerived, filterAchievementTagset, filterAchievementName, filterAchievementHidden, size, page);
            //Assert.IsInstanceOf<PageResourceUserAchievementGroupResource> (response, "response is PageResourceUserAchievementGroupResource");
        }
        
        /// <summary>
        /// Test UpdateAchievementUsingPUT
        /// </summary>
        [Test]
        public void UpdateAchievementUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //AchievementDefinitionResource achievement = null;
            //instance.UpdateAchievementUsingPUT(name, achievement);
            
        }
        
        /// <summary>
        /// Test UpdateProgressUsingPUT
        /// </summary>
        [Test]
        public void UpdateProgressUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //string achievementName = null;
            //AchievementProgressUpdateRequest request = null;
            //var response = instance.UpdateProgressUsingPUT(userId, achievementName, request);
            //Assert.IsInstanceOf<UserAchievementGroupResource> (response, "response is UserAchievementGroupResource");
        }
        
        /// <summary>
        /// Test UpdateTemplateUsingPUT
        /// </summary>
        [Test]
        public void UpdateTemplateUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplateResource template = null;
            //instance.UpdateTemplateUsingPUT(id, template);
            
        }
        
    }

}
