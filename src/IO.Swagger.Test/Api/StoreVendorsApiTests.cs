/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing StoreVendorsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StoreVendorsApiTests
    {
        private StoreVendorsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StoreVendorsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StoreVendorsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StoreVendorsApi
            //Assert.IsInstanceOfType(typeof(StoreVendorsApi), instance, "instance is a StoreVendorsApi");
        }

        
        /// <summary>
        /// Test CreateVendor
        /// </summary>
        [Test]
        public void CreateVendorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //VendorResource vendor = null;
            //var response = instance.CreateVendor(vendor);
            //Assert.IsInstanceOf<VendorResource> (response, "response is VendorResource");
        }
        
        /// <summary>
        /// Test DeleteVendor
        /// </summary>
        [Test]
        public void DeleteVendorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteVendor(id);
            
        }
        
        /// <summary>
        /// Test GetVendor
        /// </summary>
        [Test]
        public void GetVendorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetVendor(id);
            //Assert.IsInstanceOf<VendorResource> (response, "response is VendorResource");
        }
        
        /// <summary>
        /// Test GetVendors
        /// </summary>
        [Test]
        public void GetVendorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterName = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetVendors(filterName, size, page, order);
            //Assert.IsInstanceOf<PageResourceVendorResource> (response, "response is PageResourceVendorResource");
        }
        
        /// <summary>
        /// Test UpdateVendor
        /// </summary>
        [Test]
        public void UpdateVendorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //VendorResource vendor = null;
            //instance.UpdateVendor(id, vendor);
            
        }
        
    }

}
