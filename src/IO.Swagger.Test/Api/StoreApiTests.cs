/* 
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing StoreApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StoreApiTests
    {
        private StoreApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StoreApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StoreApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StoreApi
            //Assert.IsInstanceOfType(typeof(StoreApi), instance, "instance is a StoreApi");
        }

        
        /// <summary>
        /// Test CreateItemTemplateUsingPOST
        /// </summary>
        [Test]
        public void CreateItemTemplateUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StoreItemTemplateResource itemTemplateResource = null;
            //var response = instance.CreateItemTemplateUsingPOST(itemTemplateResource);
            //Assert.IsInstanceOf<StoreItemTemplateResource> (response, "response is StoreItemTemplateResource");
        }
        
        /// <summary>
        /// Test CreateStoreItemExternalUsingPOST
        /// </summary>
        [Test]
        public void CreateStoreItemExternalUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StoreItem storeItem = null;
            //var response = instance.CreateStoreItemExternalUsingPOST(storeItem);
            //Assert.IsInstanceOf<StoreItem> (response, "response is StoreItem");
        }
        
        /// <summary>
        /// Test DeleteItemTemplateUsingDELETE
        /// </summary>
        [Test]
        public void DeleteItemTemplateUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteItemTemplateUsingDELETE(id, cascade);
            
        }
        
        /// <summary>
        /// Test DeleteStoreItemUsingDELETE1
        /// </summary>
        [Test]
        public void DeleteStoreItemUsingDELETE1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteStoreItemUsingDELETE1(id);
            
        }
        
        /// <summary>
        /// Test GetItemTemplateUsingGET
        /// </summary>
        [Test]
        public void GetItemTemplateUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetItemTemplateUsingGET(id);
            //Assert.IsInstanceOf<StoreItemTemplateResource> (response, "response is StoreItemTemplateResource");
        }
        
        /// <summary>
        /// Test GetItemTemplatesUsingGET
        /// </summary>
        [Test]
        public void GetItemTemplatesUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetItemTemplatesUsingGET(size, page, order);
            //Assert.IsInstanceOf<PageStoreItemTemplateResource> (response, "response is PageStoreItemTemplateResource");
        }
        
        /// <summary>
        /// Test GetStoreItemUsingGET1
        /// </summary>
        [Test]
        public void GetStoreItemUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetStoreItemUsingGET1(id);
            //Assert.IsInstanceOf<StoreItem> (response, "response is StoreItem");
        }
        
        /// <summary>
        /// Test GetStoreItemsUsingGET
        /// </summary>
        [Test]
        public void GetStoreItemsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterNameSearch = null;
            //string filterUniqueKey = null;
            //bool? filterPublished = null;
            //bool? filterDisplayable = null;
            //string filterStart = null;
            //string filterEnd = null;
            //string filterStartDate = null;
            //string filterStopDate = null;
            //string filterSku = null;
            //string filterPrice = null;
            //string filterTag = null;
            //string filterItemsByType = null;
            //string filterBundledSkus = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetStoreItemsUsingGET(filterNameSearch, filterUniqueKey, filterPublished, filterDisplayable, filterStart, filterEnd, filterStartDate, filterStopDate, filterSku, filterPrice, filterTag, filterItemsByType, filterBundledSkus, size, page, order);
            //Assert.IsInstanceOf<PageStoreItem> (response, "response is PageStoreItem");
        }
        
        /// <summary>
        /// Test GetUsingGET2
        /// </summary>
        [Test]
        public void GetUsingGET2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //StoreListRequest storeListRequest = null;
            //var response = instance.GetUsingGET2(storeListRequest);
            //Assert.IsInstanceOf<PageStoreItem> (response, "response is PageStoreItem");
        }
        
        /// <summary>
        /// Test UpdateItemTemplateUsingPUT
        /// </summary>
        [Test]
        public void UpdateItemTemplateUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //StoreItemTemplateResource itemTemplateResource = null;
            //instance.UpdateItemTemplateUsingPUT(id, itemTemplateResource);
            
        }
        
        /// <summary>
        /// Test UpdateStoreItemExternalUsingPUT
        /// </summary>
        [Test]
        public void UpdateStoreItemExternalUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //StoreItem storeItem = null;
            //instance.UpdateStoreItemExternalUsingPUT(id, storeItem);
            
        }
        
    }

}
