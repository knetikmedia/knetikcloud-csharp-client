/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing MediaArtistsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MediaArtistsApiTests
    {
        private MediaArtistsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MediaArtistsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MediaArtistsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MediaArtistsApi
            //Assert.IsInstanceOfType(typeof(MediaArtistsApi), instance, "instance is a MediaArtistsApi");
        }

        
        /// <summary>
        /// Test AddArtistUsingPOST
        /// </summary>
        [Test]
        public void AddArtistUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ArtistResource artistResource = null;
            //var response = instance.AddArtistUsingPOST(artistResource);
            //Assert.IsInstanceOf<ArtistResource> (response, "response is ArtistResource");
        }
        
        /// <summary>
        /// Test CreateArtistTemplateUsingPOST
        /// </summary>
        [Test]
        public void CreateArtistTemplateUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateResource artistTemplateResource = null;
            //var response = instance.CreateArtistTemplateUsingPOST(artistTemplateResource);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test DeleteArtistTemplateUsingDELETE
        /// </summary>
        [Test]
        public void DeleteArtistTemplateUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteArtistTemplateUsingDELETE(id, cascade);
            
        }
        
        /// <summary>
        /// Test DeleteArtistUsingDELETE
        /// </summary>
        [Test]
        public void DeleteArtistUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteArtistUsingDELETE(id);
            
        }
        
        /// <summary>
        /// Test GetArtistTemplateUsingGET
        /// </summary>
        [Test]
        public void GetArtistTemplateUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetArtistTemplateUsingGET(id);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test GetArtistTemplatesUsingGET
        /// </summary>
        [Test]
        public void GetArtistTemplatesUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetArtistTemplatesUsingGET(size, page, order);
            //Assert.IsInstanceOf<PageResourceTemplateResource> (response, "response is PageResourceTemplateResource");
        }
        
        /// <summary>
        /// Test GetArtistUsingGET
        /// </summary>
        [Test]
        public void GetArtistUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //int? showContributions = null;
            //var response = instance.GetArtistUsingGET(id, showContributions);
            //Assert.IsInstanceOf<ArtistResource> (response, "response is ArtistResource");
        }
        
        /// <summary>
        /// Test SearchArtistsUsingGET
        /// </summary>
        [Test]
        public void SearchArtistsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterArtistsByName = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.SearchArtistsUsingGET(filterArtistsByName, size, page, order);
            //Assert.IsInstanceOf<PageResourceArtistResource> (response, "response is PageResourceArtistResource");
        }
        
        /// <summary>
        /// Test UpdateArtistTemplateUsingPUT
        /// </summary>
        [Test]
        public void UpdateArtistTemplateUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplateResource artistTemplateResource = null;
            //instance.UpdateArtistTemplateUsingPUT(id, artistTemplateResource);
            
        }
        
        /// <summary>
        /// Test UpdateArtistUsingPUT
        /// </summary>
        [Test]
        public void UpdateArtistUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //ArtistResource artistResource = null;
            //instance.UpdateArtistUsingPUT(id, artistResource);
            
        }
        
    }

}
