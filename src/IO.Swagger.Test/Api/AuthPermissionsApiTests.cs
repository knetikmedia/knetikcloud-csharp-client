/* 
 * Knetik Platform API Documentation Latest
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AuthPermissionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AuthPermissionsApiTests
    {
        private AuthPermissionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AuthPermissionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AuthPermissionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AuthPermissionsApi
            //Assert.IsInstanceOfType(typeof(AuthPermissionsApi), instance, "instance is a AuthPermissionsApi");
        }

        
        /// <summary>
        /// Test CreatePermissionUsingPOST
        /// </summary>
        [Test]
        public void CreatePermissionUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PermissionResource permissionResource = null;
            //var response = instance.CreatePermissionUsingPOST(permissionResource);
            //Assert.IsInstanceOf<PermissionResource> (response, "response is PermissionResource");
        }
        
        /// <summary>
        /// Test DeletePermissionUsingDELETE
        /// </summary>
        [Test]
        public void DeletePermissionUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string permission = null;
            //bool? force = null;
            //instance.DeletePermissionUsingDELETE(permission, force);
            
        }
        
        /// <summary>
        /// Test GetPermissionUsingGET
        /// </summary>
        [Test]
        public void GetPermissionUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string permission = null;
            //var response = instance.GetPermissionUsingGET(permission);
            //Assert.IsInstanceOf<PermissionResource> (response, "response is PermissionResource");
        }
        
        /// <summary>
        /// Test GetPermissionUsingGET1
        /// </summary>
        [Test]
        public void GetPermissionUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetPermissionUsingGET1(size, page, order);
            //Assert.IsInstanceOf<PageResourcePermissionResource> (response, "response is PageResourcePermissionResource");
        }
        
        /// <summary>
        /// Test UpdatePermissionUsingPUT
        /// </summary>
        [Test]
        public void UpdatePermissionUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string permission = null;
            //PermissionResource permissionResource = null;
            //instance.UpdatePermissionUsingPUT(permission, permissionResource);
            
        }
        
    }

}
