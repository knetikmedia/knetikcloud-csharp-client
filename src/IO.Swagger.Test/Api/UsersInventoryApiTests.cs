/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UsersInventoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersInventoryApiTests
    {
        private UsersInventoryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersInventoryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersInventoryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersInventoryApi
            //Assert.IsInstanceOfType(typeof(UsersInventoryApi), instance, "instance is a UsersInventoryApi");
        }

        
        /// <summary>
        /// Test AddItemToUserInventory
        /// </summary>
        [Test]
        public void AddItemToUserInventoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //UserInventoryAddRequest userInventoryAddRequest = null;
            //var response = instance.AddItemToUserInventory(id, userInventoryAddRequest);
            //Assert.IsInstanceOf<InvoiceResource> (response, "response is InvoiceResource");
        }
        
        /// <summary>
        /// Test CheckUserEntitlementItem
        /// </summary>
        [Test]
        public void CheckUserEntitlementItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //int? itemId = null;
            //string sku = null;
            //instance.CheckUserEntitlementItem(userId, itemId, sku);
            
        }
        
        /// <summary>
        /// Test CreateEntitlementItem
        /// </summary>
        [Test]
        public void CreateEntitlementItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EntitlementItem entitlementItem = null;
            //var response = instance.CreateEntitlementItem(entitlementItem);
            //Assert.IsInstanceOf<EntitlementItem> (response, "response is EntitlementItem");
        }
        
        /// <summary>
        /// Test CreateEntitlementTemplate
        /// </summary>
        [Test]
        public void CreateEntitlementTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ItemTemplateResource template = null;
            //var response = instance.CreateEntitlementTemplate(template);
            //Assert.IsInstanceOf<ItemTemplateResource> (response, "response is ItemTemplateResource");
        }
        
        /// <summary>
        /// Test DeleteEntitlementItem
        /// </summary>
        [Test]
        public void DeleteEntitlementItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? entitlementId = null;
            //instance.DeleteEntitlementItem(entitlementId);
            
        }
        
        /// <summary>
        /// Test DeleteEntitlementTemplate
        /// </summary>
        [Test]
        public void DeleteEntitlementTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteEntitlementTemplate(id, cascade);
            
        }
        
        /// <summary>
        /// Test GetEntitlementItem
        /// </summary>
        [Test]
        public void GetEntitlementItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? entitlementId = null;
            //var response = instance.GetEntitlementItem(entitlementId);
            //Assert.IsInstanceOf<EntitlementItem> (response, "response is EntitlementItem");
        }
        
        /// <summary>
        /// Test GetEntitlementItems
        /// </summary>
        [Test]
        public void GetEntitlementItemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetEntitlementItems(size, page, order);
            //Assert.IsInstanceOf<PageResourceEntitlementItem> (response, "response is PageResourceEntitlementItem");
        }
        
        /// <summary>
        /// Test GetEntitlementTemplate
        /// </summary>
        [Test]
        public void GetEntitlementTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetEntitlementTemplate(id);
            //Assert.IsInstanceOf<ItemTemplateResource> (response, "response is ItemTemplateResource");
        }
        
        /// <summary>
        /// Test GetEntitlementTemplates
        /// </summary>
        [Test]
        public void GetEntitlementTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetEntitlementTemplates(size, page, order);
            //Assert.IsInstanceOf<PageResourceItemTemplateResource> (response, "response is PageResourceItemTemplateResource");
        }
        
        /// <summary>
        /// Test GetUserInventory
        /// </summary>
        [Test]
        public void GetUserInventoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? id = null;
            //var response = instance.GetUserInventory(userId, id);
            //Assert.IsInstanceOf<UserInventoryResource> (response, "response is UserInventoryResource");
        }
        
        /// <summary>
        /// Test GetUserInventory1
        /// </summary>
        [Test]
        public void GetUserInventory1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //bool? inactive = null;
            //int? size = null;
            //int? page = null;
            //string filterItemName = null;
            //long? filterMinDate = null;
            //long? filterMaxDate = null;
            //var response = instance.GetUserInventory1(id, inactive, size, page, filterItemName, filterMinDate, filterMaxDate);
            //Assert.IsInstanceOf<PageResourceUserInventoryResource> (response, "response is PageResourceUserInventoryResource");
        }
        
        /// <summary>
        /// Test GetUserInventoryLog
        /// </summary>
        [Test]
        public void GetUserInventoryLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //int? id = null;
            //int? size = null;
            //int? page = null;
            //var response = instance.GetUserInventoryLog(userId, id, size, page);
            //Assert.IsInstanceOf<PageResourceUserItemLogResource> (response, "response is PageResourceUserItemLogResource");
        }
        
        /// <summary>
        /// Test GetUserInventoryLog1
        /// </summary>
        [Test]
        public void GetUserInventoryLog1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? id = null;
            //long? timestamp = null;
            //instance.GetUserInventoryLog1(userId, id, timestamp);
            
        }
        
        /// <summary>
        /// Test GetUsersInventory
        /// </summary>
        [Test]
        public void GetUsersInventoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? inactive = null;
            //int? size = null;
            //int? page = null;
            //string filterItemName = null;
            //string filterUsername = null;
            //string filterGroup = null;
            //string filterDate = null;
            //var response = instance.GetUsersInventory(inactive, size, page, filterItemName, filterUsername, filterGroup, filterDate);
            //Assert.IsInstanceOf<PageResourceUserInventoryResource> (response, "response is PageResourceUserInventoryResource");
        }
        
        /// <summary>
        /// Test GrantUserEntitlement
        /// </summary>
        [Test]
        public void GrantUserEntitlementTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //EntitlementGrantRequest grantRequest = null;
            //instance.GrantUserEntitlement(userId, grantRequest);
            
        }
        
        /// <summary>
        /// Test UpdateEntitlementItem
        /// </summary>
        [Test]
        public void UpdateEntitlementItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? entitlementId = null;
            //EntitlementItem entitlementItem = null;
            //instance.UpdateEntitlementItem(entitlementId, entitlementItem);
            
        }
        
        /// <summary>
        /// Test UpdateEntitlementTemplate
        /// </summary>
        [Test]
        public void UpdateEntitlementTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //ItemTemplateResource template = null;
            //instance.UpdateEntitlementTemplate(id, template);
            
        }
        
        /// <summary>
        /// Test UpdateUserInventoryBehaviorData
        /// </summary>
        [Test]
        public void UpdateUserInventoryBehaviorDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? id = null;
            //Object data = null;
            //instance.UpdateUserInventoryBehaviorData(userId, id, data);
            
        }
        
        /// <summary>
        /// Test UpdateUserInventoryStatus
        /// </summary>
        [Test]
        public void UpdateUserInventoryStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? id = null;
            //string inventoryStatus = null;
            //instance.UpdateUserInventoryStatus(userId, id, inventoryStatus);
            
        }
        
        /// <summary>
        /// Test UseUserEntitlementItem
        /// </summary>
        [Test]
        public void UseUserEntitlementItemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //int? itemId = null;
            //string sku = null;
            //string info = null;
            //instance.UseUserEntitlementItem(userId, itemId, sku, info);
            
        }
        
    }

}
