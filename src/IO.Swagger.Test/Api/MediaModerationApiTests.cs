/* 
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing MediaModerationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MediaModerationApiTests
    {
        private MediaModerationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MediaModerationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MediaModerationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MediaModerationApi
            //Assert.IsInstanceOfType(typeof(MediaModerationApi), instance, "instance is a MediaModerationApi");
        }

        
        /// <summary>
        /// Test GetFlagReportUsingGET
        /// </summary>
        [Test]
        public void GetFlagReportUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.GetFlagReportUsingGET(id);
            
        }
        
        /// <summary>
        /// Test GetFlagsReportUsingGET
        /// </summary>
        [Test]
        public void GetFlagsReportUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? excludeResolved = null;
            //string filterContext = null;
            //int? size = null;
            //int? page = null;
            //var response = instance.GetFlagsReportUsingGET(excludeResolved, filterContext, size, page);
            //Assert.IsInstanceOf<PageFlagReportResource> (response, "response is PageFlagReportResource");
        }
        
        /// <summary>
        /// Test SetFlagResolutionUsingPUT
        /// </summary>
        [Test]
        public void SetFlagResolutionUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //FlagReportResource flagReportResource = null;
            //instance.SetFlagResolutionUsingPUT(id, flagReportResource);
            
        }
        
    }

}
