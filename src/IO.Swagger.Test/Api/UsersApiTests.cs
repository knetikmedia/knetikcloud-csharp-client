/* 
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsInstanceOfType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test CreateUserTemplateUsingPOST
        /// </summary>
        [Test]
        public void CreateUserTemplateUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateResource userTemplateResource = null;
            //var response = instance.CreateUserTemplateUsingPOST(userTemplateResource);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test DeleteUserTemplateUsingDELETE
        /// </summary>
        [Test]
        public void DeleteUserTemplateUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteUserTemplateUsingDELETE(id, cascade);
            
        }
        
        /// <summary>
        /// Test DoPasswordResetUsingPUT
        /// </summary>
        [Test]
        public void DoPasswordResetUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //NewPasswordRequest newPasswordRequest = null;
            //instance.DoPasswordResetUsingPUT(id, newPasswordRequest);
            
        }
        
        /// <summary>
        /// Test GetUserTemplateUsingGET
        /// </summary>
        [Test]
        public void GetUserTemplateUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetUserTemplateUsingGET(id);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test GetUserTemplatesUsingGET
        /// </summary>
        [Test]
        public void GetUserTemplatesUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetUserTemplatesUsingGET(size, page, order);
            //Assert.IsInstanceOf<PageTemplateResource> (response, "response is PageTemplateResource");
        }
        
        /// <summary>
        /// Test GetUserUsingGET
        /// </summary>
        [Test]
        public void GetUserUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetUserUsingGET(id);
            //Assert.IsInstanceOf<UserResource> (response, "response is UserResource");
        }
        
        /// <summary>
        /// Test GetUsersUsingGET
        /// </summary>
        [Test]
        public void GetUsersUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterRole = null;
            //string filterDisplayname = null;
            //string filterEmail = null;
            //string filterFirstname = null;
            //string filterFullname = null;
            //string filterLastname = null;
            //string filterUsername = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetUsersUsingGET(filterRole, filterDisplayname, filterEmail, filterFirstname, filterFullname, filterLastname, filterUsername, size, page, order);
            //Assert.IsInstanceOf<PageUserBaseResource> (response, "response is PageUserBaseResource");
        }
        
        /// <summary>
        /// Test InitiatePasswordResetUsingPOST
        /// </summary>
        [Test]
        public void InitiatePasswordResetUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.InitiatePasswordResetUsingPOST(id);
            
        }
        
        /// <summary>
        /// Test RegisterUserUsingPOST
        /// </summary>
        [Test]
        public void RegisterUserUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserResource userResource = null;
            //var response = instance.RegisterUserUsingPOST(userResource);
            //Assert.IsInstanceOf<UserResource> (response, "response is UserResource");
        }
        
        /// <summary>
        /// Test SetPasswordUsingPUT
        /// </summary>
        [Test]
        public void SetPasswordUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string password = null;
            //instance.SetPasswordUsingPUT(id, password);
            
        }
        
        /// <summary>
        /// Test UpdateUserTemplateUsingPUT
        /// </summary>
        [Test]
        public void UpdateUserTemplateUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplateResource userTemplateResource = null;
            //instance.UpdateUserTemplateUsingPUT(id, userTemplateResource);
            
        }
        
        /// <summary>
        /// Test UpdateUserUsingPUT
        /// </summary>
        [Test]
        public void UpdateUserUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //UserResource userResource = null;
            //instance.UpdateUserUsingPUT(id, userResource);
            
        }
        
    }

}
