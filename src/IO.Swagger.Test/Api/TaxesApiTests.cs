/* 
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TaxesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TaxesApiTests
    {
        private TaxesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TaxesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TaxesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TaxesApi
            //Assert.IsInstanceOfType(typeof(TaxesApi), instance, "instance is a TaxesApi");
        }

        
        /// <summary>
        /// Test CreateTaxUsingPOST
        /// </summary>
        [Test]
        public void CreateTaxUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryCodeIso3 = null;
            //StateTaxResource taxResource = null;
            //instance.CreateTaxUsingPOST(countryCodeIso3, taxResource);
            
        }
        
        /// <summary>
        /// Test DeleteTaxUsingDELETE
        /// </summary>
        [Test]
        public void DeleteTaxUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryCodeIso3 = null;
            //instance.DeleteTaxUsingDELETE(countryCodeIso3);
            
        }
        
        /// <summary>
        /// Test DeleteTaxUsingDELETE1
        /// </summary>
        [Test]
        public void DeleteTaxUsingDELETE1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryCodeIso3 = null;
            //string stateCode = null;
            //instance.DeleteTaxUsingDELETE1(countryCodeIso3, stateCode);
            
        }
        
        /// <summary>
        /// Test GetAllTaxesUsingGET
        /// </summary>
        [Test]
        public void GetAllTaxesUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetAllTaxesUsingGET(size, page, order);
            //Assert.IsInstanceOf<PageStateTaxResource> (response, "response is PageStateTaxResource");
        }
        
        /// <summary>
        /// Test GetTaxUsingGET
        /// </summary>
        [Test]
        public void GetTaxUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryCodeIso3 = null;
            //var response = instance.GetTaxUsingGET(countryCodeIso3);
            //Assert.IsInstanceOf<CountryTaxResource> (response, "response is CountryTaxResource");
        }
        
        /// <summary>
        /// Test GetTaxUsingGET1
        /// </summary>
        [Test]
        public void GetTaxUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryCodeIso3 = null;
            //string stateCode = null;
            //var response = instance.GetTaxUsingGET1(countryCodeIso3, stateCode);
            //Assert.IsInstanceOf<StateTaxResource> (response, "response is StateTaxResource");
        }
        
        /// <summary>
        /// Test GetTaxesUsingGET
        /// </summary>
        [Test]
        public void GetTaxesUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetTaxesUsingGET(size, page, order);
            //Assert.IsInstanceOf<PageCountryTaxResource> (response, "response is PageCountryTaxResource");
        }
        
        /// <summary>
        /// Test GetTaxesUsingGET1
        /// </summary>
        [Test]
        public void GetTaxesUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryCodeIso3 = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetTaxesUsingGET1(countryCodeIso3, size, page, order);
            //Assert.IsInstanceOf<PageStateTaxResource> (response, "response is PageStateTaxResource");
        }
        
        /// <summary>
        /// Test UpdateTaxUsingPOST
        /// </summary>
        [Test]
        public void UpdateTaxUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CountryTaxResource taxResource = null;
            //instance.UpdateTaxUsingPOST(taxResource);
            
        }
        
        /// <summary>
        /// Test UpdateTaxUsingPUT
        /// </summary>
        [Test]
        public void UpdateTaxUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryCodeIso3 = null;
            //CountryTaxResource taxResource = null;
            //instance.UpdateTaxUsingPUT(countryCodeIso3, taxResource);
            
        }
        
        /// <summary>
        /// Test UpdateTaxUsingPUT1
        /// </summary>
        [Test]
        public void UpdateTaxUsingPUT1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryCodeIso3 = null;
            //string stateCode = null;
            //StateTaxResource taxResource = null;
            //instance.UpdateTaxUsingPUT1(countryCodeIso3, stateCode, taxResource);
            
        }
        
    }

}
