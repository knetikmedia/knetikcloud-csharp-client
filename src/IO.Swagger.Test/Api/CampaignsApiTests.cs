/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CampaignsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CampaignsApiTests
    {
        private CampaignsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CampaignsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CampaignsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CampaignsApi
            //Assert.IsInstanceOfType(typeof(CampaignsApi), instance, "instance is a CampaignsApi");
        }

        
        /// <summary>
        /// Test AddChallengesUsingPOST
        /// </summary>
        [Test]
        public void AddChallengesUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //long? challengeId = null;
            //instance.AddChallengesUsingPOST(id, challengeId);
            
        }
        
        /// <summary>
        /// Test CreateCampaignTemplateUsingPOST
        /// </summary>
        [Test]
        public void CreateCampaignTemplateUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateResource campaignTemplateResource = null;
            //var response = instance.CreateCampaignTemplateUsingPOST(campaignTemplateResource);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test CreateCampaignUsingPOST
        /// </summary>
        [Test]
        public void CreateCampaignUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CampaignResource campaignResource = null;
            //var response = instance.CreateCampaignUsingPOST(campaignResource);
            //Assert.IsInstanceOf<CampaignResource> (response, "response is CampaignResource");
        }
        
        /// <summary>
        /// Test DeleteCampaignTemplateUsingDELETE
        /// </summary>
        [Test]
        public void DeleteCampaignTemplateUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteCampaignTemplateUsingDELETE(id, cascade);
            
        }
        
        /// <summary>
        /// Test DeleteCampaignUsingDELETE
        /// </summary>
        [Test]
        public void DeleteCampaignUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteCampaignUsingDELETE(id);
            
        }
        
        /// <summary>
        /// Test GetCampaignTemplateUsingGET
        /// </summary>
        [Test]
        public void GetCampaignTemplateUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetCampaignTemplateUsingGET(id);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test GetCampaignTemplatesUsingGET
        /// </summary>
        [Test]
        public void GetCampaignTemplatesUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetCampaignTemplatesUsingGET(size, page, order);
            //Assert.IsInstanceOf<PageResourceTemplateResource> (response, "response is PageResourceTemplateResource");
        }
        
        /// <summary>
        /// Test GetCampaignUsingGET
        /// </summary>
        [Test]
        public void GetCampaignUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetCampaignUsingGET(id);
            //Assert.IsInstanceOf<CampaignResource> (response, "response is CampaignResource");
        }
        
        /// <summary>
        /// Test GetCampaignsUsingGET
        /// </summary>
        [Test]
        public void GetCampaignsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? filterActive = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetCampaignsUsingGET(filterActive, size, page, order);
            //Assert.IsInstanceOf<PageResourceCampaignResource> (response, "response is PageResourceCampaignResource");
        }
        
        /// <summary>
        /// Test GetChallengesUsingGET
        /// </summary>
        [Test]
        public void GetChallengesUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetChallengesUsingGET(id);
            //Assert.IsInstanceOf<PageResourceChallengeResource> (response, "response is PageResourceChallengeResource");
        }
        
        /// <summary>
        /// Test RemoveChallengeUsingDELETE
        /// </summary>
        [Test]
        public void RemoveChallengeUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? campaignId = null;
            //long? id = null;
            //instance.RemoveChallengeUsingDELETE(campaignId, id);
            
        }
        
        /// <summary>
        /// Test UpdateCampaignTemplateUsingPUT
        /// </summary>
        [Test]
        public void UpdateCampaignTemplateUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplateResource campaignTemplateResource = null;
            //instance.UpdateCampaignTemplateUsingPUT(id, campaignTemplateResource);
            
        }
        
        /// <summary>
        /// Test UpdateCampaignUsingPUT
        /// </summary>
        [Test]
        public void UpdateCampaignUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //CampaignResource campaignResource = null;
            //instance.UpdateCampaignUsingPUT(id, campaignResource);
            
        }
        
    }

}
