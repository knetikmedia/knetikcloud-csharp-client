/* 
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CampaignsRewardsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CampaignsRewardsApiTests
    {
        private CampaignsRewardsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CampaignsRewardsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CampaignsRewardsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CampaignsRewardsApi
            //Assert.IsInstanceOfType(typeof(CampaignsRewardsApi), instance, "instance is a CampaignsRewardsApi");
        }

        
        /// <summary>
        /// Test CreateRewardSetUsingPOST
        /// </summary>
        [Test]
        public void CreateRewardSetUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RewardSetResource rewardSetResource = null;
            //var response = instance.CreateRewardSetUsingPOST(rewardSetResource);
            //Assert.IsInstanceOf<RewardSetResource> (response, "response is RewardSetResource");
        }
        
        /// <summary>
        /// Test DeleteRewardSetUsingDELETE
        /// </summary>
        [Test]
        public void DeleteRewardSetUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //instance.DeleteRewardSetUsingDELETE(id);
            
        }
        
        /// <summary>
        /// Test GetRewardSetUsingGET
        /// </summary>
        [Test]
        public void GetRewardSetUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //var response = instance.GetRewardSetUsingGET(id);
            //Assert.IsInstanceOf<RewardSetResource> (response, "response is RewardSetResource");
        }
        
        /// <summary>
        /// Test GetRewardSetsUsingGET
        /// </summary>
        [Test]
        public void GetRewardSetsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetRewardSetsUsingGET(size, page, order);
            //Assert.IsInstanceOf<PageRewardSetResource> (response, "response is PageRewardSetResource");
        }
        
        /// <summary>
        /// Test UpdateRewardSetUsingPUT
        /// </summary>
        [Test]
        public void UpdateRewardSetUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //RewardSetResource rewardSetResource = null;
            //instance.UpdateRewardSetUsingPUT(id, rewardSetResource);
            
        }
        
    }

}
