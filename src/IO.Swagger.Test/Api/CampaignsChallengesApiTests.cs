/* 
 * Knetik Platform API Documentation latest 
 *
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CampaignsChallengesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CampaignsChallengesApiTests
    {
        private CampaignsChallengesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CampaignsChallengesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CampaignsChallengesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CampaignsChallengesApi
            //Assert.IsInstanceOfType(typeof(CampaignsChallengesApi), instance, "instance is a CampaignsChallengesApi");
        }

        
        /// <summary>
        /// Test CreateChallengeActivityUsingPOST
        /// </summary>
        [Test]
        public void CreateChallengeActivityUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? challengeId = null;
            //ChallengeActivityResource challengeActivityResource = null;
            //bool? validateSettings = null;
            //var response = instance.CreateChallengeActivityUsingPOST(challengeId, challengeActivityResource, validateSettings);
            //Assert.IsInstanceOf<ChallengeActivityResource> (response, "response is ChallengeActivityResource");
        }
        
        /// <summary>
        /// Test CreateChallengeTemplateUsingPOST
        /// </summary>
        [Test]
        public void CreateChallengeTemplateUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateResource challengeTemplateResource = null;
            //var response = instance.CreateChallengeTemplateUsingPOST(challengeTemplateResource);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test CreateChallengeUsingPOST
        /// </summary>
        [Test]
        public void CreateChallengeUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChallengeResource challengeResource = null;
            //var response = instance.CreateChallengeUsingPOST(challengeResource);
            //Assert.IsInstanceOf<ChallengeResource> (response, "response is ChallengeResource");
        }
        
        /// <summary>
        /// Test DeleteChallengeActivityUsingDELETE
        /// </summary>
        [Test]
        public void DeleteChallengeActivityUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? activityId = null;
            //long? challengeId = null;
            //instance.DeleteChallengeActivityUsingDELETE(activityId, challengeId);
            
        }
        
        /// <summary>
        /// Test DeleteChallengeEventUsingDELETE
        /// </summary>
        [Test]
        public void DeleteChallengeEventUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteChallengeEventUsingDELETE(id);
            
        }
        
        /// <summary>
        /// Test DeleteChallengeTemplateUsingDELETE
        /// </summary>
        [Test]
        public void DeleteChallengeTemplateUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string cascade = null;
            //instance.DeleteChallengeTemplateUsingDELETE(id, cascade);
            
        }
        
        /// <summary>
        /// Test DeleteChallengeUsingDELETE
        /// </summary>
        [Test]
        public void DeleteChallengeUsingDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteChallengeUsingDELETE(id);
            
        }
        
        /// <summary>
        /// Test GetActivitiesUsingGET1
        /// </summary>
        [Test]
        public void GetActivitiesUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? challengeId = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetActivitiesUsingGET1(challengeId, size, page, order);
            //Assert.IsInstanceOf<PageResourceBareChallengeActivityResource> (response, "response is PageResourceBareChallengeActivityResource");
        }
        
        /// <summary>
        /// Test GetChallengeActivityUsingGET
        /// </summary>
        [Test]
        public void GetChallengeActivityUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? activityId = null;
            //var response = instance.GetChallengeActivityUsingGET(activityId);
            //Assert.IsInstanceOf<ChallengeActivityResource> (response, "response is ChallengeActivityResource");
        }
        
        /// <summary>
        /// Test GetChallengeEventUsingGET
        /// </summary>
        [Test]
        public void GetChallengeEventUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetChallengeEventUsingGET(id);
            //Assert.IsInstanceOf<ChallengeEventResource> (response, "response is ChallengeEventResource");
        }
        
        /// <summary>
        /// Test GetChallengeEventssUsingGET
        /// </summary>
        [Test]
        public void GetChallengeEventssUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterStartDate = null;
            //string filterEndDate = null;
            //bool? filterCampaigns = null;
            //long? filterChallenge = null;
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetChallengeEventssUsingGET(filterStartDate, filterEndDate, filterCampaigns, filterChallenge, size, page, order);
            //Assert.IsInstanceOf<PageResourceChallengeEventResource> (response, "response is PageResourceChallengeEventResource");
        }
        
        /// <summary>
        /// Test GetChallengeTemplateUsingGET
        /// </summary>
        [Test]
        public void GetChallengeTemplateUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetChallengeTemplateUsingGET(id);
            //Assert.IsInstanceOf<TemplateResource> (response, "response is TemplateResource");
        }
        
        /// <summary>
        /// Test GetChallengeTemplatesUsingGET
        /// </summary>
        [Test]
        public void GetChallengeTemplatesUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? size = null;
            //int? page = null;
            //string order = null;
            //var response = instance.GetChallengeTemplatesUsingGET(size, page, order);
            //Assert.IsInstanceOf<PageResourceTemplateResource> (response, "response is PageResourceTemplateResource");
        }
        
        /// <summary>
        /// Test GetChallengeUsingGET
        /// </summary>
        [Test]
        public void GetChallengeUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetChallengeUsingGET(id);
            //Assert.IsInstanceOf<ChallengeResource> (response, "response is ChallengeResource");
        }
        
        /// <summary>
        /// Test GetChallengesUsingGET1
        /// </summary>
        [Test]
        public void GetChallengesUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? filterTemplate = null;
            //bool? filterActiveCampaign = null;
            //var response = instance.GetChallengesUsingGET1(filterTemplate, filterActiveCampaign);
            //Assert.IsInstanceOf<PageResourceChallengeResource> (response, "response is PageResourceChallengeResource");
        }
        
        /// <summary>
        /// Test UpdateChallengeActivityUsingPUT
        /// </summary>
        [Test]
        public void UpdateChallengeActivityUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? activityId = null;
            //long? challengeId = null;
            //ChallengeActivityResource challengeActivityResource = null;
            //instance.UpdateChallengeActivityUsingPUT(activityId, challengeId, challengeActivityResource);
            
        }
        
        /// <summary>
        /// Test UpdateChallengeTemplateUsingPUT
        /// </summary>
        [Test]
        public void UpdateChallengeTemplateUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //TemplateResource challengeTemplateResource = null;
            //instance.UpdateChallengeTemplateUsingPUT(id, challengeTemplateResource);
            
        }
        
        /// <summary>
        /// Test UpdateChallengeUsingPUT
        /// </summary>
        [Test]
        public void UpdateChallengeUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //ChallengeResource challengeResource = null;
            //var response = instance.UpdateChallengeUsingPUT(id, challengeResource);
            //Assert.IsInstanceOf<ChallengeResource> (response, "response is ChallengeResource");
        }
        
    }

}
