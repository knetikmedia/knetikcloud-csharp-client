/* 
 * Knetik Platform API Documentation Latest
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing UsersSubscriptionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersSubscriptionsApiTests
    {
        private UsersSubscriptionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersSubscriptionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersSubscriptionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersSubscriptionsApi
            //Assert.IsInstanceOfType(typeof(UsersSubscriptionsApi), instance, "instance is a UsersSubscriptionsApi");
        }

        
        /// <summary>
        /// Test GetSubscriptionDetailsUsingGET
        /// </summary>
        [Test]
        public void GetSubscriptionDetailsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? inventoryId = null;
            //var response = instance.GetSubscriptionDetailsUsingGET(userId, inventoryId);
            //Assert.IsInstanceOf<InventorySubscriptionResource> (response, "response is InventorySubscriptionResource");
        }
        
        /// <summary>
        /// Test GetSubscriptionDetailsUsingGET1
        /// </summary>
        [Test]
        public void GetSubscriptionDetailsUsingGET1Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //var response = instance.GetSubscriptionDetailsUsingGET1(userId);
            //Assert.IsInstanceOf<List<InventorySubscriptionResource>> (response, "response is List<InventorySubscriptionResource>");
        }
        
        /// <summary>
        /// Test ReactivateUsingPOST
        /// </summary>
        [Test]
        public void ReactivateUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? inventoryId = null;
            //ReactivateSubscriptionRequest reactivateSubscriptionRequest = null;
            //var response = instance.ReactivateUsingPOST(userId, inventoryId, reactivateSubscriptionRequest);
            //Assert.IsInstanceOf<InvoiceResource> (response, "response is InvoiceResource");
        }
        
        /// <summary>
        /// Test SetBillDateUsingPUT
        /// </summary>
        [Test]
        public void SetBillDateUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? inventoryId = null;
            //long? billDate = null;
            //instance.SetBillDateUsingPUT(userId, inventoryId, billDate);
            
        }
        
        /// <summary>
        /// Test SetPaymentMethodUsingPUT
        /// </summary>
        [Test]
        public void SetPaymentMethodUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? inventoryId = null;
            //int? paymentMethodId = null;
            //instance.SetPaymentMethodUsingPUT(userId, inventoryId, paymentMethodId);
            
        }
        
        /// <summary>
        /// Test SetStatusUsingPUT
        /// </summary>
        [Test]
        public void SetStatusUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? inventoryId = null;
            //string status = null;
            //instance.SetStatusUsingPUT(userId, inventoryId, status);
            
        }
        
        /// <summary>
        /// Test SetUserPlanUsingPUT
        /// </summary>
        [Test]
        public void SetUserPlanUsingPUTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? userId = null;
            //int? inventoryId = null;
            //string planId = null;
            //instance.SetUserPlanUsingPUT(userId, inventoryId, planId);
            
        }
        
    }

}
